//! This stage generates implementations variations
const mem = @import("./../mem.zig");
const fmt = @import("./../fmt.zig");
const meta = @import("./../meta.zig");
const file = @import("./../file.zig");
const proc = @import("./../proc.zig");
const preset = @import("./../preset.zig");
const testing = @import("./../testing.zig");
const builtin = @import("./../builtin.zig");

const config = @import("./config.zig");
const gen = struct {
    usingnamespace @import("./gen-0.zig");
    usingnamespace @import("./gen-1.zig");
    usingnamespace @import("./type_specs.zig");
    usingnamespace @import("./impl_details.zig");
};

const Array = mem.StaticString(1024 * 1024);

const boilerplate: []const u8 =
    \\//! This file is generated by `memgen` stage 2
    \\const gen = @import("./gen-2.zig");
;
const close_spec: file.CloseSpec = .{ .errors = null };
const create_spec: file.CreateSpec = .{
    .errors = null,
    .options = .{ .exclusive = false },
};
const fmt_spec = .{
    .omit_default_fields = true,
    .infer_type_names = true,
    .omit_trailing_comma = true,
};
pub const VariantDetail = packed struct {
    index: u8 = undefined,
    kind: gen.Kind = .{},
    layout: gen.Layout = .{},
    modes: gen.Modes = .{},
    fields: gen.Fields = .{},
    techs: gen.Techniques = .{},
    specs: gen.Specifiers = .{},
};
fn copyFields(comptime T: type, comptime U: type, u: U) T {
    var t: T = undefined;
    inline for (@typeInfo(U).Struct.fields) |field| {
        if (@hasField(T, field.name)) {
            @field(t, field.name) = @field(u, field.name);
        }
    }
    return t;
}
fn writeVariantStructsInternal(array: *Array, impl_detail: *const gen.Detail, specs: gen.Specifiers) void {
    array.writeMany(".{ .index = ");
    array.writeFormat(fmt.ud64(impl_detail.index));
    array.writeMany(", .kind = ");
    array.writeFormat(fmt.render(fmt_spec, impl_detail.kind));
    array.writeMany(", .layout = ");
    array.writeFormat(fmt.render(fmt_spec, impl_detail.layout));
    array.writeMany(", .modes = ");
    array.writeFormat(fmt.render(fmt_spec, impl_detail.modes));
    array.writeMany(", .fields = ");
    array.writeFormat(fmt.render(fmt_spec, impl_detail.fields));
    array.writeMany(", .techs = ");
    array.writeFormat(fmt.render(fmt_spec, impl_detail.techs));
    array.writeMany(", .specs = ");
    array.writeFormat(fmt.render(fmt_spec, specs));
    array.writeMany(", },\n");
}
fn writeVariantStructs(array: *Array) void {
    array.writeMany("pub const impl_variants = [_]gen.VariantDetail{\n");
    inline for (gen.type_specs) |type_spec, index| {
        const I = meta.Child(type_spec.vars);
        var i: usize = 0;
        while (i != ~@as(I, 0)) : (i += 1) {
            for (gen.impl_details) |impl_detail| {
                if (impl_detail.index == index) {
                    writeVariantStructsInternal(array, &impl_detail, copyFields(
                        gen.Specifiers,
                        type_spec.vars,
                        @bitCast(type_spec.vars, @intCast(I, i)),
                    ));
                }
            }
        }
    }
    array.writeMany("};\n");
}
fn writeImplementationVariantsFile(array: *Array) void {
    const fd: u64 = file.create(create_spec, builtin.build_root.? ++ "/top/mem/impl_variants.zig");
    defer file.close(close_spec, fd);
    file.noexcept.write(fd, boilerplate);
    file.noexcept.write(fd, array.readAll());
    array.undefineAll();
}
pub fn generateVariantData() void {
    var array: Array = .{};
    writeVariantStructs(&array);
    writeImplementationVariantsFile(&array);
}
