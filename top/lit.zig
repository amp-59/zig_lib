//! Constants. More useful as a reference than as an import.

// If the programmer can remember to use these, the LHS name may be more helpful
// to the reader than the RHS expression.
pub const max_val_u8: u8 = ~@as(u8, 0);
pub const max_val_u16: u16 = ~@as(u16, 0);
pub const max_val_u32: u32 = ~@as(u32, 0);
pub const max_val_u64: u64 = ~@as(u64, 0);
pub const max_bit_u8: u8 = 1 + (max_val_u8 >> 1);
pub const max_bit_u16: u16 = 1 + (max_val_u16 >> 1);
pub const max_bit_u32: u32 = 1 + (max_val_u32 >> 1);
pub const max_bit_u64: u64 = 1 + (max_val_u64 >> 1);
pub const max_val_i8: i8 = max_val_u8 >> 1;
pub const max_val_i16: i16 = max_val_u16 >> 1;
pub const max_val_i32: i32 = max_val_u32 >> 1;
pub const max_val_i64: i64 = max_val_u64 >> 1;
pub const max_bit_i8: i8 = 1 + (max_val_i8 >> 1);
pub const max_bit_i16: i16 = 1 + (max_val_i16 >> 1);
pub const max_bit_i32: i32 = 1 + (max_val_i32 >> 1);
pub const max_bit_i64: i64 = 1 + (max_val_i64 >> 1);

// So that basic formatters do not need to compute a safe buffer length.
pub const u8d_max_len: u64 = 3;
pub const u8x_max_len: u64 = 5;
pub const u64d_max_len: u64 = 19;
pub const u64x_max_len: u64 = 18;
pub const i8d_max_len: u64 = 4;
pub const i8x_max_len: u64 = 6;
pub const i64d_max_len: u64 = 20;
pub const i64x_max_len: u64 = 19;

/// Unconfirmed theory that using these is faster to compile when naming tuple
/// fields.
pub const ud8 = [256][:0]const u8{
    "0",   "1",   "2",   "3",   "4",   "5",   "6",   "7",   "8",   "9",
    "10",  "11",  "12",  "13",  "14",  "15",  "16",  "17",  "18",  "19",
    "20",  "21",  "22",  "23",  "24",  "25",  "26",  "27",  "28",  "29",
    "30",  "31",  "32",  "33",  "34",  "35",  "36",  "37",  "38",  "39",
    "40",  "41",  "42",  "43",  "44",  "45",  "46",  "47",  "48",  "49",
    "50",  "51",  "52",  "53",  "54",  "55",  "56",  "57",  "58",  "59",
    "60",  "61",  "62",  "63",  "64",  "65",  "66",  "67",  "68",  "69",
    "70",  "71",  "72",  "73",  "74",  "75",  "76",  "77",  "78",  "79",
    "80",  "81",  "82",  "83",  "84",  "85",  "86",  "87",  "88",  "89",
    "90",  "91",  "92",  "93",  "94",  "95",  "96",  "97",  "98",  "99",
    "100", "101", "102", "103", "104", "105", "106", "107", "108", "109",
    "110", "111", "112", "113", "114", "115", "116", "117", "118", "119",
    "120", "121", "122", "123", "124", "125", "126", "127", "128", "129",
    "130", "131", "132", "133", "134", "135", "136", "137", "138", "139",
    "140", "141", "142", "143", "144", "145", "146", "147", "148", "149",
    "150", "151", "152", "153", "154", "155", "156", "157", "158", "159",
    "160", "161", "162", "163", "164", "165", "166", "167", "168", "169",
    "170", "171", "172", "173", "174", "175", "176", "177", "178", "179",
    "180", "181", "182", "183", "184", "185", "186", "187", "188", "189",
    "190", "191", "192", "193", "194", "195", "196", "197", "198", "199",
    "200", "201", "202", "203", "204", "205", "206", "207", "208", "209",
    "210", "211", "212", "213", "214", "215", "216", "217", "218", "219",
    "220", "221", "222", "223", "224", "225", "226", "227", "228", "229",
    "230", "231", "232", "233", "234", "235", "236", "237", "238", "239",
    "240", "241", "242", "243", "244", "245", "246", "247", "248", "249",
    "250", "251", "252", "253", "254", "255",
};
pub const int_prefixes = .{
    "", "", "0b", "", "", "", "", "", "0o", "", "", "", "0d", "", "", "", "0x",
    "", "", "",   "", "", "", "", "", "",   "", "", "", "",   "", "", "", "",
    "", "", "0z", "", "", "", "", "", "",   "", "", "", "",   "", "", "", "",
};
