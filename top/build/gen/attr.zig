const builtin = @import("../../builtin.zig");
const common = @import("common_impls.zig");
const types = struct {
    pub usingnamespace @import("types.zig");
    pub usingnamespace @import("../types.zig");
};
const string_type: types.BGTypeDescrMap = .{
    .store = &types.BGTypeDescr.init([]const u8),
};
const optional_string_type: types.BGTypeDescrMap = .{
    .store = &types.BGTypeDescr.init(?[]const u8),
};
const optional_repeatable_string_type: types.BGTypeDescrMap = .{
    .store = &types.BGTypeDescr.init(?[]const []const u8),
};
const integer_type: types.BGTypeDescrMap = .{
    .store = &types.BGTypeDescr.init(usize),
};
const listen_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?types.Listen" } },
    .parse = &types.BGTypeDescr.init(types.Listen),
};
const optional_integer_type: types.BGTypeDescrMap = .{
    .store = &types.BGTypeDescr.init(?usize),
};
const auto_on_off_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?types.AutoOnOff" } },
    .parse = &types.BGTypeDescr.init(types.AutoOnOff),
};
const optional_path_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?types.Path" } },
    .parse = &.{ .type_decl = .{ .name = "types.Path" } },
};
const paths_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "[]const types.Path" } },
    .write = &.{ .type_decl = .{ .name = "types.Path" } },
};
const optional_macro_slice_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?[]const types.Macro" } },
    .write = &.{ .type_decl = .{ .name = "types.Macros" } },
    .parse = &.{ .type_decl = .{ .name = "types.Macro" } },
};
const optional_module_slice_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?[]const types.Module" } },
    .write = &.{ .type_decl = .{ .name = "types.Modules" } },
    .parse = &.{ .type_decl = .{ .name = "types.Module" } },
};
const optional_dependencies_slice_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?[]const types.ModuleDependency" } },
    .write = &.{ .type_decl = .{ .name = "types.ModuleDependencies" } },
    .parse = &.{ .type_decl = .{ .name = "types.ModuleDependencies" } },
};
const optional_dependencies_slice_type2: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?[]const types.ModuleDependency" } },
    .write = &.{ .type_decl = .{ .name = "types.ModuleDependency" } },
    .parse = &.{ .type_decl = .{ .name = "types.ModuleDependency" } },
};
const build_command_module_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "[]*tasks.BuildModuleCommand" } },
    .write = &.{ .type_decl = .{ .name = "tasks.BuildModuleCommand" } },
    .parse = &.{ .type_decl = .{ .name = "tasks.BuildModuleCommand" } },
};
const build_id_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?types.BuildId" } },
    .parse = &types.BGTypeDescr.init(types.BuildId),
};
const link_flags_type: types.BGTypeDescrMap = .{
    .store = &types.BGTypeDescr.init(?[]const types.LinkFlags),
    .parse = &.{ .type_decl = .{ .name = "types.LinkFlags" } },
};
const optimize_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?builtin.OptimizeMode" } },
    .parse = &types.BGTypeDescr.init(builtin.OptimizeMode),
};
const code_model_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?builtin.CodeModel" } },
    .parse = &types.BGTypeDescr.init(builtin.CodeModel),
};
const output_mode_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "types.BinaryOutput" } },
};
const output_format_type: types.BGTypeDescrMap = .{
    .store = &.{ .type_decl = .{ .name = "?builtin.ObjectFormat" } },
    .parse = &types.BGTypeDescr.init(builtin.ObjectFormat),
};
const flags_type: types.BGTypeDescrMap = .{
    .store = &types.BGTypeDescr.init(?[]const []const u8),
    .write = &.{ .type_decl = .{ .name = "types.ExtraFlags" } },
    .parse = &.{ .type_decl = .{ .name = "types.ExtraFlags" } },
};
pub const scope: []const types.BGTypeDescr.Declaration = &.{
    .{ .name = "PathUnion", .defn = .{
        .spec = "union(enum)",
        .fields = &.{ .{
            .name = "yes",
            .type = .{ .type_decl = .{ .name = "?types.Path" } },
        }, .{
            .name = "no",
        } },
    } },
    .{ .name = "StringUnion", .defn = .{
        .spec = "union(enum)",
        .fields = &.{ .{
            .name = "yes",
            .type = .{ .type_decl = .{ .name = "?[]const u8" } },
        }, .{
            .name = "no",
        } },
    } },
};
pub const zig_modules_attributes: types.Attributes = .{
    .type_name = "BuildModuleCommand",
    .fn_name = "module",
    .type_fn_name = "GenericBuildModuleCommand",
    .params = &.{
        .{
            .name = "deps",
            .tag = .{ .optional_field = .repeatable_formatter },
            .type = optional_dependencies_slice_type2,
            .descr = &.{"Define module dependencies for the current target"},
        },
        .{
            .name = "target",
            .string = "-target",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"<arch><sub>-<os>-<abi> see the targets command"},
        },
        .{
            .name = "mode",
            .string = "-O",
            .tag = .{ .optional_field = .tag },
            .type = optimize_type,
            .descr = &.{
                "Choose what to optimize for:",
                "  Debug          Optimizations off, safety on",
                "  ReleaseSafe    Optimizations on, safety on",
                "  ReleaseFast    Optimizations on, safety off",
                "  ReleaseSmall   Size optimizations on, safety off",
            },
            .flags = .{ .do_parse = true },
        },
        .{
            .name = "format",
            .string = "-ofmt",
            .char = '=',
            .tag = .{ .optional_field = .tag },
            .type = output_format_type,
            .descr = &.{
                "Override target object format:",
                "  elf                    Executable and Linking Format",
                "  c                      C source code",
                "  wasm                   WebAssembly",
                "  coff                   Common Object File Format (Windows)",
                "  macho                  macOS relocatables",
                "  spirv                  Standard, Portable Intermediate Representation V (SPIR-V)",
                "  plan9                  Plan 9 from Bell Labs object format",
                "  hex (planned feature)  Intel IHEX",
                "  raw (planned feature)  Dump machine code directly",
            },
        },
        .{
            .name = "mcpu",
            .string = "--mcpu",
            .descr = &.{"Target a specific cpu type (-mcpu=help for details)"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "code_model",
            .string = "-mcmodel",
            .tag = .{ .optional_field = .tag },
            .type = code_model_type,
            .descr = &.{"Limit range of code and data virtual addresses"},
        },
        .{
            .name = "red_zone",
            .string = "-mred-zone",
            .and_no = .{ .string = "-mno-red-zone" },
            .descr = &.{"Enable or disable the \"red-zone\""},
        },
        .{
            .name = "omit_frame_pointer",
            .string = "-fomit-frame-pointer",
            .and_no = .{ .string = "-fno-omit-frame-pointer" },
            .descr = &.{"Omit the stack frame pointer"},
        },
        .{
            .name = "pic",
            .string = "-fPIC",
            .and_no = .{ .string = "-fno-PIC" },
            .descr = &.{"Enable Position Independent Code"},
        },
        .{
            .name = "stack_check",
            .string = "-fstack-check",
            .and_no = .{ .string = "-fno-stack-check" },
            .descr = &.{"Enable stack probing in unsafe builds"},
        },
        .{
            .name = "stack_protector",
            .string = "-fstack-protector",
            .and_no = .{ .string = "-fno-stack-protector" },
            .descr = &.{"Enable stack protection in unsafe builds"},
        },
        .{
            .name = "sanitize_c",
            .string = "-fsanitize-c",
            .and_no = .{ .string = "-fno-sanitize-c" },
            .descr = &.{"Enable C undefined behaviour detection in unsafe builds"},
        },
        .{
            .name = "valgrind",
            .string = "-fvalgrind",
            .and_no = .{ .string = "-fno-valgrind" },
            .descr = &.{"Include valgrind client requests in release builds"},
        },
        .{
            .name = "sanitize_thread",
            .string = "-fsanitize-thread",
            .and_no = .{ .string = "-fno-sanitize-thread" },
            .descr = &.{"Enable thread sanitizer"},
        },
        .{
            .name = "unwind_tables",
            .string = "-funwind-tables",
            .and_no = .{ .string = "-fno-unwind-tables" },
            .descr = &.{"Always produce unwind table entries for all functions"},
        },
        .{
            .name = "error_tracing",
            .string = "-ferror-tracing",
            .and_no = .{ .string = "-fno-error-tracing" },
            .descr = &.{"Enable error tracing in `ReleaseFast` mode"},
        },
        .{
            .name = "single_threaded",
            .string = "-fsingle-threaded",
            .and_no = .{ .string = "-fno-single-threaded" },
            .descr = &.{"Code assumes there is only one thread"},
        },
        .{
            .name = "strip",
            .string = "-fstrip",
            .and_no = .{ .string = "-fno-strip" },
            .descr = &.{"Omit debug symbols"},
        },
        .{
            .name = "formatted_panics",
            .string = "-fformatted-panics",
            .and_no = .{ .string = "-fno-formatted-panics" },
            .descr = &.{"Enable formatted safety panics"},
        },
        .{
            .name = "dirafter",
            .string = "-idirafter",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Add directory to AFTER include search path"},
        },
        .{
            .name = "system",
            .string = "-isystem",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Add directory to SYSTEM include search path"},
        },
        .{
            .name = "include",
            .string = "-I",
            .tag = .{ .optional_field = .repeatable_string },
            .type = optional_repeatable_string_type,
            .descr = &.{"Add directories to include search path"},
        },
        .{
            .name = "cflags",
            .string = "-cflags",
            .tag = .{ .optional_field = .mapped },
            .type = flags_type,
            .descr = &.{"Set extra flags for the next position C source files"},
        },
        .{
            .name = "rcflags",
            .string = "-rcflags",
            .tag = .{ .optional_field = .mapped },
            .type = flags_type,
            .descr = &.{"Set extra flags for the next positional .rc source files"},
        },
        .{
            .name = "macros",
            .tag = .{ .optional_field = .repeatable_formatter },
            .type = optional_macro_slice_type,
            .descr = &.{"Define C macros available within the `@cImport` namespace"},
            .string = "-D",
        },
        .{
            .name = "library",
            .string = "--library",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Link against system library (only if actually used)"},
        },
        .{
            .name = "needed_library",
            .string = "-needed-library",
            .tag = .{ .optional_field = .repeatable_string },
            .type = optional_repeatable_string_type,
            .descr = &.{"Link against system library (even if unused)"},
        },
        .{
            .name = "weak_library",
            .string = "-weak_library",
            .tag = .{ .optional_field = .repeatable_string },
            .type = optional_repeatable_string_type,
            .descr = &.{"Link against system library marking it and all referenced symbols as weak"},
        },
        .{
            .name = "library_directory",
            .string = "--library-directory",
            .tag = .{ .optional_field = .repeatable_string },
            .type = optional_repeatable_string_type,
            .descr = &.{"Add a directory to the library search path"},
        },
        .{
            .string = "--mod",
            .tag = .{ .literal = .string },
            .type = string_type,
        },
        .{
            .name = "name",
            .tag = .{ .field = .string },
            .type = string_type,
        },
    },
};
pub const zig_build_command_attributes2: types.Attributes = .{
    .type_name = "BuildCommand2",
    .fn_name = "build2",
    .type_fn_name = "GenericBuildCommand2",
    .params = &.{
        .{
            .name = "zig_exe",
            .tag = .{ .param = .string },
            .type = string_type,
        },
        .{
            .name = "zig_mod_paths",
            .tag = .{ .param = .repeatable_formatter },
            .type = paths_type,
            .flags = .{ .do_parse = false },
        },
        .{
            .string = "build-",
            .tag = .{ .literal = .string },
            .char = types.ParamSpec.immediate,
        },
        .{
            .name = "kind",
            .tag = .{ .field = .tag },
            .type = output_mode_type,
        },
        .{
            .name = "emit_bin",
            .string = "-femit-bin",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-bin" },
            .descr = &.{"(default=yes) Output machine code"},
        },
        .{
            .name = "emit_asm",
            .string = "-femit-asm",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-asm" },
            .descr = &.{"(default=no) Output assembly code (.s)"},
        },
        .{
            .name = "emit_llvm_ir",
            .string = "-femit-llvm-ir",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-llvm-ir" },
            .descr = &.{"(default=no) Output optimized LLVM IR (.ll)"},
        },
        .{
            .name = "emit_llvm_bc",
            .string = "-femit-llvm-bc",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-llvm-bc" },
            .descr = &.{"(default=no) Output optimized LLVM BC (.bc)"},
        },
        .{
            .name = "emit_h",
            .string = "-femit-h",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-h" },
            .descr = &.{"(default=no) Output a C header file (.h)"},
        },
        .{
            .name = "emit_docs",
            .string = "-femit-docs",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-docs" },
            .descr = &.{"(default=no) Output documentation (.html)"},
        },
        .{
            .name = "emit_analysis",
            .string = "-femit-analysis",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-analysis" },
            .descr = &.{"(default=no) Output analysis (.json)"},
        },
        .{
            .name = "cache_root",
            .string = "--cache-dir",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Override the local cache directory"},
        },
        .{
            .name = "global_cache_root",
            .string = "--global-cache-dir",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Override the global cache directory"},
        },
        .{
            .name = "zig_lib_root",
            .string = "--zig-lib-dir",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Override Zig installation lib directory"},
        },
        .{
            .name = "listen",
            .string = "--listen",
            .tag = .{ .optional_field = .tag },
            .type = listen_type,
            .descr = &.{"[MISSING]"},
        },
        .{
            .name = "cpu",
            .string = "-mcpu",
            .tag = .{ .optional_field = .tag },
            .type = .{
                .store = &types.BGTypeDescr.init(?types.CPU),
                .parse = &types.BGTypeDescr.init(types.CPU),
            },
            .descr = &.{"Specify target CPU and feature set"},
        },
        .{
            .name = "runtime_safety",
            .string = "-fruntime-safety",
            .and_no = .{ .string = "-fno-runtime-safety" },
            .descr = &.{"Toggle definition of `PanicData` parameter"},
        },
        .{
            .name = "panic_data",
            .string = "-fpanic-data",
            .and_no = .{ .string = "-fno-panic-data" },
            .descr = &.{"Toggle definition of `PanicData` parameter"},
        },
        .{
            .name = "check_unwrapped_error",
            .string = "-fcheck-unwrapped-error",
            .and_no = .{ .string = "-fno-check-unwrapped-error" },
            .descr = &.{"Toggle check for returning from a noreturn function"},
        },
        .{
            .name = "check_unwrapped_null",
            .string = "-fcheck-unwrapped-null",
            .and_no = .{ .string = "-fno-check-unwrapped-null" },
            .descr = &.{"Toggle check for unwrapping (.?) null optional values"},
        },
        .{
            .name = "check_returned_noreturn",
            .string = "-fcheck-returned-noreturn",
            .and_no = .{ .string = "-fno-check-returned-noreturn" },
            .descr = &.{"Toggle check for returning from a noreturn function"},
        },
        .{
            .name = "check_reached_unreachable",
            .string = "-fcheck-reached-unreachable",
            .and_no = .{ .string = "-fno-check-reached-unreachable" },
            .descr = &.{"Toggle check for reaching unreachable code"},
        },
        .{
            .name = "check_accessed_out_of_bounds",
            .string = "-fcheck-accessed-out-of-bounds",
            .and_no = .{ .string = "-fno-check-accessed-out-of-bounds" },
            .descr = &.{"Toggle check for slice[idx] st. idx < slice.len"},
        },
        .{
            .name = "check_accessed_out_of_order",
            .string = "-fcheck-accessed-out-of-order",
            .and_no = .{ .string = "-fno-check-accessed-out-of-order" },
            .descr = &.{"Toggle check for slice[start..finish] st. start <= finish"},
        },
        .{
            .name = "check_accessed_inactive_field",
            .string = "-fcheck-accessed-inactive-field",
            .and_no = .{ .string = "-fno-check-accessed-inactive-field" },
            .descr = &.{"Toggle check for tagged union field accesses"},
        },
        .{
            .name = "check_divided_by_zero",
            .string = "-fcheck-divided-by-zero",
            .and_no = .{ .string = "-fno-check-divided-by-zero" },
            .descr = &.{"Toggle check for division by zero"},
        },
        .{
            .name = "check_memcpy_argument_aliasing",
            .string = "-fcheck-memcpy-argument-aliasing",
            .and_no = .{ .string = "-fno-check-memcpy-argument-aliasing" },
            .descr = &.{"Toggle check for pointer aliasing"},
        },
        .{
            .name = "check_mismatched_memcpy_argument_lengths",
            .string = "-fcheck-mismatched-memcpy-argument-lengths",
            .and_no = .{ .string = "-fno-check-mismatched-memcpy-argument-lengths" },
            .descr = &.{"Toggle check for @memcpy argument lengths"},
        },
        .{
            .name = "check_mismatched_for_loop_capture_lengths",
            .string = "-fcheck-mismatched-for-loop-capture-lengths",
            .and_no = .{ .string = "-fno-check-mismatched-for-loop-capture-lengths" },
            .descr = &.{"Toggle check for for loop capture lengths"},
        },
        .{
            .name = "check_mismatched_sentinel",
            .string = "-fcheck-mismatched-sentinel",
            .and_no = .{ .string = "-fno-check-mismatched-sentinel" },
            .descr = &.{"Toggle check for sentinel value"},
        },
        .{
            .name = "check_shift_amt_overflowed",
            .string = "-fcheck-shift-amt-overflowed",
            .and_no = .{ .string = "-fno-check-shift-amt-overflowed" },
            .descr = &.{"Toggle check for shift amount for non power-of-two integer bit sizes"},
        },
        .{
            .name = "check_arith_exact",
            .string = "-fcheck-arith-exact",
            .and_no = .{ .string = "-fno-check-arith-exact" },
            .descr = &.{"Toggle checks for inexact arithmetic by @shlExact, @shrExact, and @divExact"},
        },
        .{
            .name = "check_arith_overflowed",
            .string = "-fcheck-arith-overflowed",
            .and_no = .{ .string = "-fno-check-arith-overflowed" },
            .descr = &.{"Toggle checks for integer overflow by addition, subtraction, and multiplication"},
        },
        .{
            .name = "check_cast_truncated_data",
            .string = "-fcheck-cast-truncated-data",
            .and_no = .{ .string = "-fno-check-cast-truncated-data" },
            .descr = &.{"Toggle check for @intCast to smaller from larger"},
        },
        .{
            .name = "check_cast_to_enum_from_invalid",
            .string = "-fcheck-cast-to-enum-from-invalid",
            .and_no = .{ .string = "-fno-check-cast-to-enum-from-invalid" },
            .descr = &.{"Toggle check for @enumFromInt"},
        },
        .{
            .name = "check_cast_to_error_from_invalid",
            .string = "-fcheck-cast-to-error-from-invalid",
            .and_no = .{ .string = "-fno-check-cast-to-error-from-invalid" },
            .descr = &.{"Toggle checks for @errorCast and @errorFromInt"},
        },
        .{
            .name = "check_cast_to_pointer_from_invalid",
            .string = "-fcheck-cast-to-pointer-from-invalid",
            .and_no = .{ .string = "-fno-check-cast-to-pointer-from-invalid" },
            .descr = &.{"Toggle checks for @ptrCast and @ptrFromInt"},
        },
        .{
            .name = "check_cast_to_int_from_invalid",
            .string = "-fcheck-cast-to-int-from-invalid",
            .and_no = .{ .string = "-fno-check-cast-to-int-from-invalid" },
            .descr = &.{"Toggle check for @intFromFloat"},
        },
        .{
            .name = "check_cast_to_unsigned_from_negative",
            .string = "-fcheck-cast-to-unsigned-from-negative",
            .and_no = .{ .string = "-fno-check-cast-to-unsigned-from-negative" },
            .descr = &.{"Toggle check for @intCast to unsigned from signed"},
        },
        .{
            .name = "implicit_builtins",
            .string = "-fbuiltin",
            .and_no = .{ .string = "-fno-builtin" },
            .descr = &.{"Enable or disable implicit builtin knowledge of functions"},
        },
        .{
            .name = "exec_model",
            .string = "-mexec-model",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"(WASI) Execution model"},
        },
        .{
            .name = "soname",
            .string = "-fsoname",
            .tag = .{ .field = .string },
            .type = string_type,
            .and_no = .{ .string = "-fno-soname" },
            .descr = &.{"Override the default SONAME value"},
        },
        .{
            .name = "passes",
            .string = "-fopt-bisect-limit",
            .tag = .{ .optional_field = .integer },
            .char = '=',
            .type = optional_integer_type,
            .descr = &.{"Only run [limit] first LLVM optimization passes"},
        },
        .{
            .name = "main_mod_path",
            .string = "--main-mod-path",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Set the directory of the root package"},
        },
        .{
            .name = "pie",
            .string = "-fPIE",
            .and_no = .{ .string = "-fno-PIE" },
            .descr = &.{"Enable Position Independent Executable"},
        },
        .{
            .name = "lto",
            .string = "-flto",
            .and_no = .{ .string = "-fno-lto" },
            .descr = &.{"Enable Link Time Optimization"},
        },
        .{
            .name = "reference_trace",
            .string = "-freference-trace",
            .and_no = .{ .string = "-fno-reference-trace" },
            .descr = &.{"How many lines of reference trace should be shown per compile error"},
        },
        .{
            .name = "function_sections",
            .string = "-ffunction-sections",
            .and_no = .{ .string = "-fno-function-sections" },
            .descr = &.{"Places each function in a separate section"},
        },
        .{
            .name = "data_sections",
            .string = "-fdata-sections",
            .and_no = .{ .string = "-fno-data-sections" },
            .descr = &.{"Places data in separate sections"},
        },
        .{
            .name = "libc",
            .string = "--libc",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Provide a file which specifies libc paths"},
        },
        .{
            .name = "link_script",
            .string = "--script",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Use a custom linker script"},
        },
        .{
            .name = "version_script",
            .string = "--version-script",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Provide a version .map file"},
        },
        .{
            .name = "dynamic_linker",
            .string = "--dynamic-linker",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Set the dynamic interpreter path"},
        },
        .{
            .name = "sysroot",
            .string = "--sysroot",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Set the system root directory"},
        },
        .{
            .name = "entry",
            .string = "-fentry",
            .tag = .{ .field = .string },
            .type = string_type,
            .char = '=',
            .and_no = .{ .string = "-fno-entry" },
            .descr = &.{"Override the default entry symbol name"},
        },
        .{
            .name = "lld",
            .string = "-flld",
            .and_no = .{ .string = "-fno-lld" },
            .descr = &.{"Use LLD as the linker"},
        },
        .{
            .name = "llvm",
            .string = "-fllvm",
            .and_no = .{ .string = "-fno-llvm" },
            .descr = &.{"Use LLVM as the codegen backend"},
        },
        .{
            .name = "compiler_rt",
            .string = "-fcompiler-rt",
            .and_no = .{ .string = "-fno-compiler-rt" },
            .descr = &.{"(default) Include compiler-rt symbols in output"},
        },
        .{
            .name = "rpath",
            .string = "-rpath",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Add directory to the runtime library search path"},
        },
        .{
            .name = "each_lib_rpath",
            .string = "-feach-lib-rpath",
            .and_no = .{ .string = "-fno-each-lib-rpath" },
            .descr = &.{"Ensure adding rpath for each used dynamic library"},
        },
        .{
            .name = "allow_shlib_undefined",
            .string = "-fallow-shlib-undefined",
            .and_no = .{ .string = "-fno-allow-shlib-undefined" },
            .descr = &.{"Allow undefined symbols in shared libraries"},
        },
        .{
            .name = "build_id",
            .string = "--build-id",
            .tag = .{ .optional_field = .tag },
            .char = '=',
            .type = build_id_type,
            .descr = &.{"Help coordinate stripped binaries with debug symbols"},
        },
        .{
            .name = "eh_frame_hdr",
            .string = "--eh-frame-hdr",
            .descr = &.{"Enable C++ exception handling by passing --eh-frame-hdr to linker"},
        },
        .{
            .name = "emit_relocs",
            .string = "--emit-relocs",
            .descr = &.{"Enable output of relocation sections for post build tools"},
        },
        .{
            .name = "gc_sections",
            .string = "--gc-sections",
            .and_no = .{ .string = "--no-gc-sections" },
            .descr = &.{
                "Force removal of functions and data that are unreachable by the entry point or exported symbols",
            },
        },
        .{
            .name = "stack",
            .string = "--stack",
            .tag = .{ .optional_field = .integer },
            .type = optional_integer_type,
            .descr = &.{"Override default stack size"},
        },
        .{
            .name = "image_base",
            .string = "--image-base",
            .tag = .{ .optional_field = .integer },
            .type = optional_integer_type,
            .descr = &.{"Set base address for executable image"},
        },
        .{
            .name = "link_libc",
            .string = "-lc",
            .descr = &.{"Link libc"},
        },
        .{
            .name = "rdynamic",
            .string = "-rdynamic",
            .descr = &.{"Add all symbols to the dynamic symbol table"},
        },
        .{
            .name = "dynamic",
            .string = "-dynamic",
            .descr = &.{"Force output to be dynamically linked"},
        },
        .{
            .name = "static",
            .string = "-static",
            .descr = &.{"Force output to be statically linked"},
        },
        .{
            .name = "symbolic",
            .string = "-Bsymbolic",
            .descr = &.{"Bind global references locally"},
        },
        .{
            .name = "link_flags",
            .string = "-z",
            .tag = .{ .optional_field = .repeatable_tag },
            .type = link_flags_type,
            .descr = &.{
                "Set linker extension flags:",
                "  nodelete                   Indicate that the object cannot be deleted from a process",
                "  notext                     Permit read-only relocations in read-only segments",
                "  defs                       Force a fatal error if any undefined symbols remain",
                "  undefs                     Reverse of -z defs",
                "  origin                     Indicate that the object must have its origin processed",
                "  nocopyreloc                Disable the creation of copy relocations",
                "  now (default)              Force all relocations to be processed on load",
                "  lazy                       Don't force all relocations to be processed on load",
                "  relro (default)            Force all relocations to be read-only after processing",
                "  norelro                    Don't force all relocations to be read-only after processing",
                "  common-page-size=[bytes]   Set the common page size for ELF binaries",
                "  max-page-size=[bytes]      Set the max page size for ELF binaries",
            },
            .flags = .{ .do_parse = false },
        },
        .{
            .name = "mods",
            .tag = .{ .field = .{ .repeatable_task = &zig_modules_attributes } },
            .type = build_command_module_type,
            .special = .{
                .write = common.writeWriteModules,
                .parse = common.writeParseModules,
            },
            .descr = &.{"Define modules available as dependencies for the current target"},
            .default = "&.{}",
        },
        .{
            .name = "files",
            .tag = .{ .param = .repeatable_formatter },
            .type = paths_type,
            .descr = &.{"Add auxiliary non-Zig files to the current target"},
        },
        // Other options
        .{
            .name = "color",
            .string = "--color",
            .tag = .{ .optional_field = .tag },
            .type = auto_on_off_type,
            .descr = &.{"Enable or disable colored error messages"},
        },
        .{
            .name = "incremental_compilation",
            .string = "--debug-incremental",
            .descr = &.{"Enable experimental feature: incremental compilation"},
        },
        .{
            .name = "time_report",
            .string = "-ftime-report",
            .descr = &.{"Print timing diagnostics"},
        },
        .{
            .name = "stack_report",
            .string = "-fstack-report",
            .descr = &.{"Print stack size diagnostics"},
        },
        .{
            .name = "verbose_link",
            .string = "--verbose-link",
            .descr = &.{"Display linker invocations"},
        },
        .{
            .name = "verbose_cc",
            .string = "--verbose-cc",
            .descr = &.{"Display C compiler invocations"},
        },
        .{
            .name = "verbose_air",
            .string = "--verbose-air",
            .descr = &.{"Enable compiler debug output for Zig AIR"},
        },
        .{
            .name = "verbose_mir",
            .string = "--verbose-mir",
            .descr = &.{"Enable compiler debug output for Zig MIR"},
        },
        .{
            .name = "verbose_llvm_ir",
            .string = "--verbose-llvm-ir",
            .descr = &.{"Enable compiler debug output for LLVM IR"},
        },
        .{
            .name = "verbose_cimport",
            .string = "--verbose-cimport",
            .descr = &.{"Enable compiler debug output for C imports"},
        },
        .{
            .name = "verbose_llvm_cpu_features",
            .string = "--verbose-llvm-cpu-features",
            .descr = &.{"Enable compiler debug output for LLVM CPU features"},
        },
        .{
            .name = "debug_log",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .string = "--debug-log",
            .descr = &.{"Enable printing debug/info log messages for scope"},
        },
        .{
            .name = "debug_compiler_errors",
            .string = "--debug-compile-errors",
            .descr = &.{"Crash with helpful diagnostics at the first compile error"},
        },
        .{
            .name = "debug_link_snapshot",
            .string = "--debug-link-snapshot",
            .descr = &.{"Enable dumping of the linker's state in JSON"},
        },
    },
};
pub const zig_build_command_attributes: types.Attributes = .{
    .type_name = "BuildCommand",
    .fn_name = "build",
    .type_fn_name = "GenericBuildCommand",
    .params = &.{
        .{
            .name = "zig_exe",
            .tag = .{ .param = .string },
            .type = string_type,
        },
        .{
            .string = "build-",
            .tag = .{ .literal = .string },
            .char = types.ParamSpec.immediate,
        },
        .{
            .name = "kind",
            .tag = .{ .field = .tag },
            .type = output_mode_type,
        },
        .{
            .name = "emit_bin",
            .string = "-femit-bin",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-bin" },
            .descr = &.{"(default=yes) Output machine code"},
        },
        .{
            .name = "emit_asm",
            .string = "-femit-asm",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-asm" },
            .descr = &.{"(default=no) Output assembly code (.s)"},
        },
        .{
            .name = "emit_llvm_ir",
            .string = "-femit-llvm-ir",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-llvm-ir" },
            .descr = &.{"(default=no) Output optimized LLVM IR (.ll)"},
        },
        .{
            .name = "emit_llvm_bc",
            .string = "-femit-llvm-bc",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-llvm-bc" },
            .descr = &.{"(default=no) Output optimized LLVM BC (.bc)"},
        },
        .{
            .name = "emit_h",
            .string = "-femit-h",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-h" },
            .descr = &.{"(default=no) Output a C header file (.h)"},
        },
        .{
            .name = "emit_docs",
            .string = "-femit-docs",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-docs" },
            .descr = &.{"(default=no) Output documentation (.html)"},
        },
        .{
            .name = "emit_analysis",
            .string = "-femit-analysis",
            .tag = .{ .optional_field = .formatter },
            .type = optional_path_type,
            .and_no = .{ .string = "-fno-emit-analysis" },
            .descr = &.{"(default=no) Output analysis (.json)"},
        },
        .{
            .name = "cache_root",
            .string = "--cache-dir",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Override the local cache directory"},
        },
        .{
            .name = "global_cache_root",
            .string = "--global-cache-dir",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Override the global cache directory"},
        },
        .{
            .name = "zig_lib_root",
            .string = "--zig-lib-dir",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Override Zig installation lib directory"},
        },
        .{
            .name = "listen",
            .string = "--listen",
            .tag = .{ .optional_field = .tag },
            .type = listen_type,
            .descr = &.{"[MISSING]"},
        },
        .{
            .name = "target",
            .string = "-target",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"<arch><sub>-<os>-<abi> see the targets command"},
        },
        .{
            .name = "cpu",
            .string = "-mcpu",
            .tag = .{ .optional_field = .tag },
            .type = .{
                .store = &types.BGTypeDescr.init(?types.CPU),
                .parse = &types.BGTypeDescr.init(types.CPU),
            },
            .descr = &.{"Specify target CPU and feature set"},
        },
        .{
            .name = "code_model",
            .string = "-mcmodel",
            .tag = .{ .optional_field = .tag },
            .type = code_model_type,
            .descr = &.{"Limit range of code and data virtual addresses"},
        },
        .{
            .name = "runtime_safety",
            .string = "-fruntime-safety",
            .and_no = .{ .string = "-fno-runtime-safety" },
            .descr = &.{"Toggle usage of "},
        },
        .{
            .name = "panic_data",
            .string = "-fpanic-data",
            .and_no = .{ .string = "-fno-panic-data" },
            .descr = &.{"Reduces code size at the expense of panic details"},
        },
        .{
            .name = "extra_slice_analysis",
            .string = "-fextra-slice-analysis",
            .and_no = .{ .string = "-fno-extra-slice-analysis" },
            .descr = &.{"Toggle usage of `analyzeSlice2`"},
        },
        .{
            .name = "check_unwrapped_error",
            .string = "-fcheck-unwrapped-error",
            .and_no = .{ .string = "-fno-check-unwrapped-error" },
            .descr = &.{"Toggle check for returning from a noreturn function"},
        },
        .{
            .name = "check_unwrapped_null",
            .string = "-fcheck-unwrapped-null",
            .and_no = .{ .string = "-fno-check-unwrapped-null" },
            .descr = &.{"Toggle check for unwrapping (.?) null optional values"},
        },
        .{
            .name = "check_returned_noreturn",
            .string = "-fcheck-returned-noreturn",
            .and_no = .{ .string = "-fno-check-returned-noreturn" },
            .descr = &.{"Toggle check for returning from a noreturn function"},
        },
        .{
            .name = "check_reached_unreachable",
            .string = "-fcheck-reached-unreachable",
            .and_no = .{ .string = "-fno-check-reached-unreachable" },
            .descr = &.{"Toggle check for reaching unreachable code"},
        },
        .{
            .name = "check_accessed_out_of_bounds",
            .string = "-fcheck-accessed-out-of-bounds",
            .and_no = .{ .string = "-fno-check-accessed-out-of-bounds" },
            .descr = &.{"Toggle check for slice[idx] st. idx < slice.len"},
        },
        .{
            .name = "check_accessed_out_of_order",
            .string = "-fcheck-accessed-out-of-order",
            .and_no = .{ .string = "-fno-check-accessed-out-of-order" },
            .descr = &.{"Toggle check for slice[start..finish] st. start <= finish"},
        },
        .{
            .name = "check_accessed_inactive_field",
            .string = "-fcheck-accessed-inactive-field",
            .and_no = .{ .string = "-fno-check-accessed-inactive-field" },
            .descr = &.{"Toggle check for tagged union field accesses"},
        },
        .{
            .name = "check_divided_by_zero",
            .string = "-fcheck-divided-by-zero",
            .and_no = .{ .string = "-fno-check-divided-by-zero" },
            .descr = &.{"Toggle check for division by zero"},
        },
        .{
            .name = "check_memcpy_argument_aliasing",
            .string = "-fcheck-memcpy-argument-aliasing",
            .and_no = .{ .string = "-fno-check-memcpy-argument-aliasing" },
            .descr = &.{"Toggle check for pointer aliasing"},
        },
        .{
            .name = "check_mismatched_memcpy_argument_lengths",
            .string = "-fcheck-mismatched-memcpy-argument-lengths",
            .and_no = .{ .string = "-fno-check-mismatched-memcpy-argument-lengths" },
            .descr = &.{"Toggle check for @memcpy argument lengths"},
        },
        .{
            .name = "check_mismatched_for_loop_capture_lengths",
            .string = "-fcheck-mismatched-for-loop-capture-lengths",
            .and_no = .{ .string = "-fno-check-mismatched-for-loop-capture-lengths" },
            .descr = &.{"Toggle check for for loop capture lengths"},
        },
        .{
            .name = "check_mismatched_sentinel",
            .string = "-fcheck-mismatched-sentinel",
            .and_no = .{ .string = "-fno-check-mismatched-sentinel" },
            .descr = &.{"Toggle check for sentinel value"},
        },
        .{
            .name = "check_shift_amt_overflowed",
            .string = "-fcheck-shift-amt-overflowed",
            .and_no = .{ .string = "-fno-check-shift-amt-overflowed" },
            .descr = &.{"Toggle check for shift amount for non power-of-two integer bit sizes"},
        },
        .{
            .name = "check_arith_exact",
            .string = "-fcheck-arith-exact",
            .and_no = .{ .string = "-fno-check-arith-exact" },
            .descr = &.{"Toggle checks for inexact arithmetic by @shlExact, @shrExact, and @divExact"},
        },
        .{
            .name = "check_arith_overflowed",
            .string = "-fcheck-arith-overflowed",
            .and_no = .{ .string = "-fno-check-arith-overflowed" },
            .descr = &.{"Toggle checks for integer overflow by addition, subtraction, and multiplication"},
        },
        .{
            .name = "check_cast_truncated_data",
            .string = "-fcheck-cast-truncated-data",
            .and_no = .{ .string = "-fno-check-cast-truncated-data" },
            .descr = &.{"Toggle check for @intCast to smaller from larger"},
        },
        .{
            .name = "check_cast_to_enum_from_invalid",
            .string = "-fcheck-cast-to-enum-from-invalid",
            .and_no = .{ .string = "-fno-check-cast-to-enum-from-invalid" },
            .descr = &.{"Toggle check for @enumFromInt"},
        },
        .{
            .name = "check_cast_to_error_from_invalid",
            .string = "-fcheck-cast-to-error-from-invalid",
            .and_no = .{ .string = "-fno-check-cast-to-error-from-invalid" },
            .descr = &.{"Toggle checks for @errorCast and @errorFromInt"},
        },
        .{
            .name = "check_cast_to_pointer_from_invalid",
            .string = "-fcheck-cast-to-pointer-from-invalid",
            .and_no = .{ .string = "-fno-check-cast-to-pointer-from-invalid" },
            .descr = &.{"Toggle checks for @ptrCast and @ptrFromInt"},
        },
        .{
            .name = "check_cast_to_int_from_invalid",
            .string = "-fcheck-cast-to-int-from-invalid",
            .and_no = .{ .string = "-fno-check-cast-to-int-from-invalid" },
            .descr = &.{"Toggle check for @intFromFloat"},
        },
        .{
            .name = "check_cast_to_unsigned_from_negative",
            .string = "-fcheck-cast-to-unsigned-from-negative",
            .and_no = .{ .string = "-fno-check-cast-to-unsigned-from-negative" },
            .descr = &.{"Toggle check for @intCast to unsigned from signed"},
        },
        .{
            .name = "red_zone",
            .string = "-mred-zone",
            .and_no = .{ .string = "-mno-red-zone" },
            .descr = &.{"Enable or disable the \"red-zone\""},
        },
        .{
            .name = "implicit_builtins",
            .string = "-fbuiltin",
            .and_no = .{ .string = "-fno-builtin" },
            .descr = &.{"Enable or disable implicit builtin knowledge of functions"},
        },
        .{
            .name = "omit_frame_pointer",
            .string = "-fomit-frame-pointer",
            .and_no = .{ .string = "-fno-omit-frame-pointer" },
            .descr = &.{"Omit the stack frame pointer"},
        },
        .{
            .name = "exec_model",
            .string = "-mexec-model",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"(WASI) Execution model"},
        },
        .{
            .name = "name",
            .string = "--name",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Override root name"},
        },
        .{
            .name = "soname",
            .string = "-fsoname",
            .tag = .{ .field = .string },
            .type = string_type,
            .and_no = .{ .string = "-fno-soname" },
            .descr = &.{"Override the default SONAME value"},
        },
        .{
            .name = "mode",
            .string = "-O",
            .tag = .{ .optional_field = .tag },
            .type = optimize_type,
            .descr = &.{
                "Choose what to optimize for:",
                "  Debug          Optimizations off, safety on",
                "  ReleaseSafe    Optimizations on, safety on",
                "  ReleaseFast    Optimizations on, safety off",
                "  ReleaseSmall   Size optimizations on, safety off",
            },
            .flags = .{ .do_parse = true },
        },
        .{
            .name = "passes",
            .string = "-fopt-bisect-limit",
            .tag = .{ .optional_field = .integer },
            .char = '=',
            .type = optional_integer_type,
            .descr = &.{"Only run [limit] first LLVM optimization passes"},
        },
        .{
            .name = "main_mod_path",
            .string = "--main-mod-path",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Set the directory of the root package"},
        },
        .{
            .name = "pic",
            .string = "-fPIC",
            .and_no = .{ .string = "-fno-PIC" },
            .descr = &.{"Enable Position Independent Code"},
        },
        .{
            .name = "pie",
            .string = "-fPIE",
            .and_no = .{ .string = "-fno-PIE" },
            .descr = &.{"Enable Position Independent Executable"},
        },
        .{
            .name = "lto",
            .string = "-flto",
            .and_no = .{ .string = "-fno-lto" },
            .descr = &.{"Enable Link Time Optimization"},
        },
        .{
            .name = "stack_check",
            .string = "-fstack-check",
            .and_no = .{ .string = "-fno-stack-check" },
            .descr = &.{"Enable stack probing in unsafe builds"},
        },
        .{
            .name = "stack_protector",
            .string = "-fstack-protector",
            .and_no = .{ .string = "-fno-stack-protector" },
            .descr = &.{"Enable stack protection in unsafe builds"},
        },
        .{
            .name = "sanitize_c",
            .string = "-fsanitize-c",
            .and_no = .{ .string = "-fno-sanitize-c" },
            .descr = &.{"Enable C undefined behaviour detection in unsafe builds"},
        },
        .{
            .name = "valgrind",
            .string = "-fvalgrind",
            .and_no = .{ .string = "-fno-valgrind" },
            .descr = &.{"Include valgrind client requests in release builds"},
        },
        .{
            .name = "sanitize_thread",
            .string = "-fsanitize-thread",
            .and_no = .{ .string = "-fno-sanitize-thread" },
            .descr = &.{"Enable thread sanitizer"},
        },
        .{
            .name = "unwind_tables",
            .string = "-funwind-tables",
            .and_no = .{ .string = "-fno-unwind-tables" },
            .descr = &.{"Always produce unwind table entries for all functions"},
        },
        .{
            .name = "reference_trace",
            .string = "-freference-trace",
            .and_no = .{ .string = "-fno-reference-trace" },
            .descr = &.{"How many lines of reference trace should be shown per compile error"},
        },
        .{
            .name = "error_tracing",
            .string = "-ferror-tracing",
            .and_no = .{ .string = "-fno-error-tracing" },
            .descr = &.{"Enable error tracing in `ReleaseFast` mode"},
        },
        .{
            .name = "single_threaded",
            .string = "-fsingle-threaded",
            .and_no = .{ .string = "-fno-single-threaded" },
            .descr = &.{"Code assumes there is only one thread"},
        },
        .{
            .name = "function_sections",
            .string = "-ffunction-sections",
            .and_no = .{ .string = "-fno-function-sections" },
            .descr = &.{"Places each function in a separate section"},
        },
        .{
            .name = "data_sections",
            .string = "-fdata-sections",
            .and_no = .{ .string = "-fno-data-sections" },
            .descr = &.{"Places data in separate sections"},
        },
        .{
            .name = "strip",
            .string = "-fstrip",
            .and_no = .{ .string = "-fno-strip" },
            .descr = &.{"Omit debug symbols"},
        },
        .{
            .name = "formatted_panics",
            .string = "-fformatted-panics",
            .and_no = .{ .string = "-fno-formatted-panics" },
            .descr = &.{"Enable formatted safety panics"},
        },
        .{
            .name = "format",
            .string = "-ofmt",
            .char = '=',
            .tag = .{ .optional_field = .tag },
            .type = output_format_type,
            .descr = &.{
                "Override target object format:",
                "  elf                    Executable and Linking Format",
                "  c                      C source code",
                "  wasm                   WebAssembly",
                "  coff                   Common Object File Format (Windows)",
                "  macho                  macOS relocatables",
                "  spirv                  Standard, Portable Intermediate Representation V (SPIR-V)",
                "  plan9                  Plan 9 from Bell Labs object format",
                "  hex (planned feature)  Intel IHEX",
                "  raw (planned feature)  Dump machine code directly",
            },
        },
        .{
            .name = "dirafter",
            .string = "-idirafter",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Add directory to AFTER include search path"},
        },
        .{
            .name = "system",
            .string = "-isystem",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Add directory to SYSTEM include search path"},
        },
        .{
            .name = "libc",
            .string = "--libc",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Provide a file which specifies libc paths"},
        },
        .{
            .name = "library",
            .string = "--library",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Link against system library (only if actually used)"},
        },
        .{
            .name = "include",
            .string = "-I",
            .tag = .{ .optional_field = .repeatable_string },
            .type = optional_repeatable_string_type,
            .descr = &.{"Add directories to include search path"},
        },
        .{
            .name = "needed_library",
            .string = "--needed-library",
            .tag = .{ .optional_field = .repeatable_string },
            .type = optional_repeatable_string_type,
            .descr = &.{"Link against system library (even if unused)"},
        },
        .{
            .name = "library_directory",
            .string = "--library-directory",
            .tag = .{ .optional_field = .repeatable_string },
            .type = optional_repeatable_string_type,
            .descr = &.{"Add a directory to the library search path"},
        },
        .{
            .name = "link_script",
            .string = "--script",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Use a custom linker script"},
        },
        .{
            .name = "version_script",
            .string = "--version-script",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Provide a version .map file"},
        },
        .{
            .name = "dynamic_linker",
            .string = "--dynamic-linker",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Set the dynamic interpreter path"},
        },
        .{
            .name = "sysroot",
            .string = "--sysroot",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Set the system root directory"},
        },
        .{
            .name = "entry",
            .string = "-fentry",
            .tag = .{ .field = .string },
            .type = string_type,
            .char = '=',
            .and_no = .{ .string = "-fno-entry" },
            .descr = &.{"Override the default entry symbol name"},
        },
        .{
            .name = "lld",
            .string = "-flld",
            .and_no = .{ .string = "-fno-lld" },
            .descr = &.{"Use LLD as the linker"},
        },
        .{
            .name = "llvm",
            .string = "-fllvm",
            .and_no = .{ .string = "-fno-llvm" },
            .descr = &.{"Use LLVM as the codegen backend"},
        },
        .{
            .name = "compiler_rt",
            .string = "-fcompiler-rt",
            .and_no = .{ .string = "-fno-compiler-rt" },
            .descr = &.{"(default) Include compiler-rt symbols in output"},
        },
        .{
            .name = "rpath",
            .string = "-rpath",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Add directory to the runtime library search path"},
        },
        .{
            .name = "each_lib_rpath",
            .string = "-feach-lib-rpath",
            .and_no = .{ .string = "-fno-each-lib-rpath" },
            .descr = &.{"Ensure adding rpath for each used dynamic library"},
        },
        .{
            .name = "allow_shlib_undefined",
            .string = "-fallow-shlib-undefined",
            .and_no = .{ .string = "-fno-allow-shlib-undefined" },
            .descr = &.{"Allow undefined symbols in shared libraries"},
        },
        .{
            .name = "build_id",
            .string = "--build-id",
            .tag = .{ .optional_field = .tag },
            .char = '=',
            .type = build_id_type,
            .descr = &.{"Help coordinate stripped binaries with debug symbols"},
        },
        .{
            .name = "eh_frame_hdr",
            .string = "--eh-frame-hdr",
            .descr = &.{"Enable C++ exception handling by passing --eh-frame-hdr to linker"},
        },
        .{
            .name = "emit_relocs",
            .string = "--emit-relocs",
            .descr = &.{"Enable output of relocation sections for post build tools"},
        },
        .{
            .name = "gc_sections",
            .string = "--gc-sections",
            .and_no = .{ .string = "--no-gc-sections" },
            .descr = &.{
                "Force removal of functions and data that are unreachable by the entry point or exported symbols",
            },
        },
        .{
            .name = "stack",
            .string = "--stack",
            .tag = .{ .optional_field = .integer },
            .type = optional_integer_type,
            .descr = &.{"Override default stack size"},
        },
        .{
            .name = "image_base",
            .string = "--image-base",
            .tag = .{ .optional_field = .integer },
            .type = optional_integer_type,
            .descr = &.{"Set base address for executable image"},
        },
        .{
            .name = "macros",
            .tag = .{ .optional_field = .repeatable_formatter },
            .type = optional_macro_slice_type,
            .descr = &.{"Define C macros available within the `@cImport` namespace"},
            .string = "-D",
        },
        .{
            .name = "modules",
            .tag = .{ .optional_field = .repeatable_formatter },
            .type = optional_module_slice_type,
            .descr = &.{"Define modules available as dependencies for the current target"},
            .string = "--mod",
        },
        .{
            .name = "dependencies",
            .string = "--deps",
            .tag = .{ .optional_field = .mapped },
            .type = optional_dependencies_slice_type,
            .descr = &.{"Define module dependencies for the current target"},
        },
        .{
            .name = "cflags",
            .string = "-cflags",
            .tag = .{ .optional_field = .mapped },
            .type = flags_type,
            .descr = &.{"Set extra flags for the next position C source files"},
        },
        .{
            .name = "rcflags",
            .string = "-rcflags",
            .tag = .{ .optional_field = .mapped },
            .type = flags_type,
            .descr = &.{"Set extra flags for the next positional .rc source files"},
        },
        .{
            .name = "link_libc",
            .string = "-lc",
            .descr = &.{"Link libc"},
        },
        .{
            .name = "rdynamic",
            .string = "-rdynamic",
            .descr = &.{"Add all symbols to the dynamic symbol table"},
        },
        .{
            .name = "dynamic",
            .string = "-dynamic",
            .descr = &.{"Force output to be dynamically linked"},
        },
        .{
            .name = "static",
            .string = "-static",
            .descr = &.{"Force output to be statically linked"},
        },
        .{
            .name = "symbolic",
            .string = "-Bsymbolic",
            .descr = &.{"Bind global references locally"},
        },
        .{
            .name = "link_flags",
            .string = "-z",
            .tag = .{ .optional_field = .repeatable_tag },
            .type = link_flags_type,
            .descr = &.{
                "Set linker extension flags:",
                "  nodelete                   Indicate that the object cannot be deleted from a process",
                "  notext                     Permit read-only relocations in read-only segments",
                "  defs                       Force a fatal error if any undefined symbols remain",
                "  undefs                     Reverse of -z defs",
                "  origin                     Indicate that the object must have its origin processed",
                "  nocopyreloc                Disable the creation of copy relocations",
                "  now (default)              Force all relocations to be processed on load",
                "  lazy                       Don't force all relocations to be processed on load",
                "  relro (default)            Force all relocations to be read-only after processing",
                "  norelro                    Don't force all relocations to be read-only after processing",
                "  common-page-size=[bytes]   Set the common page size for ELF binaries",
                "  max-page-size=[bytes]      Set the max page size for ELF binaries",
            },
            .flags = .{ .do_parse = false },
        },
        .{
            .name = "files",
            .tag = .{ .param = .repeatable_formatter },
            .type = paths_type,
            .descr = &.{"Add auxiliary files to the current target"},
        },
        // Other options
        .{
            .name = "color",
            .string = "--color",
            .tag = .{ .optional_field = .tag },
            .type = auto_on_off_type,
            .descr = &.{"Enable or disable colored error messages"},
        },
        .{
            .name = "incremental_compilation",
            .string = "--debug-incremental",
            .descr = &.{"Enable experimental feature: incremental compilation"},
        },
        .{
            .name = "time_report",
            .string = "-ftime-report",
            .descr = &.{"Print timing diagnostics"},
        },
        .{
            .name = "stack_report",
            .string = "-fstack-report",
            .descr = &.{"Print stack size diagnostics"},
        },
        .{
            .name = "verbose_link",
            .string = "--verbose-link",
            .descr = &.{"Display linker invocations"},
        },
        .{
            .name = "verbose_cc",
            .string = "--verbose-cc",
            .descr = &.{"Display C compiler invocations"},
        },
        .{
            .name = "verbose_air",
            .string = "--verbose-air",
            .descr = &.{"Enable compiler debug output for Zig AIR"},
        },
        .{
            .name = "verbose_mir",
            .string = "--verbose-mir",
            .descr = &.{"Enable compiler debug output for Zig MIR"},
        },
        .{
            .name = "verbose_llvm_ir",
            .string = "--verbose-llvm-ir",
            .descr = &.{"Enable compiler debug output for LLVM IR"},
        },
        .{
            .name = "verbose_cimport",
            .string = "--verbose-cimport",
            .descr = &.{"Enable compiler debug output for C imports"},
        },
        .{
            .name = "verbose_llvm_cpu_features",
            .string = "--verbose-llvm-cpu-features",
            .descr = &.{"Enable compiler debug output for LLVM CPU features"},
        },
        .{
            .name = "debug_log",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .string = "--debug-log",
            .descr = &.{"Enable printing debug/info log messages for scope"},
        },
        .{
            .name = "debug_compiler_errors",
            .string = "--debug-compile-errors",
            .descr = &.{"Crash with helpful diagnostics at the first compile error"},
        },
        .{
            .name = "debug_link_snapshot",
            .string = "--debug-link-snapshot",
            .descr = &.{"Enable dumping of the linker's state in JSON"},
        },
    },
};
pub const ranlib_command_options: []const types.ParamSpec = &.{
    .{
        .name = "real_ids",
        .string = "-U",
        .descr = &.{"Use actual timestamps and uids/gids"},
        .and_no = .{
            .string = "-D",
        },
    },
};
const Format = enum {
    default,
    gnu,
    darwin,
    bsd,
    bigarchive,
};
const Operation = enum {
    d,
    m,
    q,
    r,
    s,
    x,
};
const archive_format_type: types.BGTypeDescrMap = .{
    .store = &types.BGTypeDescr.init(?Format),
    .parse = &types.BGTypeDescr.init(Format),
};
const archive_operation_type: types.BGTypeDescrMap = .{
    .store = &types.BGTypeDescr.init(Operation),
};
pub const zig_ar_command_attributes: types.Attributes = .{
    .type_name = "ArchiveCommand",
    .fn_name = "archive",
    .params = &.{
        .{
            .name = "zig_exe",
            .tag = .{ .param = .string },
            .type = string_type,
        },
        .{
            .string = "ar",
            .tag = .{ .literal = .string },
        },
        .{
            .name = "format",
            .string = "--format",
            .tag = .{ .optional_field = .tag },
            .type = archive_format_type,
            .descr = &.{"Archive format to create"},
        },
        .{
            .name = "plugin",
            .string = "--plugin",
            .descr = &.{"Ignored for compatibility"},
        },
        .{
            .name = "output",
            .string = "--output",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Extraction target directory"},
        },
        .{
            .name = "thin",
            .string = "--thin",
            .descr = &.{"Create a thin archive"},
        },
        .{
            .name = "after",
            .string = "a",
            .char = types.ParamSpec.immediate,
            .descr = &.{"Put [files] after [relpos]"},
        },
        .{
            .name = "before",
            .string = "b",
            .char = types.ParamSpec.immediate,
            .descr = &.{"Put [files] before [relpos] (same as [i])"},
        },
        .{
            .name = "create",
            .string = "c",
            .char = types.ParamSpec.immediate,
            .descr = &.{"Do not warn if archive had to be created"},
        },
        .{
            .name = "zero_ids",
            .string = "D",
            .char = types.ParamSpec.immediate,
            .descr = &.{"Use zero for timestamps and uids/gids (default)"},
        },
        .{
            .name = "real_ids",
            .string = "U",
            .char = types.ParamSpec.immediate,
            .descr = &.{"Use actual timestamps and uids/gids"},
        },
        .{
            .name = "append",
            .string = "L",
            .char = types.ParamSpec.immediate,
            .descr = &.{"Add archive's contents"},
        },
        .{
            .name = "preserve_dates",
            .string = "o",
            .char = types.ParamSpec.immediate,
            .descr = &.{"Preserve original dates"},
        },
        .{
            .name = "index",
            .string = "s",
            .char = types.ParamSpec.immediate,
            .descr = &.{"Create an archive index (cf. ranlib)"},
        },
        .{
            .name = "no_symbol_table",
            .string = "S",
            .char = types.ParamSpec.immediate,
            .descr = &.{"do not build a symbol table"},
        },
        .{
            .name = "update",
            .string = "u",
            .char = types.ParamSpec.immediate,
            .descr = &.{"update only [files] newer than archive contents"},
        },
        .{
            .name = "operation",
            .tag = .{ .field = .tag },
            .type = archive_operation_type,
            .descr = &.{
                "d  Delete [files] from the archive",
                "m  Move [files] in the archive",
                "q  Quick append [files] to the archive",
                "r  Replace or insert [files] into the archive",
                "s  Act as ranlib",
                "x  Extract [files] from the archive",
            },
        },
        .{
            .name = "files",
            .tag = .{ .param = .repeatable_formatter },
            .type = paths_type,
            .descr = &.{"Add auxiliary files to the current target"},
        },
    },
};
pub const zig_fetch_command_attributes: types.Attributes = .{
    .type_name = "FetchCommand",
    .fn_name = "fetch",
    .type_fn_name = "GenericBuildCommand",
    .params = &.{
        .{
            .name = "zig_exe",
            .tag = .{ .param = .string },
            .type = string_type,
        },
        .{
            .string = "fetch",
            .tag = .{ .literal = .string },
            .char = types.ParamSpec.immediate,
        },
        .{
            .name = "global_cache_root",
            .string = "--global-cache-dir",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Override the global cache directory"},
        },
    },
};
pub const zig_format_command_attributes: types.Attributes = .{
    .type_name = "FormatCommand",
    .fn_name = "format",
    .params = &.{
        .{
            .name = "zig_exe",
            .tag = .{ .param = .string },
            .type = string_type,
        },
        .{
            .string = "fmt",
            .tag = .{ .literal = .string },
        },
        .{
            .name = "color",
            .string = "--color",
            .tag = .{ .optional_field = .tag },
            .type = auto_on_off_type,
            .descr = &.{"Enable or disable colored error messages"},
        },
        .{
            .name = "stdin",
            .string = "--stdin",
            .descr = &.{"Format code from stdin; output to stdout"},
        },
        .{
            .name = "check",
            .string = "--check",
            .descr = &.{"List non-conforming files and exit with an error if the list is non-empty"},
        },
        .{
            .name = "ast_check",
            .string = "--ast-check",
            .descr = &.{"Run zig ast-check on every file"},
        },
        .{
            .name = "exclude",
            .string = "--exclude",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Exclude file or directory from formatting"},
        },
        .{
            .name = "pathname",
            .tag = .{ .param = .formatter },
            .type = .{ .store = &.{ .type_decl = .{ .name = "types.Path" } } },
            .descr = &.{"File system target for formatting operation. May be a file or a directory."},
        },
    },
};

pub const zig_objcopy_command_attributes: types.Attributes = .{
    .type_name = "ObjcopyCommand",
    .fn_name = "objcopy",
    .params = &.{
        .{
            .name = "zig_exe",
            .tag = .{ .param = .string },
            .type = string_type,
        },
        .{
            .string = "objcopy",
            .tag = .{ .literal = .string },
        },
        .{
            .name = "output_target",
            .tag = .{ .optional_field = .string },
            .string = "--output-target",
            .type = optional_string_type,
        },
        .{
            .name = "only_section",
            .tag = .{ .optional_field = .string },
            .string = "--only-section",
            .type = optional_string_type,
        },
        .{
            .name = "pad_to",
            .string = "--pad-to",
            .tag = .{ .optional_field = .integer },
            .type = optional_integer_type,
        },
        .{
            .name = "strip_debug",
            .string = "--strip-debug",
        },
        .{
            .name = "strip_all",
            .string = "--strip-all",
        },
        .{
            .name = "debug_only",
            .string = "--only-keep-debug",
        },
        .{
            .name = "add_gnu_debuglink",
            .tag = .{ .optional_field = .string },
            .string = "--add-gnu-debuglink",
            .type = optional_string_type,
        },
        .{
            .name = "extract_to",
            .tag = .{ .optional_field = .string },
            .string = "--extract-to",
            .type = optional_string_type,
        },
        .{
            .name = "path",
            .tag = .{ .param = .formatter },
            .type = .{ .store = &.{ .type_decl = .{ .name = "types.Path" } } },
            .descr = &.{"Target binary"},
        },
    },
};
pub const llvm_tblgen_command_attributes: types.Attributes = .{
    .type_name = "TableGenCommand",
    .fn_name = "tblgen",
    .params = &.{
        .{
            .name = "color",
            .string = "--color",
            .tag = .{ .optional_field = .tag },
            .type = auto_on_off_type,
            .descr = &.{"Use colors in output (default=autodetect)"},
        },
        .{
            .name = "macros",
            .tag = .{ .optional_field = .mapped },
            .type = optional_macro_slice_type,
            .descr = &.{"Define macros"},
        },
        .{
            .name = "include",
            .string = "-I",
            .tag = .{ .optional_field = .repeatable_string },
            .type = optional_repeatable_string_type,
            .char = types.ParamSpec.immediate,
            .descr = &.{"Add directories to include search path"},
        },
        .{
            .name = "dependencies",
            .string = "-d",
            .tag = .{ .optional_field = .repeatable_string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const []const u8) },
            .descr = &.{"Add file dependencies"},
        },
        .{
            .name = "print_records",
            .string = "--print-records",
            .descr = &.{"Print all records to stdout (default)"},
        },
        .{
            .name = "print_detailed_records",
            .string = "--print-detailed-records",
            .descr = &.{"Print full details of all records to stdout"},
        },
        .{
            .name = "null_backend",
            .string = "--null-backend",
            .descr = &.{"Do nothing after parsing (useful for timing)"},
        },
        .{
            .name = "dump_json",
            .string = "--dump-json",
            .descr = &.{"Dump all records as machine-readable JSON"},
        },
        .{
            .name = "gen_emitter",
            .string = "--gen-emitter",
            .descr = &.{"Generate machine code emitter"},
        },
        .{
            .name = "gen_register_info",
            .string = "--gen-register-info",
            .descr = &.{"Generate registers and register classes info"},
        },
        .{
            .name = "gen_instr_info",
            .string = "--gen-instr-info",
            .descr = &.{"Generate instruction descriptions"},
        },
        .{
            .name = "gen_instr_docs",
            .string = "--gen-instr-docs",
            .descr = &.{"Generate instruction documentation"},
        },
        .{
            .name = "gen_callingconv",
            .string = "--gen-callingconv",
            .descr = &.{"Generate calling convention descriptions"},
        },
        .{
            .name = "gen_asm_writer",
            .string = "--gen-asm-writer",
            .descr = &.{"Generate assembly writer"},
        },
        .{
            .name = "gen_disassembler",
            .string = "--gen-disassembler",
            .descr = &.{"Generate disassembler"},
        },
        .{
            .name = "gen_pseudo_lowering",
            .string = "--gen-pseudo-lowering",
            .descr = &.{"Generate pseudo instruction lowering"},
        },
        .{
            .name = "gen_compress_inst_emitter",
            .string = "--gen-compress-inst-emitter",
            .descr = &.{"Generate RISCV compressed instructions."},
        },
        .{
            .name = "gen_asm_matcher",
            .string = "--gen-asm-matcher",
            .descr = &.{"Generate assembly instruction matcher"},
        },
        .{
            .name = "gen_dag_isel",
            .string = "--gen-dag-isel",
            .descr = &.{"Generate a DAG instruction selector"},
        },
        .{
            .name = "gen_dfa_packetizer",
            .string = "--gen-dfa-packetizer",
            .descr = &.{"Generate DFA Packetizer for VLIW targets"},
        },
        .{
            .name = "gen_fast_isel",
            .string = "--gen-fast-isel",
            .descr = &.{"Generate a \"fast\" instruction selector"},
        },
        .{
            .name = "gen_subtarget",
            .string = "--gen-subtarget",
            .descr = &.{"Generate subtarget enumerations"},
        },
        .{
            .name = "gen_intrinsic_enums",
            .string = "--gen-intrinsic-enums",
            .descr = &.{"Generate intrinsic enums"},
        },
        .{
            .name = "gen_intrinsic_impl",
            .string = "--gen-intrinsic-impl",
            .descr = &.{"Generate intrinsic information"},
        },
        .{
            .name = "print_enums",
            .string = "--print-enums",
            .descr = &.{"Print enum values for a class"},
        },
        .{
            .name = "print_sets",
            .string = "--print-sets",
            .descr = &.{"Print expanded sets for testing DAG exprs"},
        },
        .{
            .name = "gen_opt_parser_defs",
            .string = "--gen-opt-parser-defs",
            .descr = &.{"Generate option definitions"},
        },
        .{
            .name = "gen_opt_rst",
            .string = "--gen-opt-rst",
            .descr = &.{"Generate option RST"},
        },
        .{
            .name = "gen_ctags",
            .string = "--gen-ctags",
            .descr = &.{"Generate ctags-compatible index"},
        },
        .{
            .name = "gen_attrs",
            .string = "--gen-attrs",
            .descr = &.{"Generate attributes"},
        },
        .{
            .name = "gen_searchable_tables",
            .string = "--gen-searchable-tables",
            .descr = &.{"Generate generic binary-searchable table"},
        },
        .{
            .name = "gen_global_isel",
            .string = "--gen-global-isel",
            .descr = &.{"Generate GlobalISel selector"},
        },
        .{
            .name = "gen_global_isel_combiner",
            .string = "--gen-global-isel-combiner",
            .descr = &.{"Generate GlobalISel combiner"},
        },
        .{
            .name = "gen_x86_EVEX2VEX_tables",
            .string = "--gen-x86-EVEX2VEX-tables",
            .descr = &.{"Generate X86 EVEX to VEX compress tables"},
        },
        .{
            .name = "gen_x86_fold_tables",
            .string = "--gen-x86-fold-tables",
            .descr = &.{"Generate X86 fold tables"},
        },
        .{
            .name = "gen_x86_mnemonic_tables",
            .string = "--gen-x86-mnemonic-tables",
            .descr = &.{"Generate X86 mnemonic tables"},
        },
        .{
            .name = "gen_register_bank",
            .string = "--gen-register-bank",
            .descr = &.{"Generate registers bank descriptions"},
        },
        .{
            .name = "gen_exegesis",
            .string = "--gen-exegesis",
            .descr = &.{"Generate llvm-exegesis tables"},
        },
        .{
            .name = "gen_automata",
            .string = "--gen-automata",
            .descr = &.{"Generate generic automata"},
        },
        .{
            .name = "gen_directive_decl",
            .string = "--gen-directive-decl",
            .descr = &.{"Generate directive related declaration code (header file)"},
        },
        .{
            .name = "gen_directive_impl",
            .string = "--gen-directive-impl",
            .descr = &.{"Generate directive related implementation code"},
        },
        .{
            .name = "gen_dxil_operation",
            .string = "--gen-dxil-operation",
            .descr = &.{"Generate DXIL operation information"},
        },
        .{
            .name = "gen_riscv_target_def",
            .string = "--gen-riscv-target_def",
            .descr = &.{"Generate the list of CPU for RISCV"},
        },
        .{
            .name = "output",
            .string = "-o",
            .tag = .{ .optional_field = .string },
            .type = optional_string_type,
            .descr = &.{"Output file"},
        },
    },
};
pub const llvm_llc_command_attributes: types.Attributes = .{
    .type_name = "LLCCommand",
    .fn_name = "llc",
    .params = &.{
        .{
            .name = "llc_exe",
            .tag = .{ .param = .string },
            .type = string_type,
        },
        .{
            .name = "aarch64_a57_fp_load_balancing_force_all",
            .string = "--aarch64-a57-fp-load-balancing-force-all",
            .descr = &.{"Always modify dest registers regardless of color"},
        },
        .{
            .name = "aarch64_a57_fp_load_balancing_override",
            .string = "--aarch64-a57-fp-load-balancing-override",
            .descr = &.{"Ignore balance information, always return (1: Even, 2: Odd)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_bcc_offset_bits",
            .string = "--aarch64-bcc-offset-bits",
            .descr = &.{"Restrict range of Bcc instructions (DEBUG)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_cbz_offset_bits",
            .string = "--aarch64-cbz-offset-bits",
            .descr = &.{"Restrict range of CB[N]Z instructions (DEBUG)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_ccmp_limit",
            .string = "--aarch64-ccmp-limit",
            .descr = &.{"Maximum number of instructions per speculated block."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_early_ifcvt",
            .string = "--aarch64-early-ifcvt",
            .descr = &.{"Enable the early if converter pass"},
        },
        .{
            .name = "aarch64_elf_ldtls_generation",
            .string = "--aarch64-elf-ldtls-generation",
            .descr = &.{"Allow AArch64 Local Dynamic TLS code generation"},
        },
        .{
            .name = "aarch64_enable_atomic_cfg_tidy",
            .string = "--aarch64-enable-atomic-cfg-tidy",
            .descr = &.{"Run SimplifyCFG after expanding atomic operations to make use of cmpxchg flow-based information"},
        },
        .{
            .name = "aarch64_enable_branch_relax",
            .string = "--aarch64-enable-branch-relax",
            .descr = &.{"Relax out of range conditional branches"},
        },
        .{
            .name = "aarch64_enable_branch_targets",
            .string = "--aarch64-enable-branch-targets",
            .descr = &.{"Enable the AArch64 branch target pass"},
        },
        .{
            .name = "aarch64_enable_ccmp",
            .string = "--aarch64-enable-ccmp",
            .descr = &.{"Enable the CCMP formation pass"},
        },
        .{
            .name = "aarch64_enable_collect_loh",
            .string = "--aarch64-enable-collect-loh",
            .descr = &.{"Enable the pass that emits the linker optimization hints (LOH)"},
        },
        .{
            .name = "aarch64_enable_compress_jump_tables",
            .string = "--aarch64-enable-compress-jump-tables",
            .descr = &.{"Use smallest entry possible for jump tables"},
        },
        .{
            .name = "aarch64_enable_cond_br_tune",
            .string = "--aarch64-enable-cond-br-tune",
            .descr = &.{"Enable the conditional branch tuning pass"},
        },
        .{
            .name = "aarch64_enable_condopt",
            .string = "--aarch64-enable-condopt",
            .descr = &.{"Enable the condition optimizer pass"},
        },
        .{
            .name = "aarch64_enable_copy_propagation",
            .string = "--aarch64-enable-copy-propagation",
            .descr = &.{"Enable the copy propagation with AArch64 copy instr"},
        },
        .{
            .name = "aarch64_enable_copyelim",
            .string = "--aarch64-enable-copyelim",
            .descr = &.{"Enable the redundant copy elimination pass"},
        },
        .{
            .name = "aarch64_enable_dead_defs",
            .string = "--aarch64-enable-dead-defs",
            .descr = &.{"Enable the pass that removes dead definitons and replaces stores to them with stores to the zero register"},
        },
        .{
            .name = "aarch64_enable_early_ifcvt",
            .string = "--aarch64-enable-early-ifcvt",
            .descr = &.{"Run early if-conversion"},
        },
        .{
            .name = "aarch64_enable_falkor_hwpf_fix",
            .string = "--aarch64-enable-falkor-hwpf-fix",
            .descr = &.{""},
        },
        .{
            .name = "aarch64_enable_gep_opt",
            .string = "--aarch64-enable-gep-opt",
            .descr = &.{"Enable optimizations on complex GEPs"},
        },
        .{
            .name = "aarch64_enable_gisel_ldst_postlegal",
            .string = "--aarch64-enable-gisel-ldst-postlegal",
            .descr = &.{"Enable GlobalISel's post-legalizer load/store optimization pass"},
        },
        .{
            .name = "aarch64_enable_gisel_ldst_prelegal",
            .string = "--aarch64-enable-gisel-ldst-prelegal",
            .descr = &.{"Enable GlobalISel's pre-legalizer load/store optimization pass"},
        },
        .{
            .name = "aarch64_enable_global_isel_at_O",
            .string = "--aarch64-enable-global-isel-at-O",
            .descr = &.{"Enable GlobalISel at or below an opt level (-1 to disable)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_enable_global_merge",
            .string = "--aarch64-enable-global-merge",
            .descr = &.{"Enable the global merge pass"},
        },
        .{
            .name = "aarch64_enable_ldst_opt",
            .string = "--aarch64-enable-ldst-opt",
            .descr = &.{"Enable the load/store pair optimization pass"},
        },
        .{
            .name = "aarch64_enable_logical_imm",
            .string = "--aarch64-enable-logical-imm",
            .descr = &.{"Enable AArch64 logical imm instruction optimization"},
        },
        .{
            .name = "aarch64_enable_loop_data_prefetch",
            .string = "--aarch64-enable-loop-data-prefetch",
            .descr = &.{"Enable the loop data prefetch pass"},
        },
        .{
            .name = "aarch64_enable_mcr",
            .string = "--aarch64-enable-mcr",
            .descr = &.{"Enable the machine combiner pass"},
        },
        .{
            .name = "aarch64_enable_mgather_combine",
            .string = "--aarch64-enable-mgather-combine",
            .descr = &.{"Combine extends of AArch64 masked gather intrinsics"},
        },
        .{
            .name = "aarch64_enable_nonlazybind",
            .string = "--aarch64-enable-nonlazybind",
            .descr = &.{"Call nonlazybind functions via direct GOT load"},
        },
        .{
            .name = "aarch64_enable_promote_const",
            .string = "--aarch64-enable-promote-const",
            .descr = &.{"Enable the promote constant pass"},
        },
        .{
            .name = "aarch64_enable_simd_scalar",
            .string = "--aarch64-enable-simd-scalar",
            .descr = &.{"Enable use of AdvSIMD scalar integer instructions"},
        },
        .{
            .name = "aarch64_enable_stp_suppress",
            .string = "--aarch64-enable-stp-suppress",
            .descr = &.{"Suppress STP for AArch64"},
        },
        .{
            .name = "aarch64_enable_sve_intrinsic_opts",
            .string = "--aarch64-enable-sve-intrinsic-opts",
            .descr = &.{"Enable SVE intrinsic opts"},
        },
        .{
            .name = "aarch64_insert_extract_base_cost",
            .string = "--aarch64-insert-extract-base-cost",
            .descr = &.{"Base cost of vector insert/extract element"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_load_store_renaming",
            .string = "--aarch64-load-store-renaming",
            .descr = &.{""},
        },
        .{
            .name = "aarch64_load_store_scan_limit",
            .string = "--aarch64-load-store-scan-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_mark_bti_property",
            .string = "--aarch64-mark-bti-property",
            .descr = &.{"Add .note.gnu.property with BTI to assembly files"},
        },
        .{
            .name = "aarch64_max_xors",
            .string = "--aarch64-max-xors",
            .descr = &.{"Maximum of xors"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_neon_syntax",
            .string = "--aarch64-neon-syntax",
            .descr = &.{"Choose style of NEON code to emit from AArch64 backend:"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { generic = 0, apple = 1 }) },
        },
        .{
            .name = "aarch64_order_frame_objects",
            .string = "--aarch64-order-frame-objects",
            .descr = &.{"sort stack allocations"},
        },
        .{
            .name = "aarch64_redzone",
            .string = "--aarch64-redzone",
            .descr = &.{"enable use of redzone on AArch64"},
        },
        .{
            .name = "aarch64_select_opt",
            .string = "--aarch64-select-opt",
            .descr = &.{"Enable select to branch optimizations"},
        },
        .{
            .name = "aarch64_simd_scalar_force_all",
            .string = "--aarch64-simd-scalar-force-all",
            .descr = &.{"Force use of AdvSIMD scalar instructions everywhere"},
        },
        .{
            .name = "aarch64_slh_loads",
            .string = "--aarch64-slh-loads",
            .descr = &.{"Sanitize loads from memory."},
        },
        .{
            .name = "aarch64_stress_ccmp",
            .string = "--aarch64-stress-ccmp",
            .descr = &.{"Turn all knobs to 11"},
        },
        .{
            .name = "aarch64_stress_promote_const",
            .string = "--aarch64-stress-promote-const",
            .descr = &.{"Promote all vector constants"},
        },
        .{
            .name = "aarch64_sve_vector_bits_max",
            .string = "--aarch64-sve-vector-bits-max",
            .descr = &.{"Assume SVE vector registers are at most this big, with zero meaning no maximum size is assumed."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_sve_vector_bits_min",
            .string = "--aarch64-sve-vector-bits-min",
            .descr = &.{"Assume SVE vector registers are at least this big, with zero meaning no minimum size is assumed."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_tbz_offset_bits",
            .string = "--aarch64-tbz-offset-bits",
            .descr = &.{"Restrict range of TB[N]Z instructions (DEBUG)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_update_scan_limit",
            .string = "--aarch64-update-scan-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aarch64_use_aa",
            .string = "--aarch64-use-aa",
            .descr = &.{"Enable the use of AA during codegen."},
        },
        .{
            .name = "aarch64_use_tbi",
            .string = "--aarch64-use-tbi",
            .descr = &.{"Assume that top byte of an address is ignored"},
        },
        .{
            .name = "aarch64o0prelegalizercombinerhelper_disable_rule",
            .string = "--aarch64o0prelegalizercombinerhelper-disable-rule",
            .descr = &.{"Disable one or more combiner rules temporarily in the AArch64O0PreLegalizerCombinerHelper pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "aarch64o0prelegalizercombinerhelper_only_enable_rule",
            .string = "--aarch64o0prelegalizercombinerhelper-only-enable-rule",
            .descr = &.{"Disable all rules in the AArch64O0PreLegalizerCombinerHelper pass then re-enable the specified ones"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "aarch64postlegalizercombinerhelper_disable_rule",
            .string = "--aarch64postlegalizercombinerhelper-disable-rule",
            .descr = &.{"Disable one or more combiner rules temporarily in the AArch64PostLegalizerCombinerHelper pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "aarch64postlegalizercombinerhelper_only_enable_rule",
            .string = "--aarch64postlegalizercombinerhelper-only-enable-rule",
            .descr = &.{"Disable all rules in the AArch64PostLegalizerCombinerHelper pass then re-enable the specified ones"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "aarch64postlegalizerloweringhelper_disable_rule",
            .string = "--aarch64postlegalizerloweringhelper-disable-rule",
            .descr = &.{"Disable one or more combiner rules temporarily in the AArch64PostLegalizerLoweringHelper pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "aarch64postlegalizerloweringhelper_only_enable_rule",
            .string = "--aarch64postlegalizerloweringhelper-only-enable-rule",
            .descr = &.{"Disable all rules in the AArch64PostLegalizerLoweringHelper pass then re-enable the specified ones"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "aarch64prelegalizercombinerhelper_disable_rule",
            .string = "--aarch64prelegalizercombinerhelper-disable-rule",
            .descr = &.{"Disable one or more combiner rules temporarily in the AArch64PreLegalizerCombinerHelper pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "aarch64prelegalizercombinerhelper_only_enable_rule",
            .string = "--aarch64prelegalizercombinerhelper-only-enable-rule",
            .descr = &.{"Disable all rules in the AArch64PreLegalizerCombinerHelper pass then re-enable the specified ones"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "abort_on_max_devirt_iterations_reached",
            .string = "--abort-on-max-devirt-iterations-reached",
            .descr = &.{"Abort when the max iterations for devirtualization CGSCC repeat pass is reached"},
        },
        .{
            .name = "accel_tables",
            .string = "--accel-tables",
            .descr = &.{"Output dwarf accelerator tables."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Default = 0, Disable = 1, Apple = 2, Dwarf = 3 }) },
        },

        .{
            .name = "adce_remove_control_flow",
            .string = "--adce-remove-control-flow",
            .descr = &.{""},
        },
        .{
            .name = "adce_remove_loops",
            .string = "--adce-remove-loops",
            .descr = &.{""},
        },
        .{
            .name = "addr_sink_combine_base_gv",
            .string = "--addr-sink-combine-base-gv",
            .descr = &.{"Allow combining of BaseGV field in Address sinking."},
        },
        .{
            .name = "addr_sink_combine_base_offs",
            .string = "--addr-sink-combine-base-offs",
            .descr = &.{"Allow combining of BaseOffs field in Address sinking."},
        },
        .{
            .name = "addr_sink_combine_base_reg",
            .string = "--addr-sink-combine-base-reg",
            .descr = &.{"Allow combining of BaseReg field in Address sinking."},
        },
        .{
            .name = "addr_sink_combine_scaled_reg",
            .string = "--addr-sink-combine-scaled-reg",
            .descr = &.{"Allow combining of ScaledReg field in Address sinking."},
        },
        .{
            .name = "addr_sink_new_phis",
            .string = "--addr-sink-new-phis",
            .descr = &.{"Allow creation of Phis in Address sinking."},
        },
        .{
            .name = "addr_sink_new_select",
            .string = "--addr-sink-new-select",
            .descr = &.{"Allow creation of selects in Address sinking."},
        },
        .{
            .name = "addr_sink_using_gep",
            .string = "--addr-sink-using-gep",
            .descr = &.{"Address sinking in CGP using GEPs."},
        },
        .{
            .name = "addrsig",
            .string = "--addrsig",
            .descr = &.{"Emit an address-significance table"},
        },
        .{
            .name = "agg_antidep_debugdiv",
            .string = "--agg-antidep-debugdiv",
            .descr = &.{"Debug control for aggressive anti-dep breaker"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "agg_antidep_debugmod",
            .string = "--agg-antidep-debugmod",
            .descr = &.{"Debug control for aggressive anti-dep breaker"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aggregate_extracted_args",
            .string = "--aggregate-extracted-args",
            .descr = &.{"Aggregate arguments to code-extracted functions"},
        },
        .{
            .name = "aggressive_ext_opt",
            .string = "--aggressive-ext-opt",
            .descr = &.{"Aggressive extension optimization"},
        },
        .{
            .name = "aggressive_instcombine_max_scan_instrs",
            .string = "--aggressive-instcombine-max-scan-instrs",
            .descr = &.{"Max number of instructions to scan for aggressive instcombine."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "aix_ssp_tb_bit",
            .string = "--aix-ssp-tb-bit",
            .descr = &.{"Enable Passing SSP Canary info in Trackback on AIX"},
        },
        .{
            .name = "alias_set_saturation_threshold",
            .string = "--alias-set-saturation-threshold",
            .descr = &.{"The maximum number of pointers may-alias sets may contain before degradation"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "align_all_blocks",
            .string = "--align-all-blocks",
            .descr = &.{"Force the alignment of all blocks in the function in log2 format (e.g 4 means align on 16B boundaries)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "align_all_functions",
            .string = "--align-all-functions",
            .descr = &.{"Force the alignment of all functions in log2 format (e.g. 4 means align on 16B boundaries)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "align_all_nofallthru_blocks",
            .string = "--align-all-nofallthru-blocks",
            .descr = &.{"Force the alignment of all blocks that have no fall-through predecessors (i.e. don't add nops that are executed). In log2 format (e.g 4 means align on 16B boundaries)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "align_loops",
            .string = "--align-loops",
            .descr = &.{"Default alignment for loops"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "align_neon_spills",
            .string = "--align-neon-spills",
            .descr = &.{"Align ARM NEON spills in prolog and epilog"},
        },
        .{
            .name = "allow_arm_wlsloops",
            .string = "--allow-arm-wlsloops",
            .descr = &.{"Enable the generation of WLS loops"},
        },
        .{
            .name = "allow_ginsert_as_artifact",
            .string = "--allow-ginsert-as-artifact",
            .descr = &.{"Allow G_INSERT to be considered an artifact. Hack around AMDGPU test infinite loops."},
        },
        .{
            .name = "allow_unroll_and_jam",
            .string = "--allow-unroll-and-jam",
            .descr = &.{"Allows loops to be unroll-and-jammed."},
        },
        .{
            .name = "amdgcn_skip_cache_invalidations",
            .string = "--amdgcn-skip-cache-invalidations",
            .descr = &.{"Use this to skip inserting cache invalidating instructions."},
        },
        .{
            .name = "amdgpu_any_address_space_out_arguments",
            .string = "--amdgpu-any-address-space-out-arguments",
            .descr = &.{"Replace pointer out arguments with struct returns for non-private address space"},
        },
        .{
            .name = "amdgpu_assume_dynamic_stack_object_size",
            .string = "--amdgpu-assume-dynamic-stack-object-size",
            .descr = &.{"Assumed extra stack use if there are any variable sized objects (in bytes)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_assume_external_call_stack_size",
            .string = "--amdgpu-assume-external-call-stack-size",
            .descr = &.{"Assumed stack use of any external call (in bytes)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_atomic_optimizations",
            .string = "--amdgpu-atomic-optimizations",
            .descr = &.{"Enable atomic optimizations"},
        },
        .{
            .name = "amdgpu_bypass_slow_div",
            .string = "--amdgpu-bypass-slow-div",
            .descr = &.{"Skip 64-bit divide for dynamic 32-bit values"},
        },
        .{
            .name = "amdgpu_dce_in_ra",
            .string = "--amdgpu-dce-in-ra",
            .descr = &.{"Enable machine DCE inside regalloc"},
        },
        .{
            .name = "amdgpu_disable_loop_alignment",
            .string = "--amdgpu-disable-loop-alignment",
            .descr = &.{"Do not align and prefetch loops"},
        },
        .{
            .name = "amdgpu_disable_unclustred_high_rp_reschedule",
            .string = "--amdgpu-disable-unclustred-high-rp-reschedule",
            .descr = &.{"Disable unclustred high register pressure reduction scheduling stage."},
        },
        .{
            .name = "amdgpu_dpp_combine",
            .string = "--amdgpu-dpp-combine",
            .descr = &.{"Enable DPP combiner"},
        },
        .{
            .name = "amdgpu_dump_hsa_metadata",
            .string = "--amdgpu-dump-hsa-metadata",
            .descr = &.{"Dump AMDGPU HSA Metadata"},
        },
        .{
            .name = "amdgpu_early_ifcvt",
            .string = "--amdgpu-early-ifcvt",
            .descr = &.{"Run early if-conversion"},
        },
        .{
            .name = "amdgpu_early_inline_all",
            .string = "--amdgpu-early-inline-all",
            .descr = &.{"Inline all functions early"},
        },
        .{
            .name = "amdgpu_enable_delay_alu",
            .string = "--amdgpu-enable-delay-alu",
            .descr = &.{"Enable s_delay_alu insertion"},
        },
        .{
            .name = "amdgpu_enable_lds_replace_with_pointer",
            .string = "--amdgpu-enable-lds-replace-with-pointer",
            .descr = &.{"Enable LDS replace with pointer pass"},
        },
        .{
            .name = "amdgpu_enable_lower_module_lds",
            .string = "--amdgpu-enable-lower-module-lds",
            .descr = &.{"Enable lower module lds pass"},
        },
        .{
            .name = "amdgpu_enable_max_ilp_scheduling_strategy",
            .string = "--amdgpu-enable-max-ilp-scheduling-strategy",
            .descr = &.{"Enable scheduling strategy to maximize ILP for a single wave."},
        },
        .{
            .name = "amdgpu_enable_merge_m0",
            .string = "--amdgpu-enable-merge-m0",
            .descr = &.{"Merge and hoist M0 initializations"},
        },
        .{
            .name = "amdgpu_enable_power_sched",
            .string = "--amdgpu-enable-power-sched",
            .descr = &.{"Enable scheduling to minimize mAI power bursts"},
        },
        .{
            .name = "amdgpu_enable_pre_ra_optimizations",
            .string = "--amdgpu-enable-pre-ra-optimizations",
            .descr = &.{"Enable Pre-RA optimizations pass"},
        },
        .{
            .name = "amdgpu_enable_promote_kernel_arguments",
            .string = "--amdgpu-enable-promote-kernel-arguments",
            .descr = &.{"Enable promotion of flat kernel pointer arguments to global"},
        },
        .{
            .name = "amdgpu_enable_structurizer_workarounds",
            .string = "--amdgpu-enable-structurizer-workarounds",
            .descr = &.{"Enable workarounds for the StructurizeCFG pass"},
        },
        .{
            .name = "amdgpu_enable_vopd",
            .string = "--amdgpu-enable-vopd",
            .descr = &.{"Enable VOPD, dual issue of VALU in wave32"},
        },
        .{
            .name = "amdgpu_function_calls",
            .string = "--amdgpu-function-calls",
            .descr = &.{"Enable AMDGPU function call support"},
        },
        .{
            .name = "amdgpu_igrouplp_exact_solver",
            .string = "--amdgpu-igrouplp-exact-solver",
            .descr = &.{"Whether to use the exponential time solver to fit the instructions to the pipeline as closely as possible."},
        },
        .{
            .name = "amdgpu_igrouplp_exact_solver_cost_heur",
            .string = "--amdgpu-igrouplp-exact-solver-cost-heur",
            .descr = &.{"Whether to use the cost heuristic to make choices as we traverse the search space using the exact solver. Defaulted to on, and if turned off, we will use the node order. Attempting to put the later nodes in the later sched groups. Experimentally, results are mixed, so this should be set on a case-by-case basis."},
        },
        .{
            .name = "amdgpu_igrouplp_exact_solver_cutoff",
            .string = "--amdgpu-igrouplp-exact-solver-cutoff",
            .descr = &.{
                "The maximum number of scheduling group conflicts which we attempt to solve with the exponential time exact solver. Problem sizes greater than this willbe solved by the less accurate greedy algorithm. Selecting solver by size is superseded by manually selecting the solver (e.g. by amdgpu-igrouplp-exact-solver)",
            },
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_igrouplp_exact_solver_max_branches",
            .string = "--amdgpu-igrouplp-exact-solver-max-branches",
            .descr = &.{"The amount of branches that we are willing to explore with the exact algorithm before giving up."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_indirect_access_weight",
            .string = "--amdgpu-indirect-access-weight",
            .descr = &.{"Indirect access memory instruction weight"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_inline_arg_alloca_cost",
            .string = "--amdgpu-inline-arg-alloca-cost",
            .descr = &.{"Cost of alloca argument"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_inline_arg_alloca_cutoff",
            .string = "--amdgpu-inline-arg-alloca-cutoff",
            .descr = &.{"Maximum alloca size to use for inline cost"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_inline_max_bb",
            .string = "--amdgpu-inline-max-bb",
            .descr = &.{"Maximum number of BBs allowed in a function after inlining (compile time constraint)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_internalize_symbols",
            .string = "--amdgpu-internalize-symbols",
            .descr = &.{"Enable elimination of non-kernel functions and unused globals"},
        },
        .{
            .name = "amdgpu_ir_lower_kernel_arguments",
            .string = "--amdgpu-ir-lower-kernel-arguments",
            .descr = &.{"Lower kernel argument loads in IR pass"},
        },
        .{
            .name = "amdgpu_large_stride_threshold",
            .string = "--amdgpu-large-stride-threshold",
            .descr = &.{"Large stride memory access threshold"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_large_stride_weight",
            .string = "--amdgpu-large-stride-weight",
            .descr = &.{"Large stride memory access weight"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_late_structurize",
            .string = "--amdgpu-late-structurize",
            .descr = &.{"Enable late CFG structurization"},
        },
        .{
            .name = "amdgpu_limit_wave_threshold",
            .string = "--amdgpu-limit-wave-threshold",
            .descr = &.{"Kernel limit wave threshold in %"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_load_store_vectorizer",
            .string = "--amdgpu-load-store-vectorizer",
            .descr = &.{"Enable load store vectorizer"},
        },
        .{
            .name = "amdgpu_lower_module_lds_strategy",
            .string = "--amdgpu-lower-module-lds-strategy",
            .descr = &.{"Specify lowering strategy for function LDS access:"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { table = 0, module = 1, kernel = 2, hybrid = 3 }) },
        },
        .{
            .name = "amdgpu_max_memory_clause",
            .string = "--amdgpu-max-memory-clause",
            .descr = &.{"Maximum length of a memory clause, instructions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_max_return_arg_num_regs",
            .string = "--amdgpu-max-return-arg-num-regs",
            .descr = &.{"Approximately limit number of return registers for replacing out arguments"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_mem_intrinsic_expand_size",
            .string = "--amdgpu-mem-intrinsic-expand-size",
            .descr = &.{"Set minimum mem intrinsic size to expand in IR"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_membound_threshold",
            .string = "--amdgpu-membound-threshold",
            .descr = &.{"Function mem bound threshold in %"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_mfma_padding_ratio",
            .string = "--amdgpu-mfma-padding-ratio",
            .descr = &.{"Fill a percentage of the latency between neighboring MFMA with s_nops."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_mode_register",
            .string = "--amdgpu-mode-register",
            .descr = &.{"Enable mode register pass"},
        },
        .{
            .name = "amdgpu_nsa_threshold",
            .string = "--amdgpu-nsa-threshold",
            .descr = &.{"Number of addresses from which to enable MIMG NSA."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_opt_exec_mask_pre_ra",
            .string = "--amdgpu-opt-exec-mask-pre-ra",
            .descr = &.{"Run pre-RA exec mask optimizations"},
        },
        .{
            .name = "amdgpu_opt_vgpr_liverange",
            .string = "--amdgpu-opt-vgpr-liverange",
            .descr = &.{"Enable VGPR liverange optimizations for if-else structure"},
        },
        .{
            .name = "amdgpu_prelink",
            .string = "--amdgpu-prelink",
            .descr = &.{"Enable pre-link mode optimizations"},
        },
        .{
            .name = "amdgpu_promote_alloca_to_vector_limit",
            .string = "--amdgpu-promote-alloca-to-vector-limit",
            .descr = &.{"Maximum byte size to consider promote alloca to vector"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_reassign_regs",
            .string = "--amdgpu-reassign-regs",
            .descr = &.{"Enable register reassign optimizations on gfx10+"},
        },
        .{
            .name = "amdgpu_scalar_ir_passes",
            .string = "--amdgpu-scalar-ir-passes",
            .descr = &.{"Enable scalar IR passes"},
        },
        .{
            .name = "amdgpu_scalarize_global_loads",
            .string = "--amdgpu-scalarize-global-loads",
            .descr = &.{"Enable global load scalarization"},
        },
        .{
            .name = "amdgpu_schedule_metric_bias",
            .string = "--amdgpu-schedule-metric-bias",
            .descr = &.{"Sets the bias which adds weight to occupancy vs latency. Set it to 100 to chase the occupancy only."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_sdwa_peephole",
            .string = "--amdgpu-sdwa-peephole",
            .descr = &.{"Enable SDWA peepholer"},
        },
        .{
            .name = "amdgpu_set_wave_priority",
            .string = "--amdgpu-set-wave-priority",
            .descr = &.{"Adjust wave priority"},
        },
        .{
            .name = "amdgpu_set_wave_priority_valu_insts_threshold",
            .string = "--amdgpu-set-wave-priority-valu-insts-threshold",
            .descr = &.{"VALU instruction count threshold for adjusting wave priority"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_simplify_libcall",
            .string = "--amdgpu-simplify-libcall",
            .descr = &.{"Enable amdgpu library simplifications"},
        },
        .{
            .name = "amdgpu_skip_threshold",
            .string = "--amdgpu-skip-threshold",
            .descr = &.{"Number of instructions before jumping over divergent control flow"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_stress_function_calls",
            .string = "--amdgpu-stress-function-calls",
            .descr = &.{"Force all functions to be noinline"},
        },
        .{
            .name = "amdgpu_super_align_lds_globals",
            .string = "--amdgpu-super-align-lds-globals",
            .descr = &.{"Increase alignment of LDS if it is not on align boundary"},
        },
        .{
            .name = "amdgpu_unroll_max_block_to_analyze",
            .string = "--amdgpu-unroll-max-block-to-analyze",
            .descr = &.{"Inner loop block size threshold to analyze in unroll for AMDGPU"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_unroll_runtime_local",
            .string = "--amdgpu-unroll-runtime-local",
            .descr = &.{"Allow runtime unroll for AMDGPU if local memory used in a loop"},
        },
        .{
            .name = "amdgpu_unroll_threshold_if",
            .string = "--amdgpu-unroll-threshold-if",
            .descr = &.{"Unroll threshold increment for AMDGPU for each if statement inside loop"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_unroll_threshold_local",
            .string = "--amdgpu-unroll-threshold-local",
            .descr = &.{"Unroll threshold for AMDGPU if local memory used in a loop"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_unroll_threshold_private",
            .string = "--amdgpu-unroll-threshold-private",
            .descr = &.{"Unroll threshold for AMDGPU if private memory used in a loop"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "amdgpu_use_aa_in_codegen",
            .string = "--amdgpu-use-aa-in-codegen",
            .descr = &.{"Enable the use of AA during codegen."},
        },
        .{
            .name = "amdgpu_use_divergent_register_indexing",
            .string = "--amdgpu-use-divergent-register-indexing",
            .descr = &.{"Use indirect register addressing for divergent indexes"},
        },
        .{
            .name = "amdgpu_use_legacy_divergence_analysis",
            .string = "--amdgpu-use-legacy-divergence-analysis",
            .descr = &.{"Enable legacy divergence analysis for AMDGPU"},
        },
        .{
            .name = "amdgpu_use_native",
            .string = "--amdgpu-use-native",
            .descr = &.{"Comma separated list of functions to replace with native, or all"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "amdgpu_verify_hsa_metadata",
            .string = "--amdgpu-verify-hsa-metadata",
            .descr = &.{"Verify AMDGPU HSA Metadata"},
        },
        .{
            .name = "amdgpu_vgpr_index_mode",
            .string = "--amdgpu-vgpr-index-mode",
            .descr = &.{"Use GPR indexing mode instead of movrel for vector indexing"},
        },
        .{
            .name = "amdgpu_waitcnt_forcezero",
            .string = "--amdgpu-waitcnt-forcezero",
            .descr = &.{"Force all waitcnt instrs to be emitted as s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)"},
        },
        .{
            .name = "amdgpupostlegalizercombinerhelper_disable_rule",
            .string = "--amdgpupostlegalizercombinerhelper-disable-rule",
            .descr = &.{"Disable one or more combiner rules temporarily in the AMDGPUPostLegalizerCombinerHelper pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "amdgpupostlegalizercombinerhelper_only_enable_rule",
            .string = "--amdgpupostlegalizercombinerhelper-only-enable-rule",
            .descr = &.{"Disable all rules in the AMDGPUPostLegalizerCombinerHelper pass then re-enable the specified ones"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "amdgpuprelegalizercombinerhelper_disable_rule",
            .string = "--amdgpuprelegalizercombinerhelper-disable-rule",
            .descr = &.{"Disable one or more combiner rules temporarily in the AMDGPUPreLegalizerCombinerHelper pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "amdgpuprelegalizercombinerhelper_only_enable_rule",
            .string = "--amdgpuprelegalizercombinerhelper-only-enable-rule",
            .descr = &.{"Disable all rules in the AMDGPUPreLegalizerCombinerHelper pass then re-enable the specified ones"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "amdgpuregbankcombinerhelper_disable_rule",
            .string = "--amdgpuregbankcombinerhelper-disable-rule",
            .descr = &.{"Disable one or more combiner rules temporarily in the AMDGPURegBankCombinerHelper pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "amdgpuregbankcombinerhelper_only_enable_rule",
            .string = "--amdgpuregbankcombinerhelper-only-enable-rule",
            .descr = &.{"Disable all rules in the AMDGPURegBankCombinerHelper pass then re-enable the specified ones"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "amdhsa_code_object_version",
            .string = "--amdhsa-code-object-version",
            .descr = &.{"AMDHSA Code Object Version"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "annotate_inline_phase",
            .string = "--annotate-inline-phase",
            .descr = &.{"If true, annotate inline advisor remarks with LTO and pass information."},
        },
        .{
            .name = "annotate_sample_profile_inline_phase",
            .string = "--annotate-sample-profile-inline-phase",
            .descr = &.{"Annotate LTO phase (prelink / postlink), or main (no LTO) for sample-profile inline pass name."},
        },
        .{
            .name = "arc_opt_max_ptr_states",
            .string = "--arc-opt-max-ptr-states",
            .descr = &.{"Maximum number of ptr states the optimizer keeps track of"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "arm_add_build_attributes",
            .string = "--arm-add-build-attributes",
            .descr = &.{""},
        },
        .{
            .name = "arm_adjust_jump_tables",
            .string = "--arm-adjust-jump-tables",
            .descr = &.{"Adjust basic block layout to better use TB[BH]"},
        },
        .{
            .name = "arm_assume_itcm_bankconflict",
            .string = "--arm-assume-itcm-bankconflict",
            .descr = &.{""},
        },
        .{
            .name = "arm_assume_misaligned_load_store",
            .string = "--arm-assume-misaligned-load-store",
            .descr = &.{"Be more conservative in ARM load/store opt"},
        },
        .{
            .name = "arm_atomic_cfg_tidy",
            .string = "--arm-atomic-cfg-tidy",
            .descr = &.{"Run SimplifyCFG after expanding atomic operations to make use of cmpxchg flow-based information"},
        },
        .{
            .name = "arm_constant_island_max_iteration",
            .string = "--arm-constant-island-max-iteration",
            .descr = &.{"The max number of iteration for converge"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "arm_data_bank_mask",
            .string = "--arm-data-bank-mask",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "arm_disable_omit_dls",
            .string = "--arm-disable-omit-dls",
            .descr = &.{"Disable omitting 'dls lr, lr' instructions"},
        },
        .{
            .name = "arm_enable_merge_loopenddec",
            .string = "--arm-enable-merge-loopenddec",
            .descr = &.{"Enable merging Loop End and Dec instructions."},
        },
        .{
            .name = "arm_enable_subreg_liveness",
            .string = "--arm-enable-subreg-liveness",
            .descr = &.{""},
        },
        .{
            .name = "arm_force_fast_isel",
            .string = "--arm-force-fast-isel",
            .descr = &.{""},
        },
        .{
            .name = "arm_global_merge",
            .string = "--arm-global-merge",
            .descr = &.{"Enable the global merge pass"},
        },
        .{
            .name = "arm_implicit_it",
            .string = "--arm-implicit-it",
            .descr = &.{"Allow conditional instructions outdside of an IT block"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { always = 0, never = 1, arm = 2, thumb = 3 }) },
        },
        .{
            .name = "arm_interworking",
            .string = "--arm-interworking",
            .descr = &.{"Enable / disable ARM interworking (for debugging only)"},
        },
        .{
            .name = "arm_load_store_opt",
            .string = "--arm-load-store-opt",
            .descr = &.{"Enable ARM load/store optimization pass"},
        },
        .{
            .name = "arm_loloops_disable_tailpred",
            .string = "--arm-loloops-disable-tailpred",
            .descr = &.{"Disable tail-predication in the ARM LowOverheadLoop pass"},
        },
        .{
            .name = "arm_memtransfer_tploop",
            .string = "--arm-memtransfer-tploop",
            .descr = &.{"Control conversion of memcpy to Tail predicated loops (WLSTP)"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { @"force-disabled" = 0, @"force-enabled" = 1, allow = 2 }) },
        },
        .{
            .name = "arm_parallel_dsp_load_limit",
            .string = "--arm-parallel-dsp-load-limit",
            .descr = &.{"Limit the number of loads analysed"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "arm_prera_ldst_opt_reorder_limit",
            .string = "--arm-prera-ldst-opt-reorder-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "arm_promote_constant",
            .string = "--arm-promote-constant",
            .descr = &.{"Enable / disable promotion of unnamed_addr constants into constant pools"},
        },
        .{
            .name = "arm_promote_constant_max_size",
            .string = "--arm-promote-constant-max-size",
            .descr = &.{"Maximum size of constant to promote into a constant pool"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "arm_promote_constant_max_total",
            .string = "--arm-promote-constant-max-total",
            .descr = &.{"Maximum size of ALL constants to promote into a constant pool"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "arm_default_it",
            .string = "--arm-default-it",
            .descr = &.{"Generate any type of IT block"},
        },
        .{
            .name = "arm_restrict_it",
            .string = "--arm-restrict-it",
            .descr = &.{"Disallow complex IT blocks"},
        },
        .{
            .name = "arm_set_lr_predicate",
            .string = "--arm-set-lr-predicate",
            .descr = &.{"Enable setting lr as a predicate in tail predication regions."},
        },
        .{
            .name = "arm_synthesize_thumb_1_tbb",
            .string = "--arm-synthesize-thumb-1-tbb",
            .descr = &.{"Use compressed jump tables in Thumb-1 by synthesizing an equivalent to the TBB/TBH instructions"},
        },
        .{
            .name = "arm_use_mulops",
            .string = "--arm-use-mulops",
            .descr = &.{""},
        },
        .{
            .name = "as_secure_log_file",
            .string = "--as-secure-log-file",
            .descr = &.{"As secure log file name"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "asan_always_slow_path",
            .string = "--asan-always-slow-path",
            .descr = &.{"use instrumentation with slow path for all accesses"},
        },
        .{
            .name = "asan_constructor_kind",
            .string = "--asan-constructor-kind",
            .descr = &.{"Sets the ASan constructor kind"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { none = 0, global = 1 }) },
        },
        .{
            .name = "asan_debug",
            .string = "--asan-debug",
            .descr = &.{"debug"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_debug_func",
            .string = "--asan-debug-func",
            .descr = &.{"Debug func"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "asan_debug_max",
            .string = "--asan-debug-max",
            .descr = &.{"Debug max inst"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_debug_min",
            .string = "--asan-debug-min",
            .descr = &.{"Debug min inst"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_debug_stack",
            .string = "--asan-debug-stack",
            .descr = &.{"debug stack"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_destructor_kind",
            .string = "--asan-destructor-kind",
            .descr = &.{"Sets the ASan destructor kind. The default is to use the value provided to the pass constructor"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { none = 0, global = 1 }) },
        },
        .{
            .name = "asan_detect_invalid_pointer_cmp",
            .string = "--asan-detect-invalid-pointer-cmp",
            .descr = &.{"Instrument <, <=, >, >= with pointer operands"},
        },
        .{
            .name = "asan_detect_invalid_pointer_pair",
            .string = "--asan-detect-invalid-pointer-pair",
            .descr = &.{"Instrument <, <=, >, >=, - with pointer operands"},
        },
        .{
            .name = "asan_detect_invalid_pointer_sub",
            .string = "--asan-detect-invalid-pointer-sub",
            .descr = &.{"Instrument - operations with pointer operands"},
        },
        .{
            .name = "asan_force_dynamic_shadow",
            .string = "--asan-force-dynamic-shadow",
            .descr = &.{"Load shadow address into a local variable for each function"},
        },
        .{
            .name = "asan_force_experiment",
            .string = "--asan-force-experiment",
            .descr = &.{"Force optimization experiment (for testing)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_globals",
            .string = "--asan-globals",
            .descr = &.{"Handle global objects"},
        },
        .{
            .name = "asan_globals_live_support",
            .string = "--asan-globals-live-support",
            .descr = &.{"Use linker features to support dead code stripping of globals"},
        },
        .{
            .name = "asan_guard_against_version_mismatch",
            .string = "--asan-guard-against-version-mismatch",
            .descr = &.{"Guard against compiler/runtime version mismatch."},
        },
        .{
            .name = "asan_initialization_order",
            .string = "--asan-initialization-order",
            .descr = &.{"Handle C++ initializer order"},
        },
        .{
            .name = "asan_instrument_atomics",
            .string = "--asan-instrument-atomics",
            .descr = &.{"instrument atomic instructions (rmw, cmpxchg)"},
        },
        .{
            .name = "asan_instrument_byval",
            .string = "--asan-instrument-byval",
            .descr = &.{"instrument byval call arguments"},
        },
        .{
            .name = "asan_instrument_dynamic_allocas",
            .string = "--asan-instrument-dynamic-allocas",
            .descr = &.{"instrument dynamic allocas"},
        },
        .{
            .name = "asan_instrument_reads",
            .string = "--asan-instrument-reads",
            .descr = &.{"instrument read instructions"},
        },
        .{
            .name = "asan_instrument_writes",
            .string = "--asan-instrument-writes",
            .descr = &.{"instrument write instructions"},
        },
        .{
            .name = "asan_instrumentation_with_call_threshold",
            .string = "--asan-instrumentation-with-call-threshold",
            .descr = &.{"If the function being instrumented contains more than this number of memory accesses, use callbacks instead of inline checks (-1 means never use callbacks)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_kernel",
            .string = "--asan-kernel",
            .descr = &.{"Enable KernelAddressSanitizer instrumentation"},
        },
        .{
            .name = "asan_kernel_mem_intrinsic_prefix",
            .string = "--asan-kernel-mem-intrinsic-prefix",
            .descr = &.{"Use prefix for memory intrinsics in KASAN mode"},
        },
        .{
            .name = "asan_mapping_offset",
            .string = "--asan-mapping-offset",
            .descr = &.{"offset of asan shadow mapping [EXPERIMENTAL]"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_mapping_scale",
            .string = "--asan-mapping-scale",
            .descr = &.{"scale of asan shadow mapping"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_max_inline_poisoning_size",
            .string = "--asan-max-inline-poisoning-size",
            .descr = &.{"Inline shadow poisoning for blocks up to the given size in bytes."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_max_ins_per_bb",
            .string = "--asan-max-ins-per-bb",
            .descr = &.{"maximal number of instructions to instrument in any given BB"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_memory_access_callback_prefix",
            .string = "--asan-memory-access-callback-prefix",
            .descr = &.{"Prefix for memory access callbacks"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "asan_opt",
            .string = "--asan-opt",
            .descr = &.{"Optimize instrumentation"},
        },
        .{
            .name = "asan_opt_globals",
            .string = "--asan-opt-globals",
            .descr = &.{"Don't instrument scalar globals"},
        },
        .{
            .name = "asan_opt_same_temp",
            .string = "--asan-opt-same-temp",
            .descr = &.{"Instrument the same temp just once"},
        },
        .{
            .name = "asan_opt_stack",
            .string = "--asan-opt-stack",
            .descr = &.{"Don't instrument scalar stack variables"},
        },
        .{
            .name = "asan_optimize_callbacks",
            .string = "--asan-optimize-callbacks",
            .descr = &.{"Optimize callbacks"},
        },
        .{
            .name = "asan_realign_stack",
            .string = "--asan-realign-stack",
            .descr = &.{"Realign stack to the value of this flag (power of two)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asan_recover",
            .string = "--asan-recover",
            .descr = &.{"Enable recovery mode (continue-after-error)."},
        },
        .{
            .name = "asan_redzone_byval_args",
            .string = "--asan-redzone-byval-args",
            .descr = &.{"Create redzones for byval arguments (extra copy required)"},
        },
        .{
            .name = "asan_skip_promotable_allocas",
            .string = "--asan-skip-promotable-allocas",
            .descr = &.{"Do not instrument promotable allocas"},
        },
        .{
            .name = "asan_stack",
            .string = "--asan-stack",
            .descr = &.{"Handle stack memory"},
        },
        .{
            .name = "asan_stack_dynamic_alloca",
            .string = "--asan-stack-dynamic-alloca",
            .descr = &.{"Use dynamic alloca to represent stack variables"},
        },
        .{
            .name = "asan_use_after_return",
            .string = "--asan-use-after-return",
            .descr = &.{"Sets the mode of detection for stack-use-after-return."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { never = 0, runtime = 1, always = 2 }) },
        },
        .{
            .name = "asan_use_after_scope",
            .string = "--asan-use-after-scope",
            .descr = &.{"Check stack-use-after-scope"},
        },
        .{
            .name = "asan_use_odr_indicator",
            .string = "--asan-use-odr-indicator",
            .descr = &.{"Use odr indicators to improve ODR reporting"},
        },
        .{
            .name = "asan_use_private_alias",
            .string = "--asan-use-private-alias",
            .descr = &.{"Use private aliases for global variables"},
        },
        .{
            .name = "asan_use_stack_safety",
            .string = "--asan-use-stack-safety",
            .descr = &.{"Use Stack Safety analysis results"},
        },
        .{
            .name = "asan_with_comdat",
            .string = "--asan-with-comdat",
            .descr = &.{"Place ASan constructors in comdat sections"},
        },
        .{
            .name = "asan_with_ifunc",
            .string = "--asan-with-ifunc",
            .descr = &.{"Access dynamic shadow through an ifunc global on platforms that support this"},
        },
        .{
            .name = "asan_with_ifunc_suppress_remat",
            .string = "--asan-with-ifunc-suppress-remat",
            .descr = &.{"Suppress rematerialization of dynamic shadow address by passing it through inline asm in prologue."},
        },
        .{
            .name = "asm_macro_max_nesting_depth",
            .string = "--asm-macro-max-nesting-depth",
            .descr = &.{"The maximum nesting depth allowed for assembly macros."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "asm_show_inst",
            .string = "--asm-show-inst",
            .descr = &.{"Emit internal instruction representation to assembly file"},
        },
        .{
            .name = "asm_verbose",
            .string = "--asm-verbose",
            .descr = &.{"Add comments to directives."},
        },
        .{
            .name = "assume_preserve_all",
            .string = "--assume-preserve-all",
            .descr = &.{"enable preservation of all attrbitues. even those that are unlikely to be usefull"},
        },
        .{
            .name = "atomic_counter_update_promoted",
            .string = "--atomic-counter-update-promoted",
            .descr = &.{"Do counter update using atomic fetch add  for promoted counters only"},
        },
        .{
            .name = "atomic_first_counter",
            .string = "--atomic-first-counter",
            .descr = &.{"Use atomic fetch add for first counter in a function (usually the entry counter)"},
        },
        .{
            .name = "attributor_allow_deep_wrappers",
            .string = "--attributor-allow-deep-wrappers",
            .descr = &.{"Allow the Attributor to use IP information derived from non-exact functions via cloning"},
        },
        .{
            .name = "attributor_allow_shallow_wrappers",
            .string = "--attributor-allow-shallow-wrappers",
            .descr = &.{"Allow the Attributor to create shallow wrappers for non-exact definitions."},
        },
        .{
            .name = "attributor_annotate_decl_cs",
            .string = "--attributor-annotate-decl-cs",
            .descr = &.{"Annotate call sites of function declarations."},
        },
        .{
            .name = "attributor_depgraph_dot_filename_prefix",
            .string = "--attributor-depgraph-dot-filename-prefix",
            .descr = &.{"The prefix used for the CallGraph dot file names."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "attributor_dump_dep_graph",
            .string = "--attributor-dump-dep-graph",
            .descr = &.{"Dump the dependency graph to dot files."},
        },
        .{
            .name = "attributor_enable",
            .string = "--attributor-enable",
            .descr = &.{"Enable the attributor inter-procedural deduction pass"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { all = 0, module = 1, cgscc = 2, none = 3 }) },
        },
        .{
            .name = "attributor_enable_call_site_specific_deduction",
            .string = "--attributor-enable-call-site-specific-deduction",
            .descr = &.{"Allow the Attributor to do call site specific analysis"},
        },
        .{
            .name = "attributor_manifest_internal",
            .string = "--attributor-manifest-internal",
            .descr = &.{"Manifest Attributor internal string attributes."},
        },
        .{
            .name = "attributor_max_initialization_chain_length",
            .string = "--attributor-max-initialization-chain-length",
            .descr = &.{"Maximal number of chained initializations (to avoid stack overflows)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "attributor_max_iterations",
            .string = "--attributor-max-iterations",
            .descr = &.{"Maximal number of fixpoint iterations."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "attributor_max_iterations_verify",
            .string = "--attributor-max-iterations-verify",
            .descr = &.{"Verify that max-iterations is a tight bound for a fixpoint"},
        },
        .{
            .name = "attributor_max_potential_values",
            .string = "--attributor-max-potential-values",
            .descr = &.{"Maximum number of potential values to be tracked for each position."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "attributor_max_potential_values_iterations",
            .string = "--attributor-max-potential-values-iterations",
            .descr = &.{"Maximum number of iterations we keep dismantling potential values."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "attributor_print_call_graph",
            .string = "--attributor-print-call-graph",
            .descr = &.{"Print Attributor's internal call graph"},
        },
        .{
            .name = "attributor_print_dep",
            .string = "--attributor-print-dep",
            .descr = &.{"Print attribute dependencies"},
        },
        .{
            .name = "attributor_simplify_all_loads",
            .string = "--attributor-simplify-all-loads",
            .descr = &.{"Try to simplify all loads."},
        },
        .{
            .name = "attributor_view_dep_graph",
            .string = "--attributor-view-dep-graph",
            .descr = &.{"View the dependency graph."},
        },
        .{
            .name = "available_load_scan_limit",
            .string = "--available-load-scan-limit",
            .descr = &.{"Use this to specify the default maximum number of instructions to scan backward from a given instruction, when searching for available loaded value"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "avoid_speculation",
            .string = "--avoid-speculation",
            .descr = &.{"MachineLICM should avoid speculation"},
        },
        .{
            .name = "basic_aa_recphi",
            .string = "--basic-aa-recphi",
            .descr = &.{""},
        },
        .{
            .name = "basic_aa_separate_storage",
            .string = "--basic-aa-separate-storage",
            .descr = &.{""},
        },
        .{
            .name = "bbsections_cold_text_prefix",
            .string = "--bbsections-cold-text-prefix",
            .descr = &.{"The text prefix to use for cold basic block clusters"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "bbsections_detect_source_drift",
            .string = "--bbsections-detect-source-drift",
            .descr = &.{"This checks if there is a fdo instr. profile hash mismatch for this function"},
        },
        .{
            .name = "bbsections_guided_section_prefix",
            .string = "--bbsections-guided-section-prefix",
            .descr = &.{
                "Use the basic-block-sections profile to determine the text section prefix for hot functions. Functions with basic-block-sections profile will be placed in `.text.hot` regardless of their FDO profile info. Other functions won't be impacted, i.e., their prefixes will be decided by FDO/sampleFDO profiles.",
            },
        },
        .{
            .name = "binutils_version",
            .string = "--binutils-version",
            .descr = &.{"Produced object files can use all ELF features supported by this binutils version and newer.If -no-integrated-as is specified, the generated assembly will consider GNU as support.'none' means that all ELF features can be used, regardless of binutils support"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "bitcode_flush_threshold",
            .string = "--bitcode-flush-threshold",
            .descr = &.{"The threshold (unit M) for flushing LLVM bitcode."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "bitcode_mdindex_threshold",
            .string = "--bitcode-mdindex-threshold",
            .descr = &.{"Number of metadatas above which we emit an index to enable lazy-loading"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "block_freq_ratio_threshold",
            .string = "--block-freq-ratio-threshold",
            .descr = &.{"Do not hoist instructions if targetblock is N times hotter than the source."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "block_placement_exit_block_bias",
            .string = "--block-placement-exit-block-bias",
            .descr = &.{"Block frequency percentage a loop exit block needs over the original exit to be considered the new exit."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "bonus_inst_threshold",
            .string = "--bonus-inst-threshold",
            .descr = &.{"Control the number of bonus instructions (default = 1)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "bounds_checking_single_trap",
            .string = "--bounds-checking-single-trap",
            .descr = &.{"Use one trap block per function"},
        },
        .{
            .name = "bpf_disable_avoid_speculation",
            .string = "--bpf-disable-avoid-speculation",
            .descr = &.{"BPF: Disable Avoiding Speculative Code Motion."},
        },
        .{
            .name = "bpf_disable_serialize_icmp",
            .string = "--bpf-disable-serialize-icmp",
            .descr = &.{"BPF: Disable Serializing ICMP insns."},
        },
        .{
            .name = "bpf_expand_memcpy_in_order",
            .string = "--bpf-expand-memcpy-in-order",
            .descr = &.{"Expand memcpy into load/store pairs in order"},
        },
        .{
            .name = "branch_fold_placement",
            .string = "--branch-fold-placement",
            .descr = &.{"Perform branch folding during placement. Reduces code size."},
        },
        .{
            .name = "branch_relax_asm_large",
            .string = "--branch-relax-asm-large",
            .descr = &.{"branch relax asm"},
        },
        .{
            .name = "branch_relax_safety_buffer",
            .string = "--branch-relax-safety-buffer",
            .descr = &.{"safety buffer size"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "break_anti_dependencies",
            .string = "--break-anti-dependencies",
            .descr = &.{"Break post-RA scheduling anti-dependencies: \"critical\", \"all\", or \"none\""},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "cache_line_size",
            .string = "--cache-line-size",
            .descr = &.{"Use this to override the target cache line size when specified by the user."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "callgraph_dot_filename_prefix",
            .string = "--callgraph-dot-filename-prefix",
            .descr = &.{"The prefix used for the CallGraph dot file names."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "callgraph_heat_colors",
            .string = "--callgraph-heat-colors",
            .descr = &.{"Show heat colors in call-graph"},
        },
        .{
            .name = "callgraph_multigraph",
            .string = "--callgraph-multigraph",
            .descr = &.{"Show call-multigraph (do not remove parallel edges)"},
        },
        .{
            .name = "callgraph_show_weights",
            .string = "--callgraph-show-weights",
            .descr = &.{"Show edges labeled with weights"},
        },
        .{
            .name = "callsite_splitting_duplication_threshold",
            .string = "--callsite-splitting-duplication-threshold",
            .descr = &.{"Only allow instructions before a call, if their cost is below DuplicationThreshold"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "canon_nth_function",
            .string = "--canon-nth-function",
            .descr = &.{"Function number to canonicalize."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "canonicalize_icmp_predicates_to_unsigned",
            .string = "--canonicalize-icmp-predicates-to-unsigned",
            .descr = &.{"Enables canonicalization of signed relational predicates to unsigned (e.g. sgt => ugt)"},
        },
        .{
            .name = "capture_tracking_max_uses_to_explore",
            .string = "--capture-tracking-max-uses-to-explore",
            .descr = &.{"Maximal number of uses to explore."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cfg_dot_filename_prefix",
            .string = "--cfg-dot-filename-prefix",
            .descr = &.{"The prefix used for the CFG dot file names."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "cfg_func_name",
            .string = "--cfg-func-name",
            .descr = &.{"The name of a function (or its substring) whose CFG is viewed/printed."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "cfg_heat_colors",
            .string = "--cfg-heat-colors",
            .descr = &.{"Show heat colors in CFG"},
        },
        .{
            .name = "cfg_hide_cold_paths",
            .string = "--cfg-hide-cold-paths",
            .descr = &.{"Hide blocks with relative frequency below the given value"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cfg_hide_deoptimize_paths",
            .string = "--cfg-hide-deoptimize-paths",
            .descr = &.{""},
        },
        .{
            .name = "cfg_hide_unreachable_paths",
            .string = "--cfg-hide-unreachable-paths",
            .descr = &.{""},
        },
        .{
            .name = "cfg_raw_weights",
            .string = "--cfg-raw-weights",
            .descr = &.{"Use raw weights for labels. Use percentages as default."},
        },
        .{
            .name = "cfg_weights",
            .string = "--cfg-weights",
            .descr = &.{"Show edges labeled with weights"},
        },
        .{
            .name = "cgp_freq_ratio_to_skip_merge",
            .string = "--cgp-freq-ratio-to-skip-merge",
            .descr = &.{"Skip merging empty blocks if (frequency of empty block) / (frequency of destination block) is greater than this ratio"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cgp_icmp_eq2icmp_st",
            .string = "--cgp-icmp-eq2icmp-st",
            .descr = &.{"Enable ICMP_EQ to ICMP_S(L|G)T conversion."},
        },
        .{
            .name = "cgp_optimize_phi_types",
            .string = "--cgp-optimize-phi-types",
            .descr = &.{"Enable converting phi types in CodeGenPrepare"},
        },
        .{
            .name = "cgp_split_large_offset_gep",
            .string = "--cgp-split-large-offset-gep",
            .descr = &.{"Enable splitting large offset of GEP."},
        },
        .{
            .name = "cgp_type_promotion_merge",
            .string = "--cgp-type-promotion-merge",
            .descr = &.{"Enable merging of redundant sexts when one is dominating the other."},
        },
        .{
            .name = "cgp_verify_bfi_updates",
            .string = "--cgp-verify-bfi-updates",
            .descr = &.{"Enable BFI update verification for CodeGenPrepare."},
        },
        .{
            .name = "cgpp_huge_func",
            .string = "--cgpp-huge-func",
            .descr = &.{"Least BB number of huge function."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cgscc_inline_replay",
            .string = "--cgscc-inline-replay",
            .descr = &.{"Optimization remarks file containing inline remarks to be replayed by cgscc inlining."},
        },
        .{
            .name = "cgscc_inline_replay_fallback",
            .string = "--cgscc-inline-replay-fallback",
            .descr = &.{"How cgscc inline replay treats sites that don't come from the replay. Original: defers to original advisor, AlwaysInline: inline all sites not in replay, NeverInline: inline no sites not in replay"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Original = 0, AlwaysInline = 1, NeverInline = 2 }) },
        },
        .{
            .name = "cgscc_inline_replay_format",
            .string = "--cgscc-inline-replay-format",
            .descr = &.{"How cgscc inline replay file is formatted"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Line = 0, LineColumn = 1, LineDiscriminator = 2, LineColumnDiscriminator = 3 }) },
        },
        .{
            .name = "cgscc_inline_replay_scope",
            .string = "--cgscc-inline-replay-scope",
            .descr = &.{"Whether inline replay should be applied to the entire Module or just the Functions (default) that are present as callers in remarks during cgscc inlining."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { Function = 0, Module = 1 }) },
        },
        .{
            .name = "check_bfi_unknown_block_queries",
            .string = "--check-bfi-unknown-block-queries",
            .descr = &.{"Check if block frequency is queried for an unknown block for debugging missed BFI updates"},
        },
        .{
            .name = "check_early_avail",
            .string = "--check-early-avail",
            .descr = &.{""},
        },
        .{
            .name = "chr_bias_threshold",
            .string = "--chr-bias-threshold",
            .descr = &.{"CHR considers a branch bias greater than this ratio as biased"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "chr_dup_threshold",
            .string = "--chr-dup-threshold",
            .descr = &.{"Max number of duplications by CHR for a region"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "chr_function_list",
            .string = "--chr-function-list",
            .descr = &.{"Specify file to retrieve the list of functions to apply CHR to"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "chr_merge_threshold",
            .string = "--chr-merge-threshold",
            .descr = &.{"CHR merges a group of N branches/selects where N >= this value"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "chr_module_list",
            .string = "--chr-module-list",
            .descr = &.{"Specify file to retrieve the list of modules to apply CHR to"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "code_model",
            .string = "--code-model",
            .descr = &.{"Choose code model"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { tiny = 0, small = 1, kernel = 2, medium = 3, large = 4 }) },
        },
        .{
            .name = "cold_branch_ratio",
            .string = "--cold-branch-ratio",
            .descr = &.{"Minimum BranchProbability to consider a region cold."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cold_callsite_rel_freq",
            .string = "--cold-callsite-rel-freq",
            .descr = &.{"Maximum block frequency, expressed as a percentage of caller's entry frequency, for a callsite to be cold in the absence of profile information."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cold_operand_max_cost_multiplier",
            .string = "--cold-operand-max-cost-multiplier",
            .descr = &.{"Maximum cost multiplier of TCC_expensive for the dependence slice of a cold operand to be considered inexpensive."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cold_operand_threshold",
            .string = "--cold-operand-threshold",
            .descr = &.{"Maximum frequency of path for an operand to be considered cold."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cold_synthetic_count",
            .string = "--cold-synthetic-count",
            .descr = &.{"Initial synthetic entry count for cold functions."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "coldcc_rel_freq",
            .string = "--coldcc-rel-freq",
            .descr = &.{"Maximum block frequency, expressed as a percentage of caller's entry frequency, for a call site to be considered cold for enablingcoldcc"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "color",
            .string = "--color",
            .descr = &.{"Use colors in output (default=autodetect)"},
        },
        .{
            .name = "combiner_global_alias_analysis",
            .string = "--combiner-global-alias-analysis",
            .descr = &.{"Enable DAG combiner's use of IR alias analysis"},
        },
        .{
            .name = "combiner_reduce_load_op_store_width",
            .string = "--combiner-reduce-load-op-store-width",
            .descr = &.{"DAG combiner enable reducing the width of load/op/store sequence"},
        },
        .{
            .name = "combiner_shrink_load_replace_store_with_store",
            .string = "--combiner-shrink-load-replace-store-with-store",
            .descr = &.{"DAG combiner enable load/<replace bytes>/store with a narrower store"},
        },
        .{
            .name = "combiner_split_load_index",
            .string = "--combiner-split-load-index",
            .descr = &.{"DAG combiner may split indexing from loads"},
        },
        .{
            .name = "combiner_store_merge_dependence_limit",
            .string = "--combiner-store-merge-dependence-limit",
            .descr = &.{"Limit the number of times for the same StoreNode and RootNode to bail out in store merging dependence check"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "combiner_store_merging",
            .string = "--combiner-store-merging",
            .descr = &.{"DAG combiner enable merging multiple stores into a wider store"},
        },
        .{
            .name = "combiner_stress_load_slicing",
            .string = "--combiner-stress-load-slicing",
            .descr = &.{"Bypass the profitability model of load slicing"},
        },
        .{
            .name = "combiner_tokenfactor_inline_limit",
            .string = "--combiner-tokenfactor-inline-limit",
            .descr = &.{"Limit the number of operands to inline for Token Factors"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "combiner_use_tbaa",
            .string = "--combiner-use-tbaa",
            .descr = &.{"Enable DAG combiner's use of TBAA"},
        },
        .{
            .name = "combiner_vector_fcopysign_extend_round",
            .string = "--combiner-vector-fcopysign-extend-round",
            .descr = &.{"Enable merging extends and rounds into FCOPYSIGN on vector types"},
        },
        .{
            .name = "commgep_const",
            .string = "--commgep-const",
            .descr = &.{""},
        },
        .{
            .name = "commgep_inv",
            .string = "--commgep-inv",
            .descr = &.{""},
        },
        .{
            .name = "commgep_speculate",
            .string = "--commgep-speculate",
            .descr = &.{""},
        },
        .{
            .name = "compile_time_mem_idiom_threshold",
            .string = "--compile-time-mem-idiom-threshold",
            .descr = &.{"Threshold (in bytes) to perform the transformation, if the runtime loop count (mem transfer size) is known at compile-time."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "compile_twice",
            .string = "--compile-twice",
            .descr = &.{"Run everything twice, re-using the same pass manager and verify the result is the same."},
        },
        .{
            .name = "compute_dead",
            .string = "--compute-dead",
            .descr = &.{"Compute dead symbols"},
        },
        .{
            .name = "consthoist_gep",
            .string = "--consthoist-gep",
            .descr = &.{"Try hoisting constant gep expressions"},
        },
        .{
            .name = "consthoist_min_num_to_rebase",
            .string = "--consthoist-min-num-to-rebase",
            .descr = &.{"Do not rebase if number of dependent constants of a Base is less than this number."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "consthoist_with_block_frequency",
            .string = "--consthoist-with-block-frequency",
            .descr = &.{"Enable the use of the block frequency analysis to reduce the chance to execute const materialization more frequently than without hoisting."},
        },
        .{
            .name = "constraint_elimination_max_rows",
            .string = "--constraint-elimination-max-rows",
            .descr = &.{"Maximum number of rows to keep in constraint system"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cost_kind",
            .string = "--cost-kind",
            .descr = &.{"Target cost kind"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { throughput = 0, latency = 1, @"code-size" = 2, @"size-latency" = 3 }) },
        },
        .{
            .name = "costmodel_reduxcost",
            .string = "--costmodel-reduxcost",
            .descr = &.{"Recognize reduction patterns."},
        },
        .{
            .name = "crash_diagnostics_dir",
            .string = "--crash-diagnostics-dir",
            .descr = &.{"Directory for crash diagnostic files."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "crash_on_ppc_vsx_self_copy",
            .string = "--crash-on-ppc-vsx-self-copy",
            .descr = &.{"Causes the backend to crash instead of generating a nop VSX copy"},
        },
        .{
            .name = "cs_profile_generate",
            .string = "--cs-profile-generate",
            .descr = &.{"Perform context sensitive PGO instrumentation"},
        },
        .{
            .name = "cs_profile_path",
            .string = "--cs-profile-path",
            .descr = &.{"Context sensitive profile file path"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "csuses_threshold",
            .string = "--csuses-threshold",
            .descr = &.{"Threshold for the size of CSUses"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "cvp_max_functions_per_value",
            .string = "--cvp-max-functions-per-value",
            .descr = &.{"The maximum number of functions to track per lattice value"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "da_delinearize",
            .string = "--da-delinearize",
            .descr = &.{"Try to delinearize array references."},
        },
        .{
            .name = "da_disable_delinearization_checks",
            .string = "--da-disable-delinearization-checks",
            .descr = &.{"Disable checks that try to statically verify validity of delinearized subscripts. Enabling this option may result in incorrect dependence vectors for languages that allow the subscript of one dimension to underflow or overflow into another dimension."},
        },
        .{
            .name = "da_miv_max_level_threshold",
            .string = "--da-miv-max-level-threshold",
            .descr = &.{"Maximum depth allowed for the recursive algorithm used to explore MIV direction vectors."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dag_dump_verbose",
            .string = "--dag-dump-verbose",
            .descr = &.{"Display more information when dumping selection DAG nodes."},
        },
        .{
            .name = "dag_maps_huge_region",
            .string = "--dag-maps-huge-region",
            .descr = &.{"The limit to use while constructing the DAG prior to scheduling, at which point a trade-off is made to avoid excessive compile time."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dag_maps_reduction_size",
            .string = "--dag-maps-reduction-size",
            .descr = &.{"A huge scheduling region will have maps reduced by this many nodes at a time. Defaults to HugeRegion / 2."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "data_sections",
            .string = "--data-sections",
            .descr = &.{"Emit data into separate sections"},
        },
        .{
            .name = "dataflow_edge_limit",
            .string = "--dataflow-edge-limit",
            .descr = &.{"Maximum number of dataflow edges to traverse when evaluating the benefit of commuting operands"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ddg_pi_blocks",
            .string = "--ddg-pi-blocks",
            .descr = &.{"Create pi-block nodes."},
        },
        .{
            .name = "ddg_simplify",
            .string = "--ddg-simplify",
            .descr = &.{"Simplify DDG by merging nodes that have less interesting edges."},
        },
        .{
            .name = "debug_ata_max_blocks",
            .string = "--debug-ata-max-blocks",
            .descr = &.{"Maximum num basic blocks before debug info dropped"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "debug_counter",
            .string = "-debug-counter",
            .descr = &.{"Comma separated list of debug counter skip and count"},
        },
        .{
            .name = "debug_entry_values",
            .string = "--debug-entry-values",
            .descr = &.{"Enable debug info for the debug entry values."},
        },
        .{
            .name = "debug_info_correlate",
            .string = "--debug-info-correlate",
            .descr = &.{"Use debug info to correlate profiles."},
        },
        .{
            .name = "debug_pass",
            .string = "--debug-pass",
            .descr = &.{"Print legacy PassManager debugging information"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { Disabled = 0, Arguments = 1, Structure = 2, Executions = 3, Details = 4 }) },
        },
        .{
            .name = "debugger_tune",
            .string = "--debugger-tune",
            .descr = &.{"Tune debug info for a particular debugger"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { gdb = 0, lldb = 1, dbx = 2, sce = 3 }) },
        },
        .{
            .name = "debugify_and_strip_all_safe",
            .string = "--debugify-and-strip-all-safe",
            .descr = &.{"Debugify MIR before and Strip debug after each pass except those known to be unsafe when debug info is present"},
        },
        .{
            .name = "debugify_check_and_strip_all_safe",
            .string = "--debugify-check-and-strip-all-safe",
            .descr = &.{"Debugify MIR before, by checking and stripping the debug info after, each pass except those known to be unsafe when debug info is present"},
        },
        .{
            .name = "debugify_func_limit",
            .string = "--debugify-func-limit",
            .descr = &.{"Set max number of processed functions per pass."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "debugify_level",
            .string = "--debugify-level",
            .descr = &.{"Kind of debug info to add"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { locations = 0, @"location+variables" = 1 }) },
        },
        .{
            .name = "debugify_quiet",
            .string = "--debugify-quiet",
            .descr = &.{"Suppress verbose debugify output"},
        },
        .{
            .name = "default_gcov_version",
            .string = "--default-gcov-version",
            .descr = &.{""},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "default_trip_count",
            .string = "--default-trip-count",
            .descr = &.{"Use this to specify the default trip count of a loop"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "demote_catchswitch_only",
            .string = "--demote-catchswitch-only",
            .descr = &.{"Demote catchswitch BBs only (for wasm EH)"},
        },
        .{
            .name = "denormal_fp_math",
            .string = "--denormal-fp-math",
            .descr = &.{"Select which denormal numbers the code is permitted to require"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { ieee = 0, @"preserve-sign" = 1, @"positive-zero" = 2 }) },
        },
        .{
            .name = "denormal_fp_math_f32",
            .string = "--denormal-fp-math-f32",
            .descr = &.{"Select which denormal numbers the code is permitted to require for float"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { ieee = 0, @"preserve-sign" = 1, @"positive-zero" = 2 }) },
        },
        .{
            .name = "dfa_cost_threshold",
            .string = "--dfa-cost-threshold",
            .descr = &.{"Maximum cost accepted for the transformation"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dfa_hazard_rec",
            .string = "--dfa-hazard-rec",
            .descr = &.{"Use the DFA based hazard recognizer."},
        },
        .{
            .name = "dfa_instr_limit",
            .string = "--dfa-instr-limit",
            .descr = &.{"If present, stops packetizing after N instructions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dfa_jump_view_cfg_before",
            .string = "--dfa-jump-view-cfg-before",
            .descr = &.{"View the CFG before DFA Jump Threading"},
        },
        .{
            .name = "dfa_max_num_paths",
            .string = "--dfa-max-num-paths",
            .descr = &.{"Max number of paths enumerated around a switch"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dfa_max_path_length",
            .string = "--dfa-max-path-length",
            .descr = &.{"Max number of blocks searched to find a threading path"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dfa_sched_reg_pressure_threshold",
            .string = "--dfa-sched-reg-pressure-threshold",
            .descr = &.{"Track reg pressure and switch priority to in-depth"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dfsan_abilist",
            .string = "--dfsan-abilist",
            .descr = &.{"File listing native ABI functions and how the pass treats them"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "dfsan_combine_offset_labels_on_gep",
            .string = "--dfsan-combine-offset-labels-on-gep",
            .descr = &.{"Combine the label of the offset with the label of the pointer when doing pointer arithmetic."},
        },
        .{
            .name = "dfsan_combine_pointer_labels_on_load",
            .string = "--dfsan-combine-pointer-labels-on-load",
            .descr = &.{"Combine the label of the pointer with the label of the data when loading from memory."},
        },
        .{
            .name = "dfsan_combine_pointer_labels_on_store",
            .string = "--dfsan-combine-pointer-labels-on-store",
            .descr = &.{"Combine the label of the pointer with the label of the data when storing in memory."},
        },
        .{
            .name = "dfsan_combine_taint_lookup_table",
            .string = "--dfsan-combine-taint-lookup-table",
            .descr = &.{"When dfsan-combine-offset-labels-on-gep and/or dfsan-combine-pointer-labels-on-load are false, this flag can be used to re-enable combining offset and/or pointer taint when loading specific constant global variables (i.e. lookup tables)."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "dfsan_conditional_callbacks",
            .string = "--dfsan-conditional-callbacks",
            .descr = &.{"Insert calls to callback functions on conditionals."},
        },
        .{
            .name = "dfsan_debug_nonzero_labels",
            .string = "--dfsan-debug-nonzero-labels",
            .descr = &.{"Insert calls to __dfsan_nonzero_label on observing a parameter, load or return with a nonzero label"},
        },
        .{
            .name = "dfsan_event_callbacks",
            .string = "--dfsan-event-callbacks",
            .descr = &.{"Insert calls to __dfsan_*_callback functions on data events."},
        },
        .{
            .name = "dfsan_ignore_personality_routine",
            .string = "--dfsan-ignore-personality-routine",
            .descr = &.{"If a personality routine is marked uninstrumented from the ABI list, do not create a wrapper for it."},
        },
        .{
            .name = "dfsan_instrument_with_call_threshold",
            .string = "--dfsan-instrument-with-call-threshold",
            .descr = &.{"If the function being instrumented requires more than this number of origin stores, use callbacks instead of inline checks (-1 means never use callbacks)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dfsan_preserve_alignment",
            .string = "--dfsan-preserve-alignment",
            .descr = &.{"respect alignment requirements provided by input IR"},
        },
        .{
            .name = "dfsan_reaches_function_callbacks",
            .string = "--dfsan-reaches-function-callbacks",
            .descr = &.{"Insert calls to callback functions on data reaching a function."},
        },
        .{
            .name = "dfsan_track_origins",
            .string = "--dfsan-track-origins",
            .descr = &.{"Track origins of labels"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dfsan_track_select_control_flow",
            .string = "--dfsan-track-select-control-flow",
            .descr = &.{"Propagate labels from condition values of select instructions to results."},
        },
        .{
            .name = "disable_2addr_hack",
            .string = "--disable-2addr-hack",
            .descr = &.{"Disable scheduler's two-address hack"},
        },
        .{
            .name = "disable_a15_sd_optimization",
            .string = "--disable-a15-sd-optimization",
            .descr = &.{"Inhibit optimization of S->D register accesses on A15"},
        },
        .{
            .name = "disable_adv_copy_opt",
            .string = "--disable-adv-copy-opt",
            .descr = &.{"Disable advanced copy optimization"},
        },
        .{
            .name = "disable_advanced_peeling",
            .string = "--disable-advanced-peeling",
            .descr = &.{"Disable advance peeling. Issues for convergent targets (D134803)."},
        },
        .{
            .name = "disable_arm_loloops",
            .string = "--disable-arm-loloops",
            .descr = &.{"Disable the generation of low-overhead loops"},
        },
        .{
            .name = "disable_arm_parallel_dsp",
            .string = "--disable-arm-parallel-dsp",
            .descr = &.{"Disable the ARM Parallel DSP pass"},
        },
        .{
            .name = "disable_auto_paired_vec_st",
            .string = "--disable-auto-paired-vec-st",
            .descr = &.{"disable automatically generated 32byte paired vector stores"},
        },
        .{
            .name = "disable_basic_aa",
            .string = "--disable-basic-aa",
            .descr = &.{""},
        },
        .{
            .name = "disable_binop_extract_shuffle",
            .string = "--disable-binop-extract-shuffle",
            .descr = &.{"Disable binop extract to shuffle transforms"},
        },
        .{
            .name = "disable_bitcode_version_upgrade",
            .string = "--disable-bitcode-version-upgrade",
            .descr = &.{"Disable automatic bitcode upgrade for version mismatch"},
        },
        .{
            .name = "disable_block_placement",
            .string = "--disable-block-placement",
            .descr = &.{"Disable probability-driven block placement"},
        },
        .{
            .name = "disable_bpf_peephole",
            .string = "--disable-bpf-peephole",
            .descr = &.{"Disable machine peepholes for BPF"},
        },
        .{
            .name = "disable_branch_fold",
            .string = "--disable-branch-fold",
            .descr = &.{"Disable branch folding"},
        },
        .{
            .name = "disable_cfi_fixup",
            .string = "--disable-cfi-fixup",
            .descr = &.{"Disable the CFI fixup pass"},
        },
        .{
            .name = "disable_cgp",
            .string = "--disable-cgp",
            .descr = &.{"Disable Codegen Prepare"},
        },
        .{
            .name = "disable_cgp_branch_opts",
            .string = "--disable-cgp-branch-opts",
            .descr = &.{"Disable branch optimizations in CodeGenPrepare"},
        },
        .{
            .name = "disable_cgp_ext_ld_promotion",
            .string = "--disable-cgp-ext-ld-promotion",
            .descr = &.{"Disable ext(promotable(ld)) -> promoted(ext(ld)) optimization in CodeGenPrepare"},
        },
        .{
            .name = "disable_cgp_gc_opts",
            .string = "--disable-cgp-gc-opts",
            .descr = &.{"Disable GC optimizations in CodeGenPrepare"},
        },
        .{
            .name = "disable_cgp_select2branch",
            .string = "--disable-cgp-select2branch",
            .descr = &.{"Disable select to branch conversion."},
        },
        .{
            .name = "disable_cgp_store_extract",
            .string = "--disable-cgp-store-extract",
            .descr = &.{"Disable store(extract) optimizations in CodeGenPrepare"},
        },
        .{
            .name = "disable_check_noreturn_call",
            .string = "--disable-check-noreturn-call",
            .descr = &.{""},
        },
        .{
            .name = "disable_chr",
            .string = "--disable-chr",
            .descr = &.{"Disable CHR for all functions"},
        },
        .{
            .name = "disable_cleanups",
            .string = "--disable-cleanups",
            .descr = &.{"Do not remove implausible terminators or other similar cleanups"},
        },
        .{
            .name = "disable_complex_addr_modes",
            .string = "--disable-complex-addr-modes",
            .descr = &.{"Disables combining addressing modes with different parts in optimizeMemoryInst."},
        },
        .{
            .name = "disable_const64",
            .string = "--disable-const64",
            .descr = &.{"Disable generation of const64"},
        },
        .{
            .name = "disable_constant_hoisting",
            .string = "--disable-constant-hoisting",
            .descr = &.{"Disable ConstantHoisting"},
        },
        .{
            .name = "disable_copyprop",
            .string = "--disable-copyprop",
            .descr = &.{"Disable Copy Propagation pass"},
        },
        .{
            .name = "disable_debug_info_print",
            .string = "--disable-debug-info-print",
            .descr = &.{"Disable debug info printing"},
        },
        .{
            .name = "disable_demotion",
            .string = "--disable-demotion",
            .descr = &.{"Clone multicolor basic blocks but do not demote cross scopes"},
        },
        .{
            .name = "disable_dfa_sched",
            .string = "--disable-dfa-sched",
            .descr = &.{"Disable use of DFA during scheduling"},
        },
        .{
            .name = "disable_early_ifcvt",
            .string = "--disable-early-ifcvt",
            .descr = &.{"Disable Early If-conversion"},
        },
        .{
            .name = "disable_early_taildup",
            .string = "--disable-early-taildup",
            .descr = &.{"Disable pre-register allocation tail duplication"},
        },
        .{
            .name = "disable_expand_reductions",
            .string = "--disable-expand-reductions",
            .descr = &.{"Disable the expand reduction intrinsics pass from running"},
        },
        .{
            .name = "disable_gep_const_evaluation",
            .string = "--disable-gep-const-evaluation",
            .descr = &.{"Disables evaluation of GetElementPtr with constant operands"},
        },
        .{
            .name = "disable_gisel_legality_check",
            .string = "--disable-gisel-legality-check",
            .descr = &.{"Don't verify that MIR is fully legal between GlobalISel passes"},
        },
        .{
            .name = "disable_hcp",
            .string = "--disable-hcp",
            .descr = &.{"Disable Hexagon constant propagation"},
        },
        .{
            .name = "disable_hexagon_amodeopt",
            .string = "--disable-hexagon-amodeopt",
            .descr = &.{"Disable Hexagon Addressing Mode Optimization"},
        },
        .{
            .name = "disable_hexagon_cfgopt",
            .string = "--disable-hexagon-cfgopt",
            .descr = &.{"Disable Hexagon CFG Optimization"},
        },
        .{
            .name = "disable_hexagon_dealloc_ret",
            .string = "--disable-hexagon-dealloc-ret",
            .descr = &.{"Disable Dealloc Return for Hexagon target"},
        },
        .{
            .name = "disable_hexagon_hwloops",
            .string = "--disable-hexagon-hwloops",
            .descr = &.{"Disable Hardware Loops for Hexagon target"},
        },
        .{
            .name = "disable_hexagon_misched",
            .string = "--disable-hexagon-misched",
            .descr = &.{"Disable Hexagon MI Scheduling"},
        },
        .{
            .name = "disable_hexagon_nv_schedule",
            .string = "--disable-hexagon-nv-schedule",
            .descr = &.{"Disable schedule adjustment for new value stores."},
        },
        .{
            .name = "disable_hexagon_opt_ext_to_64",
            .string = "--disable-hexagon-opt-ext-to-64",
            .descr = &.{"Disable Optimization of extensions to i64."},
        },
        .{
            .name = "disable_hexagon_optszext",
            .string = "--disable-hexagon-optszext",
            .descr = &.{"Disable Optimization of Sign/Zero Extends"},
        },
        .{
            .name = "disable_hexagon_peephole",
            .string = "--disable-hexagon-peephole",
            .descr = &.{"Disable Peephole Optimization"},
        },
        .{
            .name = "disable_hexagon_pnotp",
            .string = "--disable-hexagon-pnotp",
            .descr = &.{"Disable Optimization of PNotP"},
        },
        .{
            .name = "disable_hexagon_shuffle",
            .string = "--disable-hexagon-shuffle",
            .descr = &.{"Disable Hexagon instruction shuffling"},
        },
        .{
            .name = "disable_hexagon_volatile_memcpy",
            .string = "--disable-hexagon-volatile-memcpy",
            .descr = &.{"Enable Hexagon-specific memcpy for volatile destination."},
        },
        .{
            .name = "disable_hoisting_to_hotter_blocks",
            .string = "--disable-hoisting-to-hotter-blocks",
            .descr = &.{"Disable hoisting instructions to hotter blocks"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, pgo = 1, all = 2 }) },
        },
        .{
            .name = "disable_hsdr",
            .string = "--disable-hsdr",
            .descr = &.{"Disable splitting double registers"},
        },
        .{
            .name = "disable_i2p_p2i_opt",
            .string = "--disable-i2p-p2i-opt",
            .descr = &.{"Disables inttoptr/ptrtoint roundtrip optimization"},
        },
        .{
            .name = "disable_icp",
            .string = "--disable-icp",
            .descr = &.{"Disable indirect call promotion"},
        },
        .{
            .name = "disable_ifcvt_diamond",
            .string = "--disable-ifcvt-diamond",
            .descr = &.{""},
        },
        .{
            .name = "disable_ifcvt_forked_diamond",
            .string = "--disable-ifcvt-forked-diamond",
            .descr = &.{""},
        },
        .{
            .name = "disable_ifcvt_simple",
            .string = "--disable-ifcvt-simple",
            .descr = &.{""},
        },
        .{
            .name = "disable_ifcvt_simple_false",
            .string = "--disable-ifcvt-simple-false",
            .descr = &.{""},
        },
        .{
            .name = "disable_ifcvt_triangle",
            .string = "--disable-ifcvt-triangle",
            .descr = &.{""},
        },
        .{
            .name = "disable_ifcvt_triangle_false",
            .string = "--disable-ifcvt-triangle-false",
            .descr = &.{""},
        },
        .{
            .name = "disable_ifcvt_triangle_false_rev",
            .string = "--disable-ifcvt-triangle-false-rev",
            .descr = &.{""},
        },
        .{
            .name = "disable_ifcvt_triangle_rev",
            .string = "--disable-ifcvt-triangle-rev",
            .descr = &.{""},
        },
        .{
            .name = "disable_inlined_alloca_merging",
            .string = "--disable-inlined-alloca-merging",
            .descr = &.{""},
        },
        .{
            .name = "disable_interleaved_load_combine",
            .string = "--disable-interleaved-load-combine",
            .descr = &.{"Disable combining of interleaved loads"},
        },
        .{
            .name = "disable_lanai_mem_alu_combiner",
            .string = "--disable-lanai-mem-alu-combiner",
            .descr = &.{"Do not combine ALU and memory operators"},
        },
        .{
            .name = "disable_layout_fsprofile_loader",
            .string = "--disable-layout-fsprofile-loader",
            .descr = &.{"Disable MIRProfileLoader before BlockPlacement"},
        },
        .{
            .name = "disable_lftr",
            .string = "--disable-lftr",
            .descr = &.{"Disable Linear Function Test Replace optimization"},
        },
        .{
            .name = "disable_licm_promotion",
            .string = "--disable-licm-promotion",
            .descr = &.{"Disable memory promotion in LICM pass"},
        },
        .{
            .name = "disable_loop_level_heuristics",
            .string = "--disable-loop-level-heuristics",
            .descr = &.{"Disable loop-level heuristics."},
        },
        .{
            .name = "disable_lsr",
            .string = "--disable-lsr",
            .descr = &.{"Disable Loop Strength Reduction Pass"},
        },
        .{
            .name = "disable_machine_cse",
            .string = "--disable-machine-cse",
            .descr = &.{"Disable Machine Common Subexpression Elimination"},
        },
        .{
            .name = "disable_machine_dce",
            .string = "--disable-machine-dce",
            .descr = &.{"Disable Machine Dead Code Elimination"},
        },
        .{
            .name = "disable_machine_licm",
            .string = "--disable-machine-licm",
            .descr = &.{"Disable Machine LICM"},
        },
        .{
            .name = "disable_machine_sink",
            .string = "--disable-machine-sink",
            .descr = &.{"Disable Machine Sinking"},
        },
        .{
            .name = "disable_memcpy_idiom",
            .string = "--disable-memcpy-idiom",
            .descr = &.{"Disable generation of memcpy in loop idiom recognition"},
        },
        .{
            .name = "disable_memmove_idiom",
            .string = "--disable-memmove-idiom",
            .descr = &.{"Disable generation of memmove in loop idiom recognition"},
        },
        .{
            .name = "disable_memop_opt",
            .string = "--disable-memop-opt",
            .descr = &.{"Disable optimize"},
        },
        .{
            .name = "disable_merge_into_combines",
            .string = "--disable-merge-into-combines",
            .descr = &.{"Disable merging into combines"},
        },
        .{
            .name = "disable_mergeicmps",
            .string = "--disable-mergeicmps",
            .descr = &.{"Disable MergeICmps Pass"},
        },
        .{
            .name = "disable_mips_delay_filler",
            .string = "--disable-mips-delay-filler",
            .descr = &.{"Fill all delay slots with NOPs."},
        },
        .{
            .name = "disable_mips_df_backward_search",
            .string = "--disable-mips-df-backward-search",
            .descr = &.{"Disallow MIPS delay filler to search backward."},
        },
        .{
            .name = "disable_mips_df_forward_search",
            .string = "--disable-mips-df-forward-search",
            .descr = &.{"Disallow MIPS delay filler to search forward."},
        },
        .{
            .name = "disable_mips_df_succbb_search",
            .string = "--disable-mips-df-succbb-search",
            .descr = &.{"Disallow MIPS delay filler to search successor basic blocks."},
        },
        .{
            .name = "disable_mr_partial_inlining",
            .string = "--disable-mr-partial-inlining",
            .descr = &.{"Disable multi-region partial inlining"},
        },
        .{
            .name = "disable_nofree_inference",
            .string = "--disable-nofree-inference",
            .descr = &.{"Stop inferring nofree attribute during function-attrs pass"},
        },
        .{
            .name = "disable_non_allocatable_phys_copy_opt",
            .string = "--disable-non-allocatable-phys-copy-opt",
            .descr = &.{"Disable non-allocatable physical register copy optimization"},
        },
        .{
            .name = "disable_nounwind_inference",
            .string = "--disable-nounwind-inference",
            .descr = &.{"Stop inferring nounwind attribute during function-attrs pass"},
        },
        .{
            .name = "disable_nvjump",
            .string = "--disable-nvjump",
            .descr = &.{"Disable New Value Jumps"},
        },
        .{
            .name = "disable_nvptx_load_store_vectorizer",
            .string = "--disable-nvptx-load-store-vectorizer",
            .descr = &.{"Disable load/store vectorizer"},
        },
        .{
            .name = "disable_nvptx_require_structured_cfg",
            .string = "--disable-nvptx-require-structured-cfg",
            .descr = &.{"Transitional flag to turn off NVPTX's requirement on preserving structured CFG. The requirement should be disabled only when unexpected regressions happen."},
        },
        .{
            .name = "disable_ondemand_mds_loading",
            .string = "--disable-ondemand-mds-loading",
            .descr = &.{"Force disable the lazy-loading on-demand of metadata when loading bitcode for importing."},
        },
        .{
            .name = "disable_packetizer",
            .string = "--disable-packetizer",
            .descr = &.{"Disable Hexagon packetizer pass"},
        },
        .{
            .name = "disable_partial_inlining",
            .string = "--disable-partial-inlining",
            .descr = &.{"Disable partial inlining"},
        },
        .{
            .name = "disable_partial_libcall_inlining",
            .string = "--disable-partial-libcall-inlining",
            .descr = &.{"Disable Partial Libcall Inlining"},
        },
        .{
            .name = "disable_peephole",
            .string = "--disable-peephole",
            .descr = &.{"Disable the peephole optimizer"},
        },
        .{
            .name = "disable_phi_elim_edge_splitting",
            .string = "--disable-phi-elim-edge-splitting",
            .descr = &.{"Disable critical edge splitting during PHI elimination"},
        },
        .{
            .name = "disable_post_ra",
            .string = "--disable-post-ra",
            .descr = &.{"Disable Post Regalloc Scheduler"},
        },
        .{
            .name = "disable_postra_machine_licm",
            .string = "--disable-postra-machine-licm",
            .descr = &.{"Disable Machine LICM"},
        },
        .{
            .name = "disable_postra_machine_sink",
            .string = "--disable-postra-machine-sink",
            .descr = &.{"Disable PostRA Machine Sinking"},
        },
        .{
            .name = "disable_ppc_cmp_opt",
            .string = "--disable-ppc-cmp-opt",
            .descr = &.{"Disable compare instruction optimization"},
        },
        .{
            .name = "disable_ppc_constant_hoisting",
            .string = "--disable-ppc-constant-hoisting",
            .descr = &.{"disable constant hoisting on PPC"},
        },
        .{
            .name = "disable_ppc_ctrloop_analysis",
            .string = "--disable-ppc-ctrloop-analysis",
            .descr = &.{"Disable analysis for CTR loops"},
        },
        .{
            .name = "disable_ppc_ctrloops",
            .string = "--disable-ppc-ctrloops",
            .descr = &.{"Disable CTR loops for PPC"},
        },
        .{
            .name = "disable_ppc_ilp_pref",
            .string = "--disable-ppc-ilp-pref",
            .descr = &.{"disable setting the node scheduling preference to ILP on PPC"},
        },
        .{
            .name = "disable_ppc_innermost_loop_align32",
            .string = "--disable-ppc-innermost-loop-align32",
            .descr = &.{"don't always align innermost loop to 32 bytes on ppc"},
        },
        .{
            .name = "disable_ppc_instr_form_prep",
            .string = "--disable-ppc-instr-form-prep",
            .descr = &.{"Disable PPC loop instr form prep"},
        },
        .{
            .name = "disable_ppc_peephole",
            .string = "--disable-ppc-peephole",
            .descr = &.{"Disable machine peepholes for PPC"},
        },
        .{
            .name = "disable_ppc_preinc",
            .string = "--disable-ppc-preinc",
            .descr = &.{"disable preincrement load/store generation on PPC"},
        },
        .{
            .name = "disable_ppc_sched_addi_load",
            .string = "--disable-ppc-sched-addi-load",
            .descr = &.{"Disable scheduling addi instruction beforeload for ppc"},
        },
        .{
            .name = "disable_ppc_sco",
            .string = "--disable-ppc-sco",
            .descr = &.{"disable sibling call optimization on ppc"},
        },
        .{
            .name = "disable_ppc_unaligned",
            .string = "--disable-ppc-unaligned",
            .descr = &.{"disable unaligned load/store generation on PPC"},
        },
        .{
            .name = "disable_ppc_vsx_fma_mutation",
            .string = "--disable-ppc-vsx-fma-mutation",
            .descr = &.{"Disable VSX FMA instruction mutation"},
        },
        .{
            .name = "disable_ppc_vsx_swap_removal",
            .string = "--disable-ppc-vsx-swap-removal",
            .descr = &.{"Disable VSX Swap Removal for PPC"},
        },
        .{
            .name = "disable_preheader_prot",
            .string = "--disable-preheader-prot",
            .descr = &.{"Disable protection against removing loop preheaders"},
        },
        .{
            .name = "disable_preinline",
            .string = "--disable-preinline",
            .descr = &.{"Disable pre-instrumentation inliner"},
        },
        .{
            .name = "disable_promote_alloca_to_lds",
            .string = "--disable-promote-alloca-to-lds",
            .descr = &.{"Disable promote alloca to LDS"},
        },
        .{
            .name = "disable_promote_alloca_to_vector",
            .string = "--disable-promote-alloca-to-vector",
            .descr = &.{"Disable promote alloca to vector"},
        },
        .{
            .name = "disable_ra_fsprofile_loader",
            .string = "--disable-ra-fsprofile-loader",
            .descr = &.{"Disable MIRProfileLoader before RegAlloc"},
        },
        .{
            .name = "disable_sample_loader_inlining",
            .string = "--disable-sample-loader-inlining",
            .descr = &.{"If true, artifically skip inline transformation in sample-loader pass, and merge (or scale) profiles (as configured by --sample-profile-merge-inlinee)."},
        },
        .{
            .name = "disable_sched_critical_path",
            .string = "--disable-sched-critical-path",
            .descr = &.{"Disable critical path priority in sched=list-ilp"},
        },
        .{
            .name = "disable_sched_cycles",
            .string = "--disable-sched-cycles",
            .descr = &.{"Disable cycle-level precision during preRA scheduling"},
        },
        .{
            .name = "disable_sched_hazard",
            .string = "--disable-sched-hazard",
            .descr = &.{"Disable hazard detection during preRA scheduling"},
        },
        .{
            .name = "disable_sched_height",
            .string = "--disable-sched-height",
            .descr = &.{"Disable scheduled-height priority in sched=list-ilp"},
        },
        .{
            .name = "disable_sched_live_uses",
            .string = "--disable-sched-live-uses",
            .descr = &.{"Disable live use priority in sched=list-ilp"},
        },
        .{
            .name = "disable_sched_physreg_join",
            .string = "--disable-sched-physreg-join",
            .descr = &.{"Disable physreg def-use affinity"},
        },
        .{
            .name = "disable_sched_reg_pressure",
            .string = "--disable-sched-reg-pressure",
            .descr = &.{"Disable regpressure priority in sched=list-ilp"},
        },
        .{
            .name = "disable_sched_stalls",
            .string = "--disable-sched-stalls",
            .descr = &.{"Disable no-stall priority in sched=list-ilp"},
        },
        .{
            .name = "disable_sched_vrcycle",
            .string = "--disable-sched-vrcycle",
            .descr = &.{"Disable virtual register cycle interference checks"},
        },
        .{
            .name = "disable_select_optimize",
            .string = "--disable-select-optimize",
            .descr = &.{"Disable the select-optimization pass from running"},
        },
        .{
            .name = "disable_separate_const_offset_from_gep",
            .string = "--disable-separate-const-offset-from-gep",
            .descr = &.{"Do not separate the constant offset from a GEP instruction"},
        },
        .{
            .name = "disable_shifter_op",
            .string = "--disable-shifter-op",
            .descr = &.{"Disable isel of shifter-op"},
        },
        .{
            .name = "disable_simplify_libcalls",
            .string = "--disable-simplify-libcalls",
            .descr = &.{"Disable simplify-libcalls"},
        },
        .{
            .name = "disable_sparc_delay_filler",
            .string = "--disable-sparc-delay-filler",
            .descr = &.{"Disable the Sparc delay slot filler."},
        },
        .{
            .name = "disable_sparc_leaf_proc",
            .string = "--disable-sparc-leaf-proc",
            .descr = &.{"Disable Sparc leaf procedure optimization."},
        },
        .{
            .name = "disable_spill_fusing",
            .string = "--disable-spill-fusing",
            .descr = &.{"Disable fusing of spill code into instructions"},
        },
        .{
            .name = "disable_spill_hoist",
            .string = "--disable-spill-hoist",
            .descr = &.{"Disable inline spill hoisting"},
        },
        .{
            .name = "disable_ssc",
            .string = "--disable-ssc",
            .descr = &.{"Disable Stack Slot Coloring"},
        },
        .{
            .name = "disable_store_widen",
            .string = "--disable-store-widen",
            .descr = &.{"Disable store widening"},
        },
        .{
            .name = "disable_strictnode_mutation",
            .string = "--disable-strictnode-mutation",
            .descr = &.{"Don't mutate strict-float node to a legalize node"},
        },
        .{
            .name = "disable_symbolication",
            .string = "--disable-symbolication",
            .descr = &.{"Disable symbolizing crash backtraces."},
        },
        .{
            .name = "disable_tail_calls",
            .string = "--disable-tail-calls",
            .descr = &.{"Never emit tail calls"},
        },
        .{
            .name = "disable_tail_duplicate",
            .string = "--disable-tail-duplicate",
            .descr = &.{"Disable tail duplication"},
        },
        .{
            .name = "disable_thinlto_funcattrs",
            .string = "--disable-thinlto-funcattrs",
            .descr = &.{"Don't propagate function-attrs in thinLTO"},
        },
        .{
            .name = "disable_type_promotion",
            .string = "--disable-type-promotion",
            .descr = &.{"Disable type promotion pass"},
        },
        .{
            .name = "disable_vecdbl_nv_stores",
            .string = "--disable-vecdbl-nv-stores",
            .descr = &.{"Disable vector double new-value-stores"},
        },
        .{
            .name = "disable_vector_combine",
            .string = "--disable-vector-combine",
            .descr = &.{"Disable all vector combine transforms"},
        },
        .{
            .name = "disable_verify",
            .string = "--disable-verify",
            .descr = &.{"Do not verify input module"},
        },
        .{
            .name = "disable_vp",
            .string = "--disable-vp",
            .descr = &.{"Disable Value Profiling"},
        },
        .{
            .name = "disable_wasm_fallthrough_return_opt",
            .string = "--disable-wasm-fallthrough-return-opt",
            .descr = &.{"WebAssembly: Disable fallthrough-return optimizations."},
        },
        .{
            .name = "disable_whole_program_visibility",
            .string = "--disable-whole-program-visibility",
            .descr = &.{"Disable whole program visibility (overrides enabling options)"},
        },
        .{
            .name = "disable_x86_domain_reassignment",
            .string = "--disable-x86-domain-reassignment",
            .descr = &.{"X86: Disable Virtual Register Reassignment."},
        },
        .{
            .name = "disable_x86_lea_opt",
            .string = "--disable-x86-lea-opt",
            .descr = &.{"X86: Disable LEA optimizations."},
        },
        .{
            .name = "discard_value_names",
            .string = "--discard-value-names",
            .descr = &.{"Discard names from Value (other than GlobalValue)."},
        },
        .{
            .name = "do_comdat_renaming",
            .string = "--do-comdat-renaming",
            .descr = &.{"Append function hash to the name of COMDAT function to avoid function hash mismatch due to the preinliner"},
        },
        .{
            .name = "do_counter_promotion",
            .string = "--do-counter-promotion",
            .descr = &.{"Do counter register promotion"},
        },
        .{
            .name = "dom_conditions_max_uses",
            .string = "--dom-conditions-max-uses",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dom_tree_reachability_max_bbs_to_explore",
            .string = "--dom-tree-reachability-max-bbs-to-explore",
            .descr = &.{"Max number of BBs to explore for reachability analysis"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dot_cfg_after_color",
            .string = "--dot-cfg-after-color",
            .descr = &.{"Color for dot-cfg after elements"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "dot_cfg_before_color",
            .string = "--dot-cfg-before-color",
            .descr = &.{"Color for dot-cfg before elements"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "dot_cfg_common_color",
            .string = "--dot-cfg-common-color",
            .descr = &.{"Color for dot-cfg common elements"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "dot_cfg_dir",
            .string = "--dot-cfg-dir",
            .descr = &.{"Generate dot files into specified directory for changed IRs"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "dot_ddg_filename_prefix",
            .string = "--dot-ddg-filename-prefix",
            .descr = &.{"The prefix used for the DDG dot file names."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "dot_ddg_only",
            .string = "--dot-ddg-only",
            .descr = &.{"simple ddg dot graph"},
        },
        .{
            .name = "dot_mcfg_only",
            .string = "--dot-mcfg-only",
            .descr = &.{"Print only the CFG without blocks body"},
        },
        .{
            .name = "dse_memoryssa_defs_per_block_limit",
            .string = "--dse-memoryssa-defs-per-block-limit",
            .descr = &.{"The number of MemoryDefs we consider as candidates to eliminated other stores per basic block (default = 5000)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dse_memoryssa_otherbb_cost",
            .string = "--dse-memoryssa-otherbb-cost",
            .descr = &.{"The cost of a step in a different basic block than the killing MemoryDef(default = 5)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dse_memoryssa_partial_store_limit",
            .string = "--dse-memoryssa-partial-store-limit",
            .descr = &.{"The maximum number candidates that only partially overwrite the killing MemoryDef to consider (default = 5)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dse_memoryssa_path_check_limit",
            .string = "--dse-memoryssa-path-check-limit",
            .descr = &.{"The maximum number of blocks to check when trying to prove that all paths to an exit go through a killing block (default = 50)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dse_memoryssa_samebb_cost",
            .string = "--dse-memoryssa-samebb-cost",
            .descr = &.{"The cost of a step in the same basic block as the killing MemoryDef(default = 1)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dse_memoryssa_scanlimit",
            .string = "--dse-memoryssa-scanlimit",
            .descr = &.{"The number of memory instructions to scan for dead store elimination (default = 150)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dse_memoryssa_walklimit",
            .string = "--dse-memoryssa-walklimit",
            .descr = &.{"The maximum number of steps while walking upwards to find MemoryDefs that may be killed (default = 90)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dse_optimize_memoryssa",
            .string = "--dse-optimize-memoryssa",
            .descr = &.{"Allow DSE to optimize memory accesses."},
        },
        .{
            .name = "dump_thin_cg_sccs",
            .string = "--dump-thin-cg-sccs",
            .descr = &.{"Dump the SCCs in the ThinLTO index's callgraph"},
        },
        .{
            .name = "dwarf_directory",
            .string = "--dwarf-directory",
            .descr = &.{"Use .file directives with an explicit directory"},
        },
        .{
            .name = "dwarf_extended_loc",
            .string = "--dwarf-extended-loc",
            .descr = &.{"Disable emission of the extended flags in .loc directives."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Default = 0, Enable = 1, Disable = 2 }) },
        },
        .{
            .name = "dwarf_inlined_strings",
            .string = "--dwarf-inlined-strings",
            .descr = &.{"Use inlined strings rather than string section."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Default = 0, Enable = 1, Disable = 2 }) },
        },
        .{
            .name = "dwarf_linkage_names",
            .string = "--dwarf-linkage-names",
            .descr = &.{"Which DWARF linkage-name attributes to emit."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Default = 0, All = 1, Abstract = 2 }) },
        },
        .{
            .name = "dwarf_op_convert",
            .string = "--dwarf-op-convert",
            .descr = &.{"Enable use of the DWARFv5 DW_OP_convert operator"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Default = 0, Enable = 1, Disable = 2 }) },
        },
        .{
            .name = "dwarf_sections_as_references",
            .string = "--dwarf-sections-as-references",
            .descr = &.{"Use sections+offset as references rather than labels."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Default = 0, Enable = 1, Disable = 2 }) },
        },
        .{
            .name = "dwarf_version",
            .string = "--dwarf-version",
            .descr = &.{"Dwarf version"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "dwarf64",
            .string = "--dwarf64",
            .descr = &.{"Generate debugging info in the 64-bit DWARF format"},
        },
        .{
            .name = "eagerly_invalidate_analyses",
            .string = "--eagerly-invalidate-analyses",
            .descr = &.{"Eagerly invalidate more analyses in default pipelines"},
        },
        .{
            .name = "early_ifcvt_limit",
            .string = "--early-ifcvt-limit",
            .descr = &.{"Maximum number of instructions per speculated block."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "early_live_intervals",
            .string = "--early-live-intervals",
            .descr = &.{"Run live interval analysis earlier in the pipeline"},
        },
        .{
            .name = "earlycse_debug_hash",
            .string = "--earlycse-debug-hash",
            .descr = &.{"Perform extra assertion checking to verify that SimpleValue's hash function is well-behaved w.r.t. its isEqual predicate"},
        },
        .{
            .name = "earlycse_mssa_optimization_cap",
            .string = "--earlycse-mssa-optimization-cap",
            .descr = &.{"Enable imprecision in EarlyCSE in pathological cases, in exchange for faster compile. Caps the MemorySSA clobbering calls."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "eif_limit",
            .string = "--eif-limit",
            .descr = &.{"Size limit in Hexagon early if-conversion"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "eif_no_loop_exit",
            .string = "--eif-no-loop-exit",
            .descr = &.{"Do not convert branches that may exit the loop"},
        },
        .{
            .name = "emit_call_site_info",
            .string = "--emit-call-site-info",
            .descr = &.{"Emit call site debug information, if debug information is enabled."},
        },
        .{
            .name = "emit_dwarf_unwind",
            .string = "--emit-dwarf-unwind",
            .descr = &.{"Whether to emit DWARF EH frame entries."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { always = 0, @"no-compact-unwind" = 1, default = 2 }) },
        },
        .{
            .name = "emscripten_cxx_exceptions_allowed",
            .string = "--emscripten-cxx-exceptions-allowed",
            .descr = &.{"The list of function names in which Emscripten-style exception handling is enabled (see emscripten EMSCRIPTEN_CATCHING_ALLOWED options)"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "emulate_old_livedebugvalues",
            .string = "--emulate-old-livedebugvalues",
            .descr = &.{"Act like old LiveDebugValues did"},
        },
        .{
            .name = "emulated_tls",
            .string = "--emulated-tls",
            .descr = &.{"Use emulated TLS model"},
        },
        .{
            .name = "enable_aa_sched_mi",
            .string = "--enable-aa-sched-mi",
            .descr = &.{"Enable use of AA during MI DAG construction"},
        },
        .{
            .name = "enable_acc_forwarding",
            .string = "--enable-acc-forwarding",
            .descr = &.{"Enable vec acc forwarding"},
        },
        .{
            .name = "enable_alu_forwarding",
            .string = "--enable-alu-forwarding",
            .descr = &.{"Enable vec alu forwarding"},
        },
        .{
            .name = "enable_amdgpu_aa",
            .string = "--enable-amdgpu-aa",
            .descr = &.{"Enable AMDGPU Alias Analysis"},
        },
        .{
            .name = "enable_andcmp_sinking",
            .string = "--enable-andcmp-sinking",
            .descr = &.{"Enable sinkinig and/cmp into branches."},
        },
        .{
            .name = "enable_approx_func_fp_math",
            .string = "--enable-approx-func-fp-math",
            .descr = &.{"Enable FP math optimizations that assume approx func"},
        },
        .{
            .name = "enable_arm_3_addr_conv",
            .string = "--enable-arm-3-addr-conv",
            .descr = &.{"Enable ARM 2-addr to 3-addr conv"},
        },
        .{
            .name = "enable_arm_maskedgatscat",
            .string = "--enable-arm-maskedgatscat",
            .descr = &.{"Enable the generation of masked gathers and scatters"},
        },
        .{
            .name = "enable_arm_maskedldst",
            .string = "--enable-arm-maskedldst",
            .descr = &.{"Enable the generation of masked loads and stores"},
        },
        .{
            .name = "enable_block_placement_stats",
            .string = "--enable-block-placement-stats",
            .descr = &.{"Collect probability-driven block placement stats"},
        },
        .{
            .name = "enable_bsb_sched",
            .string = "--enable-bsb-sched",
            .descr = &.{""},
        },
        .{
            .name = "enable_chr",
            .string = "--enable-chr",
            .descr = &.{"Enable control height reduction optimization (CHR)"},
        },
        .{
            .name = "enable_cold_section",
            .string = "--enable-cold-section",
            .descr = &.{"Enable placement of extracted cold functions into a separate section after hot-cold splitting."},
        },
        .{
            .name = "enable_coldcc_stress_test",
            .string = "--enable-coldcc-stress-test",
            .descr = &.{"Enable stress test of coldcc by adding calling conv to all internal functions."},
        },
        .{
            .name = "enable_complex_deinterleaving",
            .string = "--enable-complex-deinterleaving",
            .descr = &.{"Enable generation of complex instructions"},
        },
        .{
            .name = "enable_cond_stores_vec",
            .string = "--enable-cond-stores-vec",
            .descr = &.{"Enable if predication of stores during vectorization."},
        },
        .{
            .name = "enable_constraint_elimination",
            .string = "--enable-constraint-elimination",
            .descr = &.{"Enable pass to eliminate conditions based on linear constraints"},
        },
        .{
            .name = "enable_cse_in_irtranslator",
            .string = "--enable-cse-in-irtranslator",
            .descr = &.{"Should enable CSE in irtranslator"},
        },
        .{
            .name = "enable_cse_in_legalizer",
            .string = "--enable-cse-in-legalizer",
            .descr = &.{"Should enable CSE in Legalizer"},
        },
        .{
            .name = "enable_cur_sched",
            .string = "--enable-cur-sched",
            .descr = &.{"Enable the scheduler to generate .cur"},
        },
        .{
            .name = "enable_deferred_spilling",
            .string = "--enable-deferred-spilling",
            .descr = &.{"Instead of spilling a variable right away, defer the actual code insertion to the end of the allocation. That way the allocator might still find a suitable coloring for this variable because of other evicted variables."},
        },
        .{
            .name = "enable_dfa_jump_thread",
            .string = "--enable-dfa-jump-thread",
            .descr = &.{"Enable DFA jump threading"},
        },
        .{
            .name = "enable_double_float_shrink",
            .string = "--enable-double-float-shrink",
            .descr = &.{"Enable unsafe double to float shrinking for math lib calls"},
        },
        .{
            .name = "enable_dse_partial_overwrite_tracking",
            .string = "--enable-dse-partial-overwrite-tracking",
            .descr = &.{"Enable partial-overwrite tracking in DSE"},
        },
        .{
            .name = "enable_dse_partial_store_merging",
            .string = "--enable-dse-partial-store-merging",
            .descr = &.{"Enable partial store merging in DSE"},
        },
        .{
            .name = "enable_emscripten_cxx_exceptions",
            .string = "--enable-emscripten-cxx-exceptions",
            .descr = &.{"WebAssembly Emscripten-style exception handling"},
        },
        .{
            .name = "enable_emscripten_sjlj",
            .string = "--enable-emscripten-sjlj",
            .descr = &.{"WebAssembly Emscripten-style setjmp/longjmp handling"},
        },
        .{
            .name = "enable_epilogue_vectorization",
            .string = "--enable-epilogue-vectorization",
            .descr = &.{"Enable vectorization of epilogue loops."},
        },
        .{
            .name = "enable_ext_tsp_block_placement",
            .string = "--enable-ext-tsp-block-placement",
            .descr = &.{"Enable machine block placement based on the ext-tsp model, optimizing I-cache utilization."},
        },
        .{
            .name = "enable_falkor_hwpf_unroll_fix",
            .string = "--enable-falkor-hwpf-unroll-fix",
            .descr = &.{""},
        },
        .{
            .name = "enable_fixedwidth_autovec_in_streaming_mode",
            .string = "--enable-fixedwidth-autovec-in-streaming-mode",
            .descr = &.{""},
        },
        .{
            .name = "enable_fs_discriminator",
            .string = "--enable-fs-discriminator",
            .descr = &.{"Enable adding flow sensitive discriminators"},
        },
        .{
            .name = "enable_gen_insn",
            .string = "--enable-gen-insn",
            .descr = &.{"Generate all instruction with TC"},
        },
        .{
            .name = "enable_global_analyses",
            .string = "--enable-global-analyses",
            .descr = &.{"Enable inter-procedural analyses"},
        },
        .{
            .name = "enable_global_merge",
            .string = "--enable-global-merge",
            .descr = &.{"Enable the global merge pass"},
        },
        .{
            .name = "enable_gvn_hoist",
            .string = "--enable-gvn-hoist",
            .descr = &.{"Enable the GVN hoisting pass (default = off)"},
        },
        .{
            .name = "enable_gvn_memdep",
            .string = "--enable-gvn-memdep",
            .descr = &.{""},
        },
        .{
            .name = "enable_gvn_sink",
            .string = "--enable-gvn-sink",
            .descr = &.{"Enable the GVN sinking pass (default = off)"},
        },
        .{
            .name = "enable_heap_to_stack_conversion",
            .string = "--enable-heap-to-stack-conversion",
            .descr = &.{""},
        },
        .{
            .name = "enable_hexagon_br_prob",
            .string = "--enable-hexagon-br-prob",
            .descr = &.{"Enable branch probability info"},
        },
        .{
            .name = "enable_hexagon_sdnode_sched",
            .string = "--enable-hexagon-sdnode-sched",
            .descr = &.{"Enable Hexagon SDNode scheduling"},
        },
        .{
            .name = "enable_hexagon_vector_print",
            .string = "--enable-hexagon-vector-print",
            .descr = &.{"Enable Hexagon Vector print instr pass"},
        },
        .{
            .name = "enable_if_conversion",
            .string = "--enable-if-conversion",
            .descr = &.{"Enable if-conversion during vectorization."},
        },
        .{
            .name = "enable_implicit_null_checks",
            .string = "--enable-implicit-null-checks",
            .descr = &.{"Fold null checks into faulting memory operations"},
        },
        .{
            .name = "enable_import_metadata",
            .string = "--enable-import-metadata",
            .descr = &.{"Enable import metadata like 'thinlto_src_module'"},
        },
        .{
            .name = "enable_ind_var_reg_heur",
            .string = "--enable-ind-var-reg-heur",
            .descr = &.{"Count the induction variable only once when interleaving"},
        },
        .{
            .name = "enable_interleaved_mem_accesses",
            .string = "--enable-interleaved-mem-accesses",
            .descr = &.{"Enable vectorization on interleaved memory accesses in a loop"},
        },
        .{
            .name = "enable_ipra",
            .string = "--enable-ipra",
            .descr = &.{"Enable interprocedural register allocation to reduce load/store at procedure calls."},
        },
        .{
            .name = "enable_jmc_instrument",
            .string = "--enable-jmc-instrument",
            .descr = &.{"Instrument functions with a call to __CheckForDebuggerJustMyCode"},
        },
        .{
            .name = "enable_knowledge_retention",
            .string = "--enable-knowledge-retention",
            .descr = &.{"enable preservation of attributes throughout code transformation"},
        },
        .{
            .name = "enable_legalize_types_checking",
            .string = "--enable-legalize-types-checking",
            .descr = &.{""},
        },
        .{
            .name = "enable_linkonceodr_ir_outlining",
            .string = "--enable-linkonceodr-ir-outlining",
            .descr = &.{"Enable the IR outliner on linkonceodr functions"},
        },
        .{
            .name = "enable_linkonceodr_outlining",
            .string = "--enable-linkonceodr-outlining",
            .descr = &.{"Enable the machine outliner on linkonceodr functions"},
        },
        .{
            .name = "enable_load_in_loop_pre",
            .string = "--enable-load-in-loop-pre",
            .descr = &.{""},
        },
        .{
            .name = "enable_load_pre",
            .string = "--enable-load-pre",
            .descr = &.{""},
        },
        .{
            .name = "enable_loadstore_runtime_interleave",
            .string = "--enable-loadstore-runtime-interleave",
            .descr = &.{"Enable runtime interleaving until load/store ports are saturated"},
        },
        .{
            .name = "enable_local_reassign",
            .string = "--enable-local-reassign",
            .descr = &.{"Local reassignment can yield better allocation decisions, but may be compile time intensive"},
        },
        .{
            .name = "enable_loop_distribute",
            .string = "--enable-loop-distribute",
            .descr = &.{"Enable the new, experimental LoopDistribution Pass"},
        },
        .{
            .name = "enable_loop_flatten",
            .string = "--enable-loop-flatten",
            .descr = &.{"Enable the LoopFlatten Pass"},
        },
        .{
            .name = "enable_loop_simplifycfg_term_folding",
            .string = "--enable-loop-simplifycfg-term-folding",
            .descr = &.{""},
        },
        .{
            .name = "enable_loopinterchange",
            .string = "--enable-loopinterchange",
            .descr = &.{"Enable the experimental LoopInterchange Pass"},
        },
        .{
            .name = "enable_lsr_phielim",
            .string = "--enable-lsr-phielim",
            .descr = &.{"Enable LSR phi elimination"},
        },
        .{
            .name = "enable_lto_internalization",
            .string = "--enable-lto-internalization",
            .descr = &.{"Enable global value internalization in LTO"},
        },
        .{
            .name = "enable_machine_outliner",
            .string = "--enable-machine-outliner",
            .descr = &.{"Enable the machine outliner"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { always = 0, never = 1 }) },
        },
        .{
            .name = "enable_masked_interleaved_mem_accesses",
            .string = "--enable-masked-interleaved-mem-accesses",
            .descr = &.{"Enable vectorization on masked interleaved memory accesses in a loop"},
        },
        .{
            .name = "enable_matrix",
            .string = "--enable-matrix",
            .descr = &.{"Enable lowering of the matrix intrinsics"},
        },
        .{
            .name = "enable_mem_access_versioning",
            .string = "--enable-mem-access-versioning",
            .descr = &.{"Enable symbolic stride memory access versioning"},
        },
        .{
            .name = "enable_mem_prof",
            .string = "--enable-mem-prof",
            .descr = &.{"Enable memory profiler"},
        },
        .{
            .name = "enable_memcpy_dag_opt",
            .string = "--enable-memcpy-dag-opt",
            .descr = &.{"Gang up loads and stores generated by inlining of memcpy"},
        },
        .{
            .name = "enable_memcpyopt_without_libcalls",
            .string = "--enable-memcpyopt-without-libcalls",
            .descr = &.{"Enable memcpyopt even when libcalls are disabled"},
        },
        .{
            .name = "enable_merge_functions",
            .string = "--enable-merge-functions",
            .descr = &.{"Enable function merging as part of the optimization pipeline"},
        },
        .{
            .name = "enable_misched",
            .string = "--enable-misched",
            .descr = &.{"Enable the machine instruction scheduling pass."},
        },
        .{
            .name = "enable_ml_inliner",
            .string = "--enable-ml-inliner",
            .descr = &.{"Enable ML policy for inliner. Currently trained for -Oz only"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { default = 0, development = 1, release = 2 }) },
        },
        .{
            .name = "enable_module_inliner",
            .string = "--enable-module-inliner",
            .descr = &.{"Enable module inliner"},
        },
        .{
            .name = "enable_mve_interleave",
            .string = "--enable-mve-interleave",
            .descr = &.{"Enable interleave MVE vector operation lowering"},
        },
        .{
            .name = "enable_name_compression",
            .string = "--enable-name-compression",
            .descr = &.{"Enable name/filename string compression"},
        },
        .{
            .name = "enable_newgvn",
            .string = "--enable-newgvn",
            .descr = &.{"Run the NewGVN pass"},
        },
        .{
            .name = "enable_no_infs_fp_math",
            .string = "--enable-no-infs-fp-math",
            .descr = &.{"Enable FP math optimizations that assume no +-Infs"},
        },
        .{
            .name = "enable_no_nans_fp_math",
            .string = "--enable-no-nans-fp-math",
            .descr = &.{"Enable FP math optimizations that assume no NaNs"},
        },
        .{
            .name = "enable_no_rerun_simplification_pipeline",
            .string = "--enable-no-rerun-simplification-pipeline",
            .descr = &.{"Prevent running the simplification pipeline on a function more than once in the case that SCC mutations cause a function to be visited multiple times as long as the function has not been changed"},
        },
        .{
            .name = "enable_no_signed_zeros_fp_math",
            .string = "--enable-no-signed-zeros-fp-math",
            .descr = &.{"Enable FP math optimizations that assume the sign of 0 is insignificant"},
        },
        .{
            .name = "enable_no_trapping_fp_math",
            .string = "--enable-no-trapping-fp-math",
            .descr = &.{"Enable setting the FP exceptions build attribute not to use exceptions"},
        },
        .{
            .name = "enable_noalias_to_md_conversion",
            .string = "--enable-noalias-to-md-conversion",
            .descr = &.{"Convert noalias attributes to metadata during inlining."},
        },
        .{
            .name = "enable_nonnull_arg_prop",
            .string = "--enable-nonnull-arg-prop",
            .descr = &.{"Try to propagate nonnull argument attributes from callsites to caller functions."},
        },
        .{
            .name = "enable_nontrivial_unswitch",
            .string = "--enable-nontrivial-unswitch",
            .descr = &.{"Forcibly enables non-trivial loop unswitching rather than following the configuration passed into the pass."},
        },
        .{
            .name = "enable_npm_O3_nontrivial_unswitch",
            .string = "--enable-npm-O3-nontrivial-unswitch",
            .descr = &.{"Enable non-trivial loop unswitching for -O3"},
        },
        .{
            .name = "enable_npm_pgo_inline_deferral",
            .string = "--enable-npm-pgo-inline-deferral",
            .descr = &.{"Enable inline deferral during PGO"},
        },
        .{
            .name = "enable_npm_synthetic_counts",
            .string = "--enable-npm-synthetic-counts",
            .descr = &.{"Run synthetic function entry count generation pass"},
        },
        .{
            .name = "enable_objc_arc_opts",
            .string = "--enable-objc-arc-opts",
            .descr = &.{"enable/disable all ARC Optimizations"},
        },
        .{
            .name = "enable_order_file_instrumentation",
            .string = "--enable-order-file-instrumentation",
            .descr = &.{"Enable order file instrumentation (default = off)"},
        },
        .{
            .name = "enable_partial_inlining",
            .string = "--enable-partial-inlining",
            .descr = &.{"Run Partial inlinining pass"},
        },
        .{
            .name = "enable_patchpoint_liveness",
            .string = "--enable-patchpoint-liveness",
            .descr = &.{"Enable PatchPoint Liveness Analysis Pass"},
        },
        .{
            .name = "enable_phi_of_ops",
            .string = "--enable-phi-of-ops",
            .descr = &.{""},
        },
        .{
            .name = "enable_pipeliner",
            .string = "--enable-pipeliner",
            .descr = &.{"Enable Software Pipelining"},
        },
        .{
            .name = "enable_pipeliner_opt_size",
            .string = "--enable-pipeliner-opt-size",
            .descr = &.{"Enable SWP at Os."},
        },
        .{
            .name = "enable_post_misched",
            .string = "--enable-post-misched",
            .descr = &.{"Enable the post-ra machine instruction scheduling pass."},
        },
        .{
            .name = "enable_post_pgo_loop_rotation",
            .string = "--enable-post-pgo-loop-rotation",
            .descr = &.{"Run the loop rotation transformation after PGO instrumentation"},
        },
        .{
            .name = "enable_ppc_branch_coalesce",
            .string = "--enable-ppc-branch-coalesce",
            .descr = &.{"enable coalescing of duplicate branches for PPC"},
        },
        .{
            .name = "enable_ppc_extra_toc_reg_deps",
            .string = "--enable-ppc-extra-toc-reg-deps",
            .descr = &.{"Add extra TOC register dependencies"},
        },
        .{
            .name = "enable_ppc_gen_scalar_mass",
            .string = "--enable-ppc-gen-scalar-mass",
            .descr = &.{"Enable lowering math functions to their corresponding MASS (scalar) entries"},
        },
        .{
            .name = "enable_ppc_prefetching",
            .string = "--enable-ppc-prefetching",
            .descr = &.{"enable software prefetching on PPC"},
        },
        .{
            .name = "enable_pre",
            .string = "--enable-pre",
            .descr = &.{""},
        },
        .{
            .name = "enable_save_restore_long",
            .string = "--enable-save-restore-long",
            .descr = &.{"Enable long calls for save-restore stubs."},
        },
        .{
            .name = "enable_scalable_autovec_in_streaming_mode",
            .string = "--enable-scalable-autovec-in-streaming-mode",
            .descr = &.{""},
        },
        .{
            .name = "enable_scc_inline_advisor_printing",
            .string = "--enable-scc-inline-advisor-printing",
            .descr = &.{""},
        },
        .{
            .name = "enable_scoped_noalias",
            .string = "--enable-scoped-noalias",
            .descr = &.{""},
        },
        .{
            .name = "enable_selectiondag_sp",
            .string = "--enable-selectiondag-sp",
            .descr = &.{""},
        },
        .{
            .name = "enable_shrink_wrap",
            .string = "--enable-shrink-wrap",
            .descr = &.{"enable the shrink-wrapping pass"},
        },
        .{
            .name = "enable_sign_dependent_rounding_fp_math",
            .string = "--enable-sign-dependent-rounding-fp-math",
            .descr = &.{"Force codegen to assume rounding mode can change dynamically"},
        },
        .{
            .name = "enable_split_backedge_in_load_pre",
            .string = "--enable-split-backedge-in-load-pre",
            .descr = &.{""},
        },
        .{
            .name = "enable_split_machine_functions",
            .string = "--enable-split-machine-functions",
            .descr = &.{"Split out cold blocks from machine functions based on profile information."},
        },
        .{
            .name = "enable_stackovf_sanitizer",
            .string = "--enable-stackovf-sanitizer",
            .descr = &.{"Enable runtime checks for stack overflow."},
        },
        .{
            .name = "enable_store_refinement",
            .string = "--enable-store-refinement",
            .descr = &.{""},
        },
        .{
            .name = "enable_subreg_liveness",
            .string = "--enable-subreg-liveness",
            .descr = &.{"Enable subregister liveness tracking."},
        },
        .{
            .name = "enable_tail_merge",
            .string = "--enable-tail-merge",
            .descr = &.{""},
        },
        .{
            .name = "enable_tbaa",
            .string = "--enable-tbaa",
            .descr = &.{""},
        },
        .{
            .name = "enable_tc_latency_sched",
            .string = "--enable-tc-latency-sched",
            .descr = &.{""},
        },
        .{
            .name = "enable_timing_class_latency",
            .string = "--enable-timing-class-latency",
            .descr = &.{"Enable timing class latency"},
        },
        .{
            .name = "enable_unroll_and_jam",
            .string = "--enable-unroll-and-jam",
            .descr = &.{"Enable Unroll And Jam Pass"},
        },
        .{
            .name = "enable_unsafe_fp_math",
            .string = "--enable-unsafe-fp-math",
            .descr = &.{"Enable optimizations that may decrease FP precision"},
        },
        .{
            .name = "enable_unsafe_globalsmodref_alias_results",
            .string = "--enable-unsafe-globalsmodref-alias-results",
            .descr = &.{""},
        },
        .{
            .name = "enable_unswitch_cost_multiplier",
            .string = "--enable-unswitch-cost-multiplier",
            .descr = &.{"Enable unswitch cost multiplier that prohibits exponential explosion in nontrivial unswitch."},
        },
        .{
            .name = "enable_vfe",
            .string = "--enable-vfe",
            .descr = &.{"Enable virtual function elimination"},
        },
        .{
            .name = "enable_vplan_native_path",
            .string = "--enable-vplan-native-path",
            .descr = &.{"Enable VPlan-native vectorization path with support for outer loop vectorization."},
        },
        .{
            .name = "enable_x86_scalar_amx",
            .string = "--enable-x86-scalar-amx",
            .descr = &.{"X86: enable AMX scalarizition."},
        },
        .{
            .name = "epilogue_vectorization_force_VF",
            .string = "--epilogue-vectorization-force-VF",
            .descr = &.{"When epilogue vectorization is enabled, and a value greater than 1 is specified, forces the given VF for all applicable epilogue loops."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "epilogue_vectorization_minimum_VF",
            .string = "--epilogue-vectorization-minimum-VF",
            .descr = &.{"Only loops with vectorization factor equal to or larger than the specified value are considered for epilogue vectorization."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "exception_model",
            .string = "--exception-model",
            .descr = &.{"exception model"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { default = 0, dwarf = 1, sjlj = 2, arm = 3, wineh = 4, wasm = 5 }) },
        },
        .{
            .name = "exec_on_ir_change",
            .string = "--exec-on-ir-change",
            .descr = &.{"exe called with module IR after each pass that changes it"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "exhaustive_register_search",
            .string = "--exhaustive-register-search",
            .descr = &.{"Exhaustive Search for registers bypassing the depth and interference cutoffs of last chance recoloring"},
        },
        .{
            .name = "expand_all_fp_mlx",
            .string = "--expand-all-fp-mlx",
            .descr = &.{""},
        },
        .{
            .name = "expand_condsets_coa_limit",
            .string = "--expand-condsets-coa-limit",
            .descr = &.{"Max number of segment coalescings"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "expand_condsets_tfr_limit",
            .string = "--expand-condsets-tfr-limit",
            .descr = &.{"Max number of mux expansions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "expand_constant_exprs",
            .string = "--expand-constant-exprs",
            .descr = &.{"Expand constant expressions to instructions for testing purposes"},
        },
        .{
            .name = "expand_div_rem_bits",
            .string = "--expand-div-rem-bits",
            .descr = &.{"div and rem instructions on integers with more than <N> bits are expanded."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "expand_fp_convert_bits",
            .string = "--expand-fp-convert-bits",
            .descr = &.{"fp convert instructions on integers with more than <N> bits are expanded."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "expand_limit",
            .string = "--expand-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "expandvp_override_evl_transform",
            .string = "--expandvp-override-evl-transform",
            .descr = &.{"Options: <empty>|Legal|Discard|Convert. If non-empty, ignore TargetTransformInfo and always use this transformation for the %evl parameter (Used in testing)."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "expandvp_override_mask_transform",
            .string = "--expandvp-override-mask-transform",
            .descr = &.{"Options: <empty>|Legal|Discard|Convert. If non-empty, Ignore TargetTransformInfo and always use this transformation for the %mask parameter (Used in testing)."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "experimental_debug_variable_locations",
            .string = "--experimental-debug-variable-locations",
            .descr = &.{"Use experimental new value-tracking variable locations"},
        },
        .{
            .name = "expose_ppc_andi_glue_bug",
            .string = "--expose-ppc-andi-glue-bug",
            .descr = &.{"expose the ANDI glue bug on PPC"},
        },
        .{
            .name = "ext_tsp_apply_without_profile",
            .string = "--ext-tsp-apply-without-profile",
            .descr = &.{"Whether to apply ext-tsp placement for instances w/o profile"},
        },
        .{
            .name = "extra_vectorizer_passes",
            .string = "--extra-vectorizer-passes",
            .descr = &.{"Run cleanup optimization passes after vectorization"},
        },
        .{
            .name = "extract_blocks_erase_funcs",
            .string = "--extract-blocks-erase-funcs",
            .descr = &.{"Erase the existing functions"},
        },
        .{
            .name = "extract_blocks_file",
            .string = "--extract-blocks-file",
            .descr = &.{"A file containing list of basic blocks to extract"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "extract_cutoff",
            .string = "--extract-cutoff",
            .descr = &.{"Cutoff for generating \"extract\" instructions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "extract_needand",
            .string = "--extract-needand",
            .descr = &.{"Require & in extract patterns"},
        },
        .{
            .name = "extract_nosr0",
            .string = "--extract-nosr0",
            .descr = &.{"No extract instruction with offset 0"},
        },
        .{
            .name = "fast_cluster_threshold",
            .string = "--fast-cluster-threshold",
            .descr = &.{"The threshold for fast cluster"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "fast_isel",
            .string = "--fast-isel",
            .descr = &.{"Enable the \"fast\" instruction selector"},
        },
        .{
            .name = "fast_isel_abort",
            .string = "--fast-isel-abort",
            .descr = &.{"Enable abort calls when \"fast\" instruction selection fails to lower an instruction: 0 disable the abort, 1 will abort but for args, calls and terminators, 2 will also abort for argument lowering, and 3 will never fallback to SelectionDAG."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "fast_isel_report_on_fallback",
            .string = "--fast-isel-report-on-fallback",
            .descr = &.{"Emit a diagnostic when \"fast\" instruction selection falls back to SelectionDAG."},
        },
        .{
            .name = "fatal_warnings",
            .string = "--fatal-warnings",
            .descr = &.{"Treat warnings as errors"},
        },
        .{
            .name = "ffast_math",
            .string = "--ffast-math",
            .descr = &.{"Enable Fast Math processing"},
        },
        .{
            .name = "filetype",
            .string = "--filetype",
            .descr = &.{"Choose a file type (not all types are supported by all targets):"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { @"asm" = 0, obj = 1, null = 2 }) },
        },
        .{
            .name = "filter_passes",
            .string = "--filter-passes",
            .descr = &.{"Only consider IR changes for passes whose names match the specified value. No-op without -print-changed"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "filter_print_funcs",
            .string = "--filter-print-funcs",
            .descr = &.{"Only print IR for functions whose name match this for all print-[before|after][-all] options"},
            .tag = .{ .optional_field = .repeatable_string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const []const u8) },
        },
        .{
            .name = "fixup_allow_gcptr_in_csr",
            .string = "--fixup-allow-gcptr-in-csr",
            .descr = &.{"Allow passing GC Pointer arguments in callee saved registers"},
        },
        .{
            .name = "fixup_byte_word_insts",
            .string = "--fixup-byte-word-insts",
            .descr = &.{"Change byte and word instructions to larger sizes"},
        },
        .{
            .name = "fixup_max_csr_statepoints",
            .string = "--fixup-max-csr-statepoints",
            .descr = &.{"Max number of statepoints allowed to pass GC Ptrs in registers"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "fixup_scs_enable_copy_propagation",
            .string = "--fixup-scs-enable-copy-propagation",
            .descr = &.{"Enable simple copy propagation during register reloading"},
        },
        .{
            .name = "fixup_scs_extend_slot_size",
            .string = "--fixup-scs-extend-slot-size",
            .descr = &.{"Allow spill in spill slot of greater size than register size"},
        },
        .{
            .name = "flat_loop_tripcount_threshold",
            .string = "--flat-loop-tripcount-threshold",
            .descr = &.{"If the runtime tripcount for the loop is lower than the threshold, the loop is considered as flat and will be less aggressively unrolled."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "flattened_profile_used",
            .string = "--flattened-profile-used",
            .descr = &.{"Indicate the sample profile being used is flattened, i.e., no inline hierachy exists in the profile"},
        },
        .{
            .name = "float_abi",
            .string = "--float-abi",
            .descr = &.{"Choose float ABI type"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { default = 0, soft = 1, hard = 2 }) },
        },
        .{
            .name = "float2int_max_integer_bw",
            .string = "--float2int-max-integer-bw",
            .descr = &.{"Max integer bitwidth to consider in float2int(default=64)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "force_attribute",
            .string = "--force-attribute",
            .descr = &.{"Add an attribute to a function. This should be a pair of 'function-name:attribute-name', for example -force-attribute=foo:noinline. This option can be specified multiple times."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "force_chr",
            .string = "--force-chr",
            .descr = &.{"Apply CHR for all functions"},
        },
        .{
            .name = "force_dwarf_frame_section",
            .string = "--force-dwarf-frame-section",
            .descr = &.{"Always emit a debug frame section."},
        },
        .{
            .name = "force_fast_cluster",
            .string = "--force-fast-cluster",
            .descr = &.{"Switch to fast cluster algorithm with the lost of some fusion opportunities"},
        },
        .{
            .name = "force_function_specialization",
            .string = "--force-function-specialization",
            .descr = &.{"Force function specialization for every call site with a constant argument"},
        },
        .{
            .name = "force_fuse_matrix",
            .string = "--force-fuse-matrix",
            .descr = &.{"Force matrix instruction fusion even if not profitable."},
        },
        .{
            .name = "force_hardware_loop_guard",
            .string = "--force-hardware-loop-guard",
            .descr = &.{"Force generation of loop guard intrinsic"},
        },
        .{
            .name = "force_hardware_loop_phi",
            .string = "--force-hardware-loop-phi",
            .descr = &.{"Force hardware loop counter to be updated through a phi"},
        },
        .{
            .name = "force_hardware_loops",
            .string = "--force-hardware-loops",
            .descr = &.{"Force hardware loops intrinsics to be inserted"},
        },
        .{
            .name = "force_hvx_float",
            .string = "--force-hvx-float",
            .descr = &.{"Enable auto-vectorization of floatint point types on v68."},
        },
        .{
            .name = "force_import_all",
            .string = "--force-import-all",
            .descr = &.{"Import functions with noinline attribute"},
        },
        .{
            .name = "force_instr_ref_livedebugvalues",
            .string = "--force-instr-ref-livedebugvalues",
            .descr = &.{"Use instruction-ref based LiveDebugValues with normal DBG_VALUE inputs"},
        },
        .{
            .name = "force_legal_indexing",
            .string = "--force-legal-indexing",
            .descr = &.{"Force all indexed operations to be legal for the GlobalISel combiner"},
        },
        .{
            .name = "force_loop_cold_block",
            .string = "--force-loop-cold-block",
            .descr = &.{"Force outlining cold blocks from loops."},
        },
        .{
            .name = "force_mips_long_branch",
            .string = "--force-mips-long-branch",
            .descr = &.{"MIPS: Expand all branches to long format."},
        },
        .{
            .name = "force_nested_hardware_loop",
            .string = "--force-nested-hardware-loop",
            .descr = &.{"Force allowance of nested hardware loops"},
        },
        .{
            .name = "force_ordered_reductions",
            .string = "--force-ordered-reductions",
            .descr = &.{"Enable the vectorisation of loops with in-order (strict) FP reductions"},
        },
        .{
            .name = "force_pgso",
            .string = "--force-pgso",
            .descr = &.{"Force the (profiled-guided) size optimizations. "},
        },
        .{
            .name = "force_precise_rotation_cost",
            .string = "--force-precise-rotation-cost",
            .descr = &.{"Force the use of precise cost loop rotation strategy."},
        },
        .{
            .name = "force_remove_attribute",
            .string = "--force-remove-attribute",
            .descr = &.{"Remove an attribute from a function. This should be a pair of 'function-name:attribute-name', for example -force-remove-attribute=foo:noinline. This option can be specified multiple times."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "force_split_store",
            .string = "--force-split-store",
            .descr = &.{"Force store splitting no matter what the target query says."},
        },
        .{
            .name = "force_streaming_compatible_sve",
            .string = "--force-streaming-compatible-sve",
            .descr = &.{""},
        },
        .{
            .name = "force_summary_edges_cold",
            .string = "--force-summary-edges-cold",
            .descr = &.{"Force all edges in the function summary to cold"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, @"all-non-critical" = 1, all = 2 }) },
        },
        .{
            .name = "force_target_instruction_cost",
            .string = "--force-target-instruction-cost",
            .descr = &.{"A flag that overrides the target's expected cost for an instruction to a single constant value. Mostly useful for getting consistent testing."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "force_target_max_scalar_interleave",
            .string = "--force-target-max-scalar-interleave",
            .descr = &.{"A flag that overrides the target's max interleave factor for scalar loops."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "force_target_max_vector_interleave",
            .string = "--force-target-max-vector-interleave",
            .descr = &.{"A flag that overrides the target's max interleave factor for vectorized loops."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "force_target_num_scalar_regs",
            .string = "--force-target-num-scalar-regs",
            .descr = &.{"A flag that overrides the target's number of scalar registers."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "force_target_num_vector_regs",
            .string = "--force-target-num-vector-regs",
            .descr = &.{"A flag that overrides the target's number of vector registers."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "force_target_supports_scalable_vectors",
            .string = "--force-target-supports-scalable-vectors",
            .descr = &.{"Pretend that scalable vectors are supported, even if the target does not support them. This flag should only be used for testing."},
        },
        .{
            .name = "force_vector_interleave",
            .string = "--force-vector-interleave",
            .descr = &.{"Sets the vectorization interleave count. Zero is autoselect."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "force_vector_width",
            .string = "--force-vector-width",
            .descr = &.{"Sets the SIMD width. Zero is autoselect."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "force_widen_divrem_via_safe_divisor",
            .string = "--force-widen-divrem-via-safe-divisor",
            .descr = &.{"Override cost based safe divisor widening for div/rem instructions"},
        },
        .{
            .name = "forget_scev_loop_unroll",
            .string = "--forget-scev-loop-unroll",
            .descr = &.{"Forget everything in SCEV when doing LoopUnroll, instead of just the current top-most loop. This is sometimes preferred to reduce compile time."},
        },
        .{
            .name = "forward_switch_cond",
            .string = "--forward-switch-cond",
            .descr = &.{"Forward switch condition to phi ops (default = false)"},
        },
        .{
            .name = "fp_contract",
            .string = "--fp-contract",
            .descr = &.{"Enable aggressive formation of fused FP ops"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { fast = 0, on = 1, off = 2 }) },
        },
        .{
            .name = "frame_helper_size_threshold",
            .string = "--frame-helper-size-threshold",
            .descr = &.{"The minimum number of instructions that are outlined in a frame helper (default = 2)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "frame_pointer",
            .string = "--frame-pointer",
            .descr = &.{"Specify frame pointer elimination optimization"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { all = 0, @"non-leaf" = 1, none = 2 }) },
        },
        .{
            .name = "freeze_loop_unswitch_cond",
            .string = "--freeze-loop-unswitch-cond",
            .descr = &.{"If enabled, the freeze instruction will be added to condition of loop unswitch to prevent miscompilation."},
        },
        .{
            .name = "fs_no_final_discrim",
            .string = "--fs-no-final-discrim",
            .descr = &.{"Do not insert FS-AFDO discriminators before emit."},
        },
        .{
            .name = "fs_profile_debug_bw_threshold",
            .string = "--fs-profile-debug-bw-threshold",
            .descr = &.{"Only show debug message if the source branch weight is greater  than this value."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "fs_profile_debug_prob_diff_threshold",
            .string = "--fs-profile-debug-prob-diff-threshold",
            .descr = &.{"Only show debug message if the branch probility is greater than this value (in percentage)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "fs_profile_file",
            .string = "--fs-profile-file",
            .descr = &.{"Flow Sensitive profile file name."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "fs_remapping_file",
            .string = "--fs-remapping-file",
            .descr = &.{"Flow Sensitive profile remapping file name."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "fs_viewbfi_after",
            .string = "--fs-viewbfi-after",
            .descr = &.{"View BFI after MIR loader"},
        },
        .{
            .name = "fs_viewbfi_before",
            .string = "--fs-viewbfi-before",
            .descr = &.{"View BFI before MIR loader"},
        },
        .{
            .name = "func_specialization_avg_iters_cost",
            .string = "--func-specialization-avg-iters-cost",
            .descr = &.{"Average loop iteration count cost"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "func_specialization_max_clones",
            .string = "--func-specialization-max-clones",
            .descr = &.{"The maximum number of clones allowed for a single function specialization"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "func_specialization_max_iters",
            .string = "--func-specialization-max-iters",
            .descr = &.{"The maximum number of iterations function specialization is run"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "func_specialization_on_address",
            .string = "--func-specialization-on-address",
            .descr = &.{"Enable function specialization on the address of global values"},
        },
        .{
            .name = "func_specialization_size_threshold",
            .string = "--func-specialization-size-threshold",
            .descr = &.{"Don't specialize functions that have less than this theshold number of instructions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "function_sections",
            .string = "--function-sections",
            .descr = &.{"Emit functions into separate sections"},
        },
        .{
            .name = "function_specialization_for_literal_constant",
            .string = "--function-specialization-for-literal-constant",
            .descr = &.{"Enable specialization of functions that take a literal constant as an argument."},
        },
        .{
            .name = "fuse_matrix",
            .string = "--fuse-matrix",
            .descr = &.{"Enable/disable fusing matrix instructions."},
        },
        .{
            .name = "fuse_matrix_tile_size",
            .string = "--fuse-matrix-tile-size",
            .descr = &.{"Tile size for matrix instruction fusion using square-shaped tiles."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "fuse_matrix_use_loops",
            .string = "--fuse-matrix-use-loops",
            .descr = &.{"Generate loop nest for tiling."},
        },
        .{
            .name = "gcov_atomic_counter",
            .string = "--gcov-atomic-counter",
            .descr = &.{"Make counter updates atomic"},
        },
        .{
            .name = "generate_arange_section",
            .string = "--generate-arange-section",
            .descr = &.{"Generate dwarf aranges"},
        },
        .{
            .name = "generate_merged_base_profiles",
            .string = "--generate-merged-base-profiles",
            .descr = &.{"When generating nested context-sensitive profiles, always generate extra base profile for function with all its context profiles merged into it."},
        },
        .{
            .name = "generate_type_units",
            .string = "--generate-type-units",
            .descr = &.{"Generate DWARF4 type units."},
        },
        .{
            .name = "global_isel",
            .string = "--global-isel",
            .descr = &.{"Enable the \"global\" instruction selector"},
        },
        .{
            .name = "global_isel_abort",
            .string = "--global-isel-abort",
            .descr = &.{"Enable abort calls when \"global\" instruction selection fails to lower/select an instruction"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { @"0" = 0, @"1" = 1, @"2" = 2 }) },
        },
        .{
            .name = "global_merge_group_by_use",
            .string = "--global-merge-group-by-use",
            .descr = &.{"Improve global merge pass to look at uses"},
        },
        .{
            .name = "global_merge_ignore_single_use",
            .string = "--global-merge-ignore-single-use",
            .descr = &.{"Improve global merge pass to ignore globals only used alone"},
        },
        .{
            .name = "global_merge_max_offset",
            .string = "--global-merge-max-offset",
            .descr = &.{"Set maximum offset for global merge pass"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "global_merge_on_const",
            .string = "--global-merge-on-const",
            .descr = &.{"Enable global merge pass on constants"},
        },
        .{
            .name = "global_merge_on_external",
            .string = "--global-merge-on-external",
            .descr = &.{"Enable global merge pass on external linkage"},
        },
        .{
            .name = "gpsize",
            .string = "--gpsize",
            .descr = &.{"Global Pointer Addressing Size.  The default size is 8."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "greedy_regclass_priority_trumps_globalness",
            .string = "--greedy-regclass-priority-trumps-globalness",
            .descr = &.{"Change the greedy register allocator's live range priority calculation to make the AllocationPriority of the register class more important then whether the range is global"},
        },
        .{
            .name = "greedy_reverse_local_assignment",
            .string = "--greedy-reverse-local-assignment",
            .descr = &.{"Reverse allocation order of local live ranges, such that shorter local live ranges will tend to be allocated first"},
        },
        .{
            .name = "grow_region_complexity_budget",
            .string = "--grow-region-complexity-budget",
            .descr = &.{"growRegion() does not scale with the number of BB edges, so limit its budget and bail out once we reach the limit."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "guard_widening_widen_branch_guards",
            .string = "--guard-widening-widen-branch-guards",
            .descr = &.{"Whether or not we should widen guards  expressed as branches by widenable conditions"},
        },
        .{
            .name = "guards_predicate_pass_branch_weight",
            .string = "--guards-predicate-pass-branch-weight",
            .descr = &.{"The probability of a guard failing is assumed to be the reciprocal of this value (default = 1 << 20)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "gvn_add_phi_translation",
            .string = "--gvn-add-phi-translation",
            .descr = &.{"Enable phi-translation of add instructions"},
        },
        .{
            .name = "gvn_hoist_max_bbs",
            .string = "--gvn-hoist-max-bbs",
            .descr = &.{"Max number of basic blocks on the path between hoisting locations (default = 4, unlimited = -1)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "gvn_hoist_max_chain_length",
            .string = "--gvn-hoist-max-chain-length",
            .descr = &.{"Maximum length of dependent chains to hoist (default = 10, unlimited = -1)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "gvn_hoist_max_depth",
            .string = "--gvn-hoist-max-depth",
            .descr = &.{"Hoist instructions from the beginning of the BB up to the maximum specified depth (default = 100, unlimited = -1)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "gvn_max_block_speculations",
            .string = "--gvn-max-block-speculations",
            .descr = &.{"Max number of blocks we're willing to speculate on (and recurse into) when deducing if a value is fully available or not in GVN (default = 600)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "gvn_max_hoisted",
            .string = "--gvn-max-hoisted",
            .descr = &.{"Max number of instructions to hoist (default unlimited = -1)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "gvn_max_num_deps",
            .string = "--gvn-max-num-deps",
            .descr = &.{"Max number of dependences to attempt Load PRE (default = 100)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "gvn_max_num_visited_insts",
            .string = "--gvn-max-num-visited-insts",
            .descr = &.{"Max number of visited instructions when trying to find dominating value of select dependency (default = 100)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hardware_loop_counter_bitwidth",
            .string = "--hardware-loop-counter-bitwidth",
            .descr = &.{"Set the loop counter bitwidth"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hardware_loop_decrement",
            .string = "--hardware-loop-decrement",
            .descr = &.{"Set the loop decrement value"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hash_based_counter_split",
            .string = "--hash-based-counter-split",
            .descr = &.{"Rename counter variable of a comdat function based on cfg hash"},
        },
        .{
            .name = "help",
            .string = "--help",
            .descr = &.{"Display available options (--help-hidden for more)"},
        },
        .{
            .name = "help_hidden",
            .string = "--help-hidden",
            .descr = &.{"Display all available options"},
        },
        .{
            .name = "help_list",
            .string = "--help-list",
            .descr = &.{"Display list of available options (--help-list-hidden for more)"},
        },
        .{
            .name = "help_list_hidden",
            .string = "--help-list-hidden",
            .descr = &.{"Display list of all available options"},
        },
        .{
            .name = "hexagon_align_loads",
            .string = "--hexagon-align-loads",
            .descr = &.{"Rewrite unaligned loads as a pair of aligned loads"},
        },
        .{
            .name = "hexagon_amode_growth_limit",
            .string = "--hexagon-amode-growth-limit",
            .descr = &.{"Code growth limit for address mode optimization"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_autohvx",
            .string = "--hexagon-autohvx",
            .descr = &.{"Enable loop vectorizer for HVX"},
        },
        .{
            .name = "hexagon_bit",
            .string = "--hexagon-bit",
            .descr = &.{"Bit simplification"},
        },
        .{
            .name = "hexagon_cext",
            .string = "--hexagon-cext",
            .descr = &.{"Enable Hexagon constant-extender optimization"},
        },
        .{
            .name = "hexagon_cext_limit",
            .string = "--hexagon-cext-limit",
            .descr = &.{"Maximum number of replacements"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_cext_threshold",
            .string = "--hexagon-cext-threshold",
            .descr = &.{"Minimum number of extenders to trigger replacement"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_check_bank_conflict",
            .string = "--hexagon-check-bank-conflict",
            .descr = &.{"Enable checking for cache bank conflicts"},
        },
        .{
            .name = "hexagon_commgep",
            .string = "--hexagon-commgep",
            .descr = &.{"Enable commoning of GEP instructions"},
        },
        .{
            .name = "hexagon_disable_args_min_alignment",
            .string = "--hexagon-disable-args-min-alignment",
            .descr = &.{"Disable minimum alignment of 1 for arguments passed by value on stack"},
        },
        .{
            .name = "hexagon_eif",
            .string = "--hexagon-eif",
            .descr = &.{"Enable early if-conversion"},
        },
        .{
            .name = "hexagon_emit_jt_text",
            .string = "--hexagon-emit-jt-text",
            .descr = &.{"Emit hexagon jump tables in function section"},
        },
        .{
            .name = "hexagon_emit_jump_tables",
            .string = "--hexagon-emit-jump-tables",
            .descr = &.{"Control jump table emission on Hexagon target"},
        },
        .{
            .name = "hexagon_emit_lookup_tables",
            .string = "--hexagon-emit-lookup-tables",
            .descr = &.{"Control lookup table emission on Hexagon target"},
        },
        .{
            .name = "hexagon_emit_lut_text",
            .string = "--hexagon-emit-lut-text",
            .descr = &.{"Emit hexagon lookup tables in function section"},
        },
        .{
            .name = "hexagon_enable_branch_prediction",
            .string = "--hexagon-enable-branch-prediction",
            .descr = &.{"Enable branch prediction"},
        },
        .{
            .name = "hexagon_expand_condsets",
            .string = "--hexagon-expand-condsets",
            .descr = &.{"Early expansion of MUX"},
        },
        .{
            .name = "hexagon_extract",
            .string = "--hexagon-extract",
            .descr = &.{"Generate \"extract\" instructions"},
        },
        .{
            .name = "hexagon_fp_elim",
            .string = "--hexagon-fp-elim",
            .descr = &.{"Refrain from using FP whenever possible"},
        },
        .{
            .name = "hexagon_frame_index_reuse_limit",
            .string = "--hexagon-frame-index-reuse-limit",
            .descr = &.{"Limit on the number of reused registers in frame index elimination"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_frame_index_search_range",
            .string = "--hexagon-frame-index-search-range",
            .descr = &.{"Limit on instruction search range in frame index elimination"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_gen_mux_threshold",
            .string = "--hexagon-gen-mux-threshold",
            .descr = &.{"Minimum distance between predicate definition and farther of the two predicated uses"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_gen_pred",
            .string = "--hexagon-gen-pred",
            .descr = &.{"Enable conversion of arithmetic operations to predicate instructions"},
        },
        .{
            .name = "hexagon_hvx_widen",
            .string = "--hexagon-hvx-widen",
            .descr = &.{"Lower threshold (in bytes) for widening to HVX vectors"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_hwloop_preheader",
            .string = "--hexagon-hwloop-preheader",
            .descr = &.{"Add a preheader to a hardware loop if one doesn't exist"},
        },
        .{
            .name = "hexagon_initial_cfg_cleanup",
            .string = "--hexagon-initial-cfg-cleanup",
            .descr = &.{"Simplify the CFG after atomic expansion pass"},
        },
        .{
            .name = "hexagon_insert",
            .string = "--hexagon-insert",
            .descr = &.{"Generate \"insert\" instructions"},
        },
        .{
            .name = "hexagon_instsimplify",
            .string = "--hexagon-instsimplify",
            .descr = &.{"Enable instsimplify"},
        },
        .{
            .name = "hexagon_isel_su",
            .string = "--hexagon-isel-su",
            .descr = &.{"Enable checking of SDNode's single-use status"},
        },
        .{
            .name = "hexagon_long_calls",
            .string = "--hexagon-long-calls",
            .descr = &.{"If present, forces/disables the use of long calls"},
        },
        .{
            .name = "hexagon_loop_prefetch",
            .string = "--hexagon-loop-prefetch",
            .descr = &.{"Enable loop data prefetch on Hexagon"},
        },
        .{
            .name = "hexagon_loop_range",
            .string = "--hexagon-loop-range",
            .descr = &.{"Restrict range of loopN instructions (testing only)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_loop_resched",
            .string = "--hexagon-loop-resched",
            .descr = &.{"Loop rescheduling"},
        },
        .{
            .name = "hexagon_masked_vmem",
            .string = "--hexagon-masked-vmem",
            .descr = &.{"Enable masked loads/stores for HVX"},
        },
        .{
            .name = "hexagon_mux",
            .string = "--hexagon-mux",
            .descr = &.{"Enable converting conditional transfers into MUX instructions"},
        },
        .{
            .name = "hexagon_noopt",
            .string = "--hexagon-noopt",
            .descr = &.{"Disable backend optimizations"},
        },
        .{
            .name = "hexagon_opt_spill",
            .string = "--hexagon-opt-spill",
            .descr = &.{"Optimize spill slots"},
        },
        .{
            .name = "hexagon_opt_vextract",
            .string = "--hexagon-opt-vextract",
            .descr = &.{"Enable vextract optimization"},
        },
        .{
            .name = "hexagon_packetize_volatiles",
            .string = "--hexagon-packetize-volatiles",
            .descr = &.{"Allow non-solo packetization of volatile memory references"},
        },
        .{
            .name = "hexagon_pred_calls",
            .string = "--hexagon-pred-calls",
            .descr = &.{"Consider calls to be predicable"},
        },
        .{
            .name = "hexagon_sched_inline_asm",
            .string = "--hexagon-sched-inline-asm",
            .descr = &.{"Do not consider inline-asm a scheduling/packetization boundary."},
        },
        .{
            .name = "hexagon_shrink_frame",
            .string = "--hexagon-shrink-frame",
            .descr = &.{"Enable stack frame shrink wrapping"},
        },
        .{
            .name = "hexagon_small_data_threshold",
            .string = "--hexagon-small-data-threshold",
            .descr = &.{"The maximum size of an object in the sdata section"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_statics_in_small_data",
            .string = "--hexagon-statics-in-small-data",
            .descr = &.{"Allow static variables in .sdata"},
        },
        .{
            .name = "hexagon_subreg_liveness",
            .string = "--hexagon-subreg-liveness",
            .descr = &.{"Enable subregister liveness tracking for Hexagon"},
        },
        .{
            .name = "hexagon_vector_combine",
            .string = "--hexagon-vector-combine",
            .descr = &.{"Enable HVX vector combining"},
        },
        .{
            .name = "hexagon_vextract_threshold",
            .string = "--hexagon-vextract-threshold",
            .descr = &.{"Threshold for triggering vextract replacement"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexagon_vlcr_iteration_lim",
            .string = "--hexagon-vlcr-iteration-lim",
            .descr = &.{"Maximum distance of loop carried dependences that are handled"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexbit_bitsplit",
            .string = "--hexbit-bitsplit",
            .descr = &.{"Generate bitsplit instructions"},
        },
        .{
            .name = "hexbit_extract",
            .string = "--hexbit-extract",
            .descr = &.{"Generate extract instructions"},
        },
        .{
            .name = "hexbit_keep_tied",
            .string = "--hexbit-keep-tied",
            .descr = &.{"Preserve subregisters in tied operands"},
        },
        .{
            .name = "hexbit_max_bitsplit",
            .string = "--hexbit-max-bitsplit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexbit_max_extract",
            .string = "--hexbit-max-extract",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hexbit_registerset_limit",
            .string = "--hexbit-registerset-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hints_allow_reordering",
            .string = "--hints-allow-reordering",
            .descr = &.{"Allow enabling loop hints to reorder FP operations during vectorization."},
        },
        .{
            .name = "hlir_simplify_limit",
            .string = "--hlir-simplify-limit",
            .descr = &.{"Maximum number of simplification steps in HLIR"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hoist_cheap_insts",
            .string = "--hoist-cheap-insts",
            .descr = &.{"MachineLICM should hoist even cheap instructions"},
        },
        .{
            .name = "hoist_common_insts",
            .string = "--hoist-common-insts",
            .descr = &.{"hoist common instructions (default = false)"},
        },
        .{
            .name = "hoist_const_stores",
            .string = "--hoist-const-stores",
            .descr = &.{"Hoist invariant stores"},
        },
        .{
            .name = "homogeneous_prolog_epilog",
            .string = "--homogeneous-prolog-epilog",
            .descr = &.{"Emit homogeneous prologue and epilogue for the size optimization (default = off)"},
        },
        .{
            .name = "hot_callsite_rel_freq",
            .string = "--hot-callsite-rel-freq",
            .descr = &.{"Minimum block frequency, expressed as a multiple of caller's entry frequency, for a callsite to be hot in the absence of profile information."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hot_callsite_threshold",
            .string = "--hot-callsite-threshold",
            .descr = &.{"Threshold for hot callsites "},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hot_cold_split",
            .string = "--hot-cold-split",
            .descr = &.{"Enable hot-cold splitting pass"},
        },
        .{
            .name = "hot_cold_static_analysis",
            .string = "--hot-cold-static-analysis",
            .descr = &.{""},
        },
        .{
            .name = "hotcoldsplit_cold_section_name",
            .string = "--hotcoldsplit-cold-section-name",
            .descr = &.{"Name for the section containing cold functions extracted by hot-cold splitting."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "hotcoldsplit_max_params",
            .string = "--hotcoldsplit-max-params",
            .descr = &.{"Maximum number of parameters for a split function"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hotcoldsplit_threshold",
            .string = "--hotcoldsplit-threshold",
            .descr = &.{"Base penalty for splitting cold code (as a multiple of TCC_Basic)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hsdr_no_mem",
            .string = "--hsdr-no-mem",
            .descr = &.{"Do not split loads or stores"},
        },
        .{
            .name = "hsdr_split_all",
            .string = "--hsdr-split-all",
            .descr = &.{"Split all partitions"},
        },
        .{
            .name = "huge_size_for_split",
            .string = "--huge-size-for-split",
            .descr = &.{"A threshold of live range size which may cause high compile time cost in global splitting."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hwasan_experimental_use_page_aliases",
            .string = "--hwasan-experimental-use-page-aliases",
            .descr = &.{"Use page aliasing in HWASan"},
        },
        .{
            .name = "hwasan_generate_tags_with_calls",
            .string = "--hwasan-generate-tags-with-calls",
            .descr = &.{"generate new tags with runtime library calls"},
        },
        .{
            .name = "hwasan_globals",
            .string = "--hwasan-globals",
            .descr = &.{"Instrument globals"},
        },
        .{
            .name = "hwasan_inline_all_checks",
            .string = "--hwasan-inline-all-checks",
            .descr = &.{"inline all checks"},
        },
        .{
            .name = "hwasan_instrument_atomics",
            .string = "--hwasan-instrument-atomics",
            .descr = &.{"instrument atomic instructions (rmw, cmpxchg)"},
        },
        .{
            .name = "hwasan_instrument_byval",
            .string = "--hwasan-instrument-byval",
            .descr = &.{"instrument byval arguments"},
        },
        .{
            .name = "hwasan_instrument_landing_pads",
            .string = "--hwasan-instrument-landing-pads",
            .descr = &.{"instrument landing pads"},
        },
        .{
            .name = "hwasan_instrument_mem_intrinsics",
            .string = "--hwasan-instrument-mem-intrinsics",
            .descr = &.{"instrument memory intrinsics"},
        },
        .{
            .name = "hwasan_instrument_personality_functions",
            .string = "--hwasan-instrument-personality-functions",
            .descr = &.{"instrument personality functions"},
        },
        .{
            .name = "hwasan_instrument_reads",
            .string = "--hwasan-instrument-reads",
            .descr = &.{"instrument read instructions"},
        },
        .{
            .name = "hwasan_instrument_stack",
            .string = "--hwasan-instrument-stack",
            .descr = &.{"instrument stack (allocas)"},
        },
        .{
            .name = "hwasan_instrument_with_calls",
            .string = "--hwasan-instrument-with-calls",
            .descr = &.{"instrument reads and writes with callbacks"},
        },
        .{
            .name = "hwasan_instrument_writes",
            .string = "--hwasan-instrument-writes",
            .descr = &.{"instrument write instructions"},
        },
        .{
            .name = "hwasan_kernel",
            .string = "--hwasan-kernel",
            .descr = &.{"Enable KernelHWAddressSanitizer instrumentation"},
        },
        .{
            .name = "hwasan_kernel_mem_intrinsic_prefix",
            .string = "--hwasan-kernel-mem-intrinsic-prefix",
            .descr = &.{"Use prefix for memory intrinsics in KASAN mode"},
        },
        .{
            .name = "hwasan_mapping_offset",
            .string = "--hwasan-mapping-offset",
            .descr = &.{"HWASan shadow mapping offset [EXPERIMENTAL]"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hwasan_match_all_tag",
            .string = "--hwasan-match-all-tag",
            .descr = &.{"don't report bad accesses via pointers with this tag"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "hwasan_memory_access_callback_prefix",
            .string = "--hwasan-memory-access-callback-prefix",
            .descr = &.{"Prefix for memory access callbacks"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "hwasan_record_stack_history",
            .string = "--hwasan-record-stack-history",
            .descr = &.{"Record stack frames with tagged allocations in a thread-local ring buffer"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, instr = 1, libcall = 2 }) },
        },
        .{
            .name = "hwasan_recover",
            .string = "--hwasan-recover",
            .descr = &.{"Enable recovery mode (continue-after-error)."},
        },
        .{
            .name = "hwasan_uar_retag_to_zero",
            .string = "--hwasan-uar-retag-to-zero",
            .descr = &.{"Clear alloca tags before returning from the function to allow non-instrumented and instrumented function calls mix. When set to false, allocas are retagged before returning from the function to detect use after return."},
        },
        .{
            .name = "hwasan_use_after_scope",
            .string = "--hwasan-use-after-scope",
            .descr = &.{"detect use after scope within function"},
        },
        .{
            .name = "hwasan_use_short_granules",
            .string = "--hwasan-use-short-granules",
            .descr = &.{"use short granules in allocas and outlined checks"},
        },
        .{
            .name = "hwasan_use_stack_safety",
            .string = "--hwasan-use-stack-safety",
            .descr = &.{"Use Stack Safety analysis results"},
        },
        .{
            .name = "hwasan_with_ifunc",
            .string = "--hwasan-with-ifunc",
            .descr = &.{"Access dynamic shadow through an ifunc global on platforms that support this"},
        },
        .{
            .name = "hwasan_with_tls",
            .string = "--hwasan-with-tls",
            .descr = &.{"Access dynamic shadow through an thread-local pointer on platforms that support this"},
        },
        .{
            .name = "hwloop_spec_preheader",
            .string = "--hwloop-spec-preheader",
            .descr = &.{"Allow speculation of preheader instructions"},
        },
        .{
            .name = "icp_call_only",
            .string = "--icp-call-only",
            .descr = &.{"Run indirect-call promotion for call instructions only"},
        },
        .{
            .name = "icp_csskip",
            .string = "--icp-csskip",
            .descr = &.{"Skip Callsite up to this number for this compilation"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "icp_cutoff",
            .string = "--icp-cutoff",
            .descr = &.{"Max number of promotions for this compilation"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "icp_dumpafter",
            .string = "--icp-dumpafter",
            .descr = &.{"Dump IR after transformation happens"},
        },
        .{
            .name = "icp_invoke_only",
            .string = "--icp-invoke-only",
            .descr = &.{"Run indirect-call promotion for invoke instruction only"},
        },
        .{
            .name = "icp_lto",
            .string = "--icp-lto",
            .descr = &.{"Run indirect-call promotion in LTO mode"},
        },
        .{
            .name = "icp_max_annotations",
            .string = "--icp-max-annotations",
            .descr = &.{"Max number of annotations for a single indirect call callsite"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "icp_max_prom",
            .string = "--icp-max-prom",
            .descr = &.{"Max number of promotions for a single indirect call callsite"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "icp_remaining_percent_threshold",
            .string = "--icp-remaining-percent-threshold",
            .descr = &.{"The percentage threshold against remaining unpromoted indirect call count for the promotion"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "icp_samplepgo",
            .string = "--icp-samplepgo",
            .descr = &.{"Run indirect-call promotion in SamplePGO mode"},
        },
        .{
            .name = "icp_total_percent_threshold",
            .string = "--icp-total-percent-threshold",
            .descr = &.{"The percentage threshold against total count for the promotion"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ifcvt_branch_fold",
            .string = "--ifcvt-branch-fold",
            .descr = &.{""},
        },
        .{
            .name = "ifcvt_fn_start",
            .string = "--ifcvt-fn-start",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ifcvt_fn_stop",
            .string = "--ifcvt-fn-stop",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ifcvt_limit",
            .string = "--ifcvt-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ignore_bb_reg_pressure",
            .string = "--ignore-bb-reg-pressure",
            .descr = &.{""},
        },
        .{
            .name = "ignore_tti_inline_compatible",
            .string = "--ignore-tti-inline-compatible",
            .descr = &.{"Ignore TTI attributes compatibility check between callee/caller during inline cost calculation"},
        },
        .{
            .name = "ignore_xcoff_visibility",
            .string = "--ignore-xcoff-visibility",
            .descr = &.{"Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file"},
        },
        .{
            .name = "imp_null_check_page_size",
            .string = "--imp-null-check-page-size",
            .descr = &.{"The page size of the target in bytes"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "imp_null_max_insts_to_consider",
            .string = "--imp-null-max-insts-to-consider",
            .descr = &.{"The max number of instructions to consider hoisting loads over (the algorithm is quadratic over this number)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "import_all_index",
            .string = "--import-all-index",
            .descr = &.{"Import all external functions in index."},
        },
        .{
            .name = "import_cold_multiplier",
            .string = "--import-cold-multiplier",
            .descr = &.{"Multiply the `import-instr-limit` threshold for cold callsites"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "import_constants_with_refs",
            .string = "--import-constants-with-refs",
            .descr = &.{"Import constant global variables with references"},
        },
        .{
            .name = "import_critical_multiplier",
            .string = "--import-critical-multiplier",
            .descr = &.{"Multiply the `import-instr-limit` threshold for critical callsites"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "import_cutoff",
            .string = "--import-cutoff",
            .descr = &.{"Only import first N functions if N>=0 (default -1)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "import_full_type_definitions",
            .string = "--import-full-type-definitions",
            .descr = &.{"Import full type definitions for ThinLTO."},
        },
        .{
            .name = "import_hot_evolution_factor",
            .string = "--import-hot-evolution-factor",
            .descr = &.{"As we import functions called from hot callsite, multiply the `import-instr-limit` threshold by this factor before processing newly imported functions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "import_hot_multiplier",
            .string = "--import-hot-multiplier",
            .descr = &.{"Multiply the `import-instr-limit` threshold for hot callsites"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "import_instr_evolution_factor",
            .string = "--import-instr-evolution-factor",
            .descr = &.{"As we import functions, multiply the `import-instr-limit` threshold by this factor before processing newly imported functions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "import_instr_limit",
            .string = "--import-instr-limit",
            .descr = &.{"Only import functions with less than N instructions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "incremental_linker_compatible",
            .string = "--incremental-linker-compatible",
            .descr = &.{"When used with filetype=obj, emit an object file which can be used with an incremental linker"},
        },
        .{
            .name = "indvars_post_increment_ranges",
            .string = "--indvars-post-increment-ranges",
            .descr = &.{"Use post increment control-dependent ranges in IndVarSimplify"},
        },
        .{
            .name = "indvars_predicate_loops",
            .string = "--indvars-predicate-loops",
            .descr = &.{"Predicate conditions in read only loops"},
        },
        .{
            .name = "indvars_widen_indvars",
            .string = "--indvars-widen-indvars",
            .descr = &.{"Allow widening of indvars to eliminate s/zext"},
        },
        .{
            .name = "info_output_file",
            .string = "--info-output-file",
            .descr = &.{"File to append -stats and -timer output to"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "initial_synthetic_count",
            .string = "--initial-synthetic-count",
            .descr = &.{"Initial value of synthetic entry count"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_call_penalty",
            .string = "--inline-call-penalty",
            .descr = &.{"Call penalty that is applied per callsite when inlining"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_caller_superset_nobuiltin",
            .string = "--inline-caller-superset-nobuiltin",
            .descr = &.{"Allow inlining when caller has a superset of callee's nobuiltin attributes."},
        },
        .{
            .name = "inline_cold_callsite_threshold",
            .string = "--inline-cold-callsite-threshold",
            .descr = &.{"Threshold for inlining cold callsites"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_cost_full",
            .string = "--inline-cost-full",
            .descr = &.{"Compute the full inline cost of a call site even when the cost exceeds the threshold."},
        },
        .{
            .name = "inline_deferral",
            .string = "--inline-deferral",
            .descr = &.{"Enable deferred inlining"},
        },
        .{
            .name = "inline_deferral_scale",
            .string = "--inline-deferral-scale",
            .descr = &.{"Scale to limit the cost of inline deferral"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_enable_cost_benefit_analysis",
            .string = "--inline-enable-cost-benefit-analysis",
            .descr = &.{"Enable the cost-benefit analysis for the inliner"},
        },
        .{
            .name = "inline_instr_cost",
            .string = "--inline-instr-cost",
            .descr = &.{"Cost of a single instruction when inlining"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_max_stacksize",
            .string = "--inline-max-stacksize",
            .descr = &.{"Do not inline functions with a stack size that exceeds the specified limit"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_memaccess_cost",
            .string = "--inline-memaccess-cost",
            .descr = &.{"Cost of load/store instruction when inlining"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_priority_mode",
            .string = "--inline-priority-mode",
            .descr = &.{"Choose the priority mode to use in module inline"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { size = 0, cost = 1, @"cost-benefit" = 2, ml = 3 }) },
        },
        .{
            .name = "inline_remark_attribute",
            .string = "--inline-remark-attribute",
            .descr = &.{"Enable adding inline-remark attribute to callsites processed by inliner but decided to be not inlined"},
        },
        .{
            .name = "inline_savings_multiplier",
            .string = "--inline-savings-multiplier",
            .descr = &.{"Multiplier to multiply cycle savings by during inlining"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_size_allowance",
            .string = "--inline-size-allowance",
            .descr = &.{"The maximum size of a callee that get's inlined without sufficient cycle savings"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_synthetic_count",
            .string = "--inline-synthetic-count",
            .descr = &.{"Initial synthetic entry count for inline functions."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inline_threshold",
            .string = "--inline-threshold",
            .descr = &.{"Control the amount of inlining to perform (default = 225)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inlinecold_threshold",
            .string = "--inlinecold-threshold",
            .descr = &.{"Threshold for inlining functions with cold attribute"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inlinedefault_threshold",
            .string = "--inlinedefault-threshold",
            .descr = &.{"Default amount of inlining to perform"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inlinehint_threshold",
            .string = "--inlinehint-threshold",
            .descr = &.{"Threshold for inlining functions with inline hint"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "inliner_function_import_stats",
            .string = "--inliner-function-import-stats",
            .descr = &.{"Enable inliner stats for imported functions"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { basic = 0, verbose = 1 }) },
        },
        .{
            .name = "insert_all0",
            .string = "--insert-all0",
            .descr = &.{""},
        },
        .{
            .name = "insert_const",
            .string = "--insert-const",
            .descr = &.{""},
        },
        .{
            .name = "insert_dist_cutoff",
            .string = "--insert-dist-cutoff",
            .descr = &.{"Vreg distance cutoff for insert generation."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "insert_has0",
            .string = "--insert-has0",
            .descr = &.{""},
        },
        .{
            .name = "insert_max_ifmap",
            .string = "--insert-max-ifmap",
            .descr = &.{"Maximum size of IFMap"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "insert_max_orl",
            .string = "--insert-max-orl",
            .descr = &.{"Maximum size of OrderedRegisterList"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "insert_timing",
            .string = "--insert-timing",
            .descr = &.{"Enable timing of insert generation"},
        },
        .{
            .name = "insert_timing_detail",
            .string = "--insert-timing-detail",
            .descr = &.{"Enable detailed timing of insert generation"},
        },
        .{
            .name = "insert_vreg_cutoff",
            .string = "--insert-vreg-cutoff",
            .descr = &.{"Vreg# cutoff for insert generation."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instcombine_code_sinking",
            .string = "--instcombine-code-sinking",
            .descr = &.{"Enable code sinking"},
        },
        .{
            .name = "instcombine_guard_widening_window",
            .string = "--instcombine-guard-widening-window",
            .descr = &.{"How wide an instruction window to bypass looking for another guard"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instcombine_infinite_loop_threshold",
            .string = "--instcombine-infinite-loop-threshold",
            .descr = &.{"Number of instruction combining iterations considered an infinite loop"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instcombine_lower_dbg_declare",
            .string = "--instcombine-lower-dbg-declare",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instcombine_max_copied_from_constant_users",
            .string = "--instcombine-max-copied-from-constant-users",
            .descr = &.{"Maximum users to visit in copy from constant transform"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instcombine_max_iterations",
            .string = "--instcombine-max-iterations",
            .descr = &.{"Limit the maximum number of instruction combining iterations"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instcombine_max_num_phis",
            .string = "--instcombine-max-num-phis",
            .descr = &.{"Maximum number phis to handle in intptr/ptrint folding"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instcombine_max_sink_users",
            .string = "--instcombine-max-sink-users",
            .descr = &.{"Maximum number of undroppable users for instruction sinking"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instcombine_maxarray_size",
            .string = "--instcombine-maxarray-size",
            .descr = &.{"Maximum array size considered when doing a combine"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instcombine_negator_enabled",
            .string = "--instcombine-negator-enabled",
            .descr = &.{"Should we attempt to sink negations?"},
        },
        .{
            .name = "instcombine_negator_max_depth",
            .string = "--instcombine-negator-max-depth",
            .descr = &.{"What is the maximal lookup depth when trying to check for viability of negation sinking."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "instrprof_atomic_counter_update_all",
            .string = "--instrprof-atomic-counter-update-all",
            .descr = &.{"Make all profile counter updates atomic (for testing only)"},
        },
        .{
            .name = "interleave_loops",
            .string = "--interleave-loops",
            .descr = &.{"Enable loop interleaving in Loop vectorization passes"},
        },
        .{
            .name = "interleave_small_loop_scalar_reduction",
            .string = "--interleave-small-loop-scalar-reduction",
            .descr = &.{"Enable interleaving for loops with small iteration counts that contain scalar reductions to expose ILP."},
        },
        .{
            .name = "internalize_public_api_file",
            .string = "--internalize-public-api-file",
            .descr = &.{"A file containing list of symbol names to preserve"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "internalize_public_api_list",
            .string = "--internalize-public-api-list",
            .descr = &.{"A list of symbol names to preserve"},
        },
        .{
            .name = "interpreter_print_volatile",
            .string = "--interpreter-print-volatile",
            .descr = &.{"make the interpreter print every volatile load and store"},
        },
        .{
            .name = "intra_scc_cost_multiplier",
            .string = "--intra-scc-cost-multiplier",
            .descr = &.{"Cost multiplier to multiply onto inlined call sites where the new call was previously an intra-SCC call (not relevant when the original call was already intra-SCC). This can accumulate over multiple inlinings (e.g. if a call site already had a cost multiplier and one of its inlined calls was also subject to this, the inlined call would have the original multiplier multiplied by intra-scc-cost-multiplier). This is to prevent tons of inlining through a child SCC which can cause terrible compile times"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ir_outliner",
            .string = "--ir-outliner",
            .descr = &.{"Enable ir outliner pass"},
        },
        .{
            .name = "irce_allow_narrow_latch",
            .string = "--irce-allow-narrow-latch",
            .descr = &.{"If set to true, IRCE may eliminate wide range checks in loops with narrow latch condition."},
        },
        .{
            .name = "irce_allow_unsigned_latch",
            .string = "--irce-allow-unsigned-latch",
            .descr = &.{""},
        },
        .{
            .name = "irce_loop_size_cutoff",
            .string = "--irce-loop-size-cutoff",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "irce_min_runtime_iterations",
            .string = "--irce-min-runtime-iterations",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "irce_print_changed_loops",
            .string = "--irce-print-changed-loops",
            .descr = &.{""},
        },
        .{
            .name = "irce_print_range_checks",
            .string = "--irce-print-range-checks",
            .descr = &.{""},
        },
        .{
            .name = "irce_skip_profitability_checks",
            .string = "--irce-skip-profitability-checks",
            .descr = &.{""},
        },
        .{
            .name = "isel_rebalance_addr",
            .string = "--isel-rebalance-addr",
            .descr = &.{"Rebalance address calculation trees to improve instruction selection"},
        },
        .{
            .name = "iterative_bfi_max_iterations_per_block",
            .string = "--iterative-bfi-max-iterations-per-block",
            .descr = &.{"Iterative inference: maximum number of update iterations per block"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "iterative_bfi_precision",
            .string = "--iterative-bfi-precision",
            .descr = &.{"Iterative inference: delta convergence precision; smaller values typically lead to better results at the cost of worsen runtime"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "iterative_counter_promotion",
            .string = "--iterative-counter-promotion",
            .descr = &.{"Allow counter promotion across the whole loop nest."},
        },
        .{
            .name = "join_globalcopies",
            .string = "--join-globalcopies",
            .descr = &.{"Coalesce copies that span blocks (default=subtarget)"},
        },
        .{
            .name = "join_liveintervals",
            .string = "--join-liveintervals",
            .descr = &.{"Coalesce copies (default=true)"},
        },
        .{
            .name = "join_splitedges",
            .string = "--join-splitedges",
            .descr = &.{"Coalesce copies on split edges (default=subtarget)"},
        },
        .{
            .name = "jump_inst_cost",
            .string = "--jump-inst-cost",
            .descr = &.{"Cost of jump instructions."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "jump_is_expensive",
            .string = "--jump-is-expensive",
            .descr = &.{"Do not create extra branches to split comparison logic."},
        },
        .{
            .name = "jump_table_density",
            .string = "--jump-table-density",
            .descr = &.{"Minimum density for building a jump table in a normal function"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "jump_threading_across_loop_headers",
            .string = "--jump-threading-across-loop-headers",
            .descr = &.{"Allow JumpThreading to thread across loop headers, for testing"},
        },
        .{
            .name = "jump_threading_implication_search_threshold",
            .string = "--jump-threading-implication-search-threshold",
            .descr = &.{"The number of predecessors to search for a stronger condition to use to thread over a weaker condition"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "jump_threading_phi_threshold",
            .string = "--jump-threading-phi-threshold",
            .descr = &.{"Max PHIs in BB to duplicate for jump threading"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "jump_threading_threshold",
            .string = "--jump-threading-threshold",
            .descr = &.{"Max block size to duplicate for jump threading"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "keep_inline_advisor_for_printing",
            .string = "--keep-inline-advisor-for-printing",
            .descr = &.{""},
        },
        .{
            .name = "keep_loops",
            .string = "--keep-loops",
            .descr = &.{"Preserve canonical loop structure (default = true)"},
        },
        .{
            .name = "lanai_constant_mul_threshold",
            .string = "--lanai-constant-mul-threshold",
            .descr = &.{"Maximum number of instruction to generate when lowering constant multiplication instead of calling library function [default=14]"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "lanai_nop_delay_filler",
            .string = "--lanai-nop-delay-filler",
            .descr = &.{"Fill Lanai delay slots with NOPs."},
        },
        .{
            .name = "lanai_ssection_threshold",
            .string = "--lanai-ssection-threshold",
            .descr = &.{"Small data and bss section threshold size (default=0)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "large_interval_freq_threshold",
            .string = "--large-interval-freq-threshold",
            .descr = &.{"For a large interval, if it is coalesed with other live intervals many times more than the threshold, stop its coalescing to control the compile time. "},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "large_interval_size_threshold",
            .string = "--large-interval-size-threshold",
            .descr = &.{"If the valnos size of an interval is larger than the threshold, it is regarded as a large interval. "},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "late_remat_update_threshold",
            .string = "--late-remat-update-threshold",
            .descr = &.{"During rematerialization for a copy, if the def instruction has many other copy uses to be rematerialized, delay the multiple separate live interval update work and do them all at once after all those rematerialization are done. It will save a lot of repeated work. "},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "lcr_max_depth",
            .string = "--lcr-max-depth",
            .descr = &.{"Last chance recoloring max depth"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "lcr_max_interf",
            .string = "--lcr-max-interf",
            .descr = &.{"Last chance recoloring maximum number of considered interference at a time"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ldstmemcpy_glue_max",
            .string = "--ldstmemcpy-glue-max",
            .descr = &.{"Number limit for gluing ld/st of memcpy."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "licm_control_flow_hoisting",
            .string = "--licm-control-flow-hoisting",
            .descr = &.{"Enable control flow (and PHI) hoisting in LICM"},
        },
        .{
            .name = "licm_force_thread_model_single",
            .string = "--licm-force-thread-model-single",
            .descr = &.{"Force thread model single in LICM pass"},
        },
        .{
            .name = "licm_max_num_uses_traversed",
            .string = "--licm-max-num-uses-traversed",
            .descr = &.{"Max num uses visited for identifying load invariance in loop using invariant start (default = 8)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "licm_mssa_max_acc_promotion",
            .string = "--licm-mssa-max-acc-promotion",
            .descr = &.{"[LICM & MemorySSA] When MSSA in LICM is disabled, this has no effect. When MSSA in LICM is enabled, then this is the maximum number of accesses allowed to be present in a loop in order to enable memory promotion."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "licm_mssa_optimization_cap",
            .string = "--licm-mssa-optimization-cap",
            .descr = &.{"Enable imprecision in LICM in pathological cases, in exchange for faster compile. Caps the MemorySSA clobbering calls."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "licm_versioning_invariant_threshold",
            .string = "--licm-versioning-invariant-threshold",
            .descr = &.{"LoopVersioningLICM's minimum allowed percentageof possible invariant instructions per loop"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "licm_versioning_max_depth_threshold",
            .string = "--licm-versioning-max-depth-threshold",
            .descr = &.{"LoopVersioningLICM's threshold for maximum allowed loop nest/depth"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "likely_branch_weight",
            .string = "--likely-branch-weight",
            .descr = &.{"Weight of the branch likely to be taken (default = 2000)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "limit_float_precision",
            .string = "--limit-float-precision",
            .descr = &.{"Generate low-precision inline sequences for some float libcalls"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "live_debug_variables",
            .string = "--live-debug-variables",
            .descr = &.{"Enable the live debug variables pass"},
        },
        .{
            .name = "livedebugvalues_input_bb_limit",
            .string = "--livedebugvalues-input-bb-limit",
            .descr = &.{"Maximum input basic blocks before DBG_VALUE limit applies"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "livedebugvalues_input_dbg_value_limit",
            .string = "--livedebugvalues-input-dbg-value-limit",
            .descr = &.{"Maximum input DBG_VALUE insts supported by debug range extension"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "livedebugvalues_max_stack_slots",
            .string = "--livedebugvalues-max-stack-slots",
            .descr = &.{"livedebugvalues-stack-ws-limit"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "load",
            .string = "--load",
            .descr = &.{"Load the specified plugin"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "locally_hot_callsite_threshold",
            .string = "--locally-hot-callsite-threshold",
            .descr = &.{"Threshold for locally hot callsites "},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "loongarch_check_zero_division",
            .string = "--loongarch-check-zero-division",
            .descr = &.{"Trap on integer division by zero."},
        },
        .{
            .name = "loongarch_numeric_reg",
            .string = "--loongarch-numeric-reg",
            .descr = &.{"Print numeric register names rather than the ABI names (such as $r0 instead of $zero)"},
        },
        .{
            .name = "loop_deletion_enable_symbolic_execution",
            .string = "--loop-deletion-enable-symbolic-execution",
            .descr = &.{"Break backedge through symbolic execution of 1st iteration attempting to prove that the backedge is never taken"},
        },
        .{
            .name = "loop_distribute_non_if_convertible",
            .string = "--loop-distribute-non-if-convertible",
            .descr = &.{"Whether to distribute into a loop that may not be if-convertible by the loop vectorizer"},
        },
        .{
            .name = "loop_distribute_scev_check_threshold",
            .string = "--loop-distribute-scev-check-threshold",
            .descr = &.{"The maximum number of SCEV checks allowed for Loop Distribution"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "loop_distribute_scev_check_threshold_with_pragma",
            .string = "--loop-distribute-scev-check-threshold-with-pragma",
            .descr = &.{"The maximum number of SCEV checks allowed for Loop Distribution for loop marked with #pragma loop distribute(enable)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "loop_distribute_verify",
            .string = "--loop-distribute-verify",
            .descr = &.{"Turn on DominatorTree and LoopInfo verification after Loop Distribution"},
        },
        .{
            .name = "loop_flatten_assume_no_overflow",
            .string = "--loop-flatten-assume-no-overflow",
            .descr = &.{"Assume that the product of the two iteration trip counts will never overflow"},
        },
        .{
            .name = "loop_flatten_cost_threshold",
            .string = "--loop-flatten-cost-threshold",
            .descr = &.{"Limit on the cost of instructions that can be repeated due to loop flattening"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "loop_flatten_widen_iv",
            .string = "--loop-flatten-widen-iv",
            .descr = &.{"Widen the loop induction variables, if possible, so overflow checks won't reject flattening"},
        },
        .{
            .name = "loop_fusion_dependence_analysis",
            .string = "--loop-fusion-dependence-analysis",
            .descr = &.{"Which dependence analysis should loop fusion use?"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { scev = 0, da = 1, all = 2 }) },
        },
        .{
            .name = "loop_fusion_peel_max_count",
            .string = "--loop-fusion-peel-max-count",
            .descr = &.{"Max number of iterations to be peeled from a loop, such that fusion can take place"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "loop_interchange_threshold",
            .string = "--loop-interchange-threshold",
            .descr = &.{"Interchange if you gain more than this number"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "loop_load_elimination_scev_check_threshold",
            .string = "--loop-load-elimination-scev-check-threshold",
            .descr = &.{"The maximum number of SCEV checks allowed for Loop Load Elimination"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "loop_predication_enable_count_down_loop",
            .string = "--loop-predication-enable-count-down-loop",
            .descr = &.{""},
        },
        .{
            .name = "loop_predication_enable_iv_truncation",
            .string = "--loop-predication-enable-iv-truncation",
            .descr = &.{""},
        },
        .{
            .name = "loop_predication_insert_assumes_of_predicated_guards_conditions",
            .string = "--loop-predication-insert-assumes-of-predicated-guards-conditions",
            .descr = &.{"Whether or not we should insert assumes of conditions of predicated guards"},
        },
        .{
            .name = "loop_predication_latch_probability_scale",
            .string = "--loop-predication-latch-probability-scale",
            .descr = &.{"scale factor for the latch probability. Value should be greater than 1. Lower values are ignored"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "loop_predication_predicate_widenable_branches_to_deopt",
            .string = "--loop-predication-predicate-widenable-branches-to-deopt",
            .descr = &.{"Whether or not we should predicate guards expressed as widenable branches to deoptimize blocks"},
        },
        .{
            .name = "loop_predication_skip_profitability_checks",
            .string = "--loop-predication-skip-profitability-checks",
            .descr = &.{""},
        },
        .{
            .name = "loop_prefetch_writes",
            .string = "--loop-prefetch-writes",
            .descr = &.{"Prefetch write addresses"},
        },
        .{
            .name = "loop_rotate_multi",
            .string = "--loop-rotate-multi",
            .descr = &.{"Allow loop rotation multiple times in order to reach a better latch exit"},
        },
        .{
            .name = "loop_to_cold_block_ratio",
            .string = "--loop-to-cold-block-ratio",
            .descr = &.{"Outline loop blocks from loop chain if (frequency of loop) / (frequency of block) is greater than this ratio"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "loop_vectorize_with_block_frequency",
            .string = "--loop-vectorize-with-block-frequency",
            .descr = &.{"Enable the use of the block frequency analysis to access PGO heuristics minimizing code growth in cold regions and being more aggressive in hot regions."},
        },
        .{
            .name = "loop_version_annotate_no_alias",
            .string = "--loop-version-annotate-no-alias",
            .descr = &.{"Add no-alias annotation for instructions that are disambiguated by memchecks"},
        },
        .{
            .name = "lower_global_dtors_via_cxa_atexit",
            .string = "--lower-global-dtors-via-cxa-atexit",
            .descr = &.{"Lower llvm.global_dtors (global destructors) via __cxa_atexit"},
        },
        .{
            .name = "lower_interleaved_accesses",
            .string = "--lower-interleaved-accesses",
            .descr = &.{"Enable lowering interleaved accesses to intrinsics"},
        },
        .{
            .name = "lowertypetests_avoid_reuse",
            .string = "--lowertypetests-avoid-reuse",
            .descr = &.{"Try to avoid reuse of byte array addresses using aliases"},
        },
        .{
            .name = "lowertypetests_drop_type_tests",
            .string = "--lowertypetests-drop-type-tests",
            .descr = &.{"Simply drop type test assume sequences"},
        },
        .{
            .name = "lowertypetests_read_summary",
            .string = "--lowertypetests-read-summary",
            .descr = &.{"Read summary from given YAML file before running pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "lowertypetests_summary_action",
            .string = "--lowertypetests-summary-action",
            .descr = &.{"What to do with the summary when running this pass"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, import = 1, @"export" = 2 }) },
        },
        .{
            .name = "lowertypetests_write_summary",
            .string = "--lowertypetests-write-summary",
            .descr = &.{"Write summary to given YAML file after running pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "lsr_complexity_limit",
            .string = "--lsr-complexity-limit",
            .descr = &.{"LSR search space complexity limit"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "lsr_drop_solution",
            .string = "--lsr-drop-solution",
            .descr = &.{"Attempt to drop solution if it is less profitable"},
        },
        .{
            .name = "lsr_exp_narrow",
            .string = "--lsr-exp-narrow",
            .descr = &.{"Narrow LSR complex solution using expectation of registers number"},
        },
        .{
            .name = "lsr_filter_same_scaled_reg",
            .string = "--lsr-filter-same-scaled-reg",
            .descr = &.{"Narrow LSR search space by filtering non-optimal formulae with the same ScaledReg and Scale"},
        },
        .{
            .name = "lsr_insns_cost",
            .string = "--lsr-insns-cost",
            .descr = &.{"Add instruction count to a LSR cost model"},
        },
        .{
            .name = "lsr_preferred_addressing_mode",
            .string = "--lsr-preferred-addressing-mode",
            .descr = &.{"A flag that overrides the target's preferred addressing mode."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, preindexed = 1, postindexed = 2 }) },
        },
        .{
            .name = "lsr_setupcost_depth_limit",
            .string = "--lsr-setupcost-depth-limit",
            .descr = &.{"The limit on recursion depth for LSRs setup cost"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "lsr_term_fold",
            .string = "--lsr-term-fold",
            .descr = &.{"Attempt to replace primary IV with other IV."},
        },
        .{
            .name = "lto_aix_system_assembler",
            .string = "--lto-aix-system-assembler",
            .descr = &.{"Path to a system assembler, picked up on AIX only"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "lto_discard_value_names",
            .string = "--lto-discard-value-names",
            .descr = &.{"Strip names from Value during LTO (other than GlobalValue)."},
        },
        .{
            .name = "lto_embed_bitcode",
            .string = "--lto-embed-bitcode",
            .descr = &.{"Embed LLVM bitcode in object files produced by LTO"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, optimized = 1, @"post-merge-pre-opt" = 2 }) },
        },
        .{
            .name = "lto_pass_remarks_filter",
            .string = "--lto-pass-remarks-filter",
            .descr = &.{"Only record optimization remarks from passes whose names match the given regular expression"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "lto_pass_remarks_format",
            .string = "--lto-pass-remarks-format",
            .descr = &.{"The format used for serializing remarks (default: YAML)"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "lto_pass_remarks_hotness_threshold",
            .string = "--lto-pass-remarks-hotness-threshold",
            .descr = &.{"Minimum profile count required for an optimization remark to be output. Use 'auto' to apply the threshold from profile summary."},
        },
        .{
            .name = "lto_pass_remarks_output",
            .string = "--lto-pass-remarks-output",
            .descr = &.{"Output filename for pass remarks"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "lto_pass_remarks_with_hotness",
            .string = "--lto-pass-remarks-with-hotness",
            .descr = &.{"With PGO, include profile count in optimization remarks"},
        },
        .{
            .name = "lto_stats_file",
            .string = "--lto-stats-file",
            .descr = &.{"Save statistics to the specified file"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "machine_combiner_dump_subst_intrs",
            .string = "--machine-combiner-dump-subst-intrs",
            .descr = &.{"Dump all substituted intrs"},
        },
        .{
            .name = "machine_combiner_inc_threshold",
            .string = "--machine-combiner-inc-threshold",
            .descr = &.{"Incremental depth computation will be used for basic blocks with more instructions."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "machine_combiner_verify_pattern_order",
            .string = "--machine-combiner-verify-pattern-order",
            .descr = &.{"Verify that the generated patterns are ordered by increasing latency"},
        },
        .{
            .name = "machine_outliner_reruns",
            .string = "--machine-outliner-reruns",
            .descr = &.{"Number of times to rerun the outliner after the initial outline"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "machine_sink_bfi",
            .string = "--machine-sink-bfi",
            .descr = &.{"Use block frequency info to find successors to sink"},
        },
        .{
            .name = "machine_sink_cycle_limit",
            .string = "--machine-sink-cycle-limit",
            .descr = &.{"The maximum number of instructions considered for cycle sinking."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "machine_sink_load_blocks_threshold",
            .string = "--machine-sink-load-blocks-threshold",
            .descr = &.{"Do not try to find alias store for a load if the block number in the straight line is higher than this threshold."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "machine_sink_load_instrs_threshold",
            .string = "--machine-sink-load-instrs-threshold",
            .descr = &.{"Do not try to find alias store for a load if there is a in-path block whose instruction number is higher than this threshold."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "machine_sink_split",
            .string = "--machine-sink-split",
            .descr = &.{"Split critical edges during machine sinking"},
        },
        .{
            .name = "machine_sink_split_probability_threshold",
            .string = "--machine-sink-split-probability-threshold",
            .descr = &.{"Percentage threshold for splitting single-instruction critical edge. If the branch threshold is higher than this threshold, we allow speculative execution of up to 1 instruction to avoid branching to splitted critical edge"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mandatory_inlining_first",
            .string = "--mandatory-inlining-first",
            .descr = &.{"Perform mandatory inlinings module-wide, before performing inlining"},
        },
        .{
            .name = "march",
            .string = "--march",
            .descr = &.{"Architecture to generate code for (see --version)"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "mark_data_regions",
            .string = "--mark-data-regions",
            .descr = &.{"Mark code section jump table data regions."},
        },
        .{
            .name = "matrix_allow_contract",
            .string = "--matrix-allow-contract",
            .descr = &.{"Allow the use of FMAs if available and profitable. This may result in different results, due to less rounding error."},
        },
        .{
            .name = "matrix_default_layout",
            .string = "--matrix-default-layout",
            .descr = &.{"Sets the default matrix layout"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { @"column-major" = 0, @"row-major" = 1 }) },
        },
        .{
            .name = "matrix_print_after_transpose_opt",
            .string = "--matrix-print-after-transpose-opt",
            .descr = &.{""},
        },
        .{
            .name = "max_booleans_in_control_flow_hub",
            .string = "--max-booleans-in-control-flow-hub",
            .descr = &.{"Set the maximum number of outgoing blocks for using a boolean value to record the exiting block in CreateControlFlowHub."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_bytes_for_alignment",
            .string = "--max-bytes-for-alignment",
            .descr = &.{"Forces the maximum bytes allowed to be emitted when padding for alignment"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_counter_promotions",
            .string = "--max-counter-promotions",
            .descr = &.{"Max number of allowed counter promotions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_counter_promotions_per_loop",
            .string = "--max-counter-promotions-per-loop",
            .descr = &.{"Max number counter promotions per loop to avoid increasing register pressure too much"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_deopt_or_unreachable_succ_check_depth",
            .string = "--max-deopt-or-unreachable-succ-check-depth",
            .descr = &.{"Set the maximum path length when checking whether a basic block is followed by a block that either has a terminating deoptimizing call or is terminated with an unreachable"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_dependences",
            .string = "--max-dependences",
            .descr = &.{"Maximum number of dependences collected by loop-access analysis (default = 100)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_forked_scev_depth",
            .string = "--max-forked-scev-depth",
            .descr = &.{"Maximum recursion depth when finding forked SCEVs (default = 5)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_heap_to_stack_size",
            .string = "--max-heap-to-stack-size",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_hsdr",
            .string = "--max-hsdr",
            .descr = &.{"Maximum number of split partitions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_inst_checked_for_throw_during_inlining",
            .string = "--max-inst-checked-for-throw-during-inlining",
            .descr = &.{"the maximum number of instructions analyzed for may throw during attribute inference in inlined body"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_interleave_group_factor",
            .string = "--max-interleave-group-factor",
            .descr = &.{"Maximum factor for an interleaved access group (default = 8)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_jump_table_size",
            .string = "--max-jump-table-size",
            .descr = &.{"Set maximum size of jump tables."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_loads_per_memcmp",
            .string = "--max-loads-per-memcmp",
            .descr = &.{"Set maximum number of loads used in expanded memcmp"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_loads_per_memcmp_opt_size",
            .string = "--max-loads-per-memcmp-opt-size",
            .descr = &.{"Set maximum number of loads used in expanded memcmp for -Os/Oz"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_nested_scalar_reduction_interleave",
            .string = "--max-nested-scalar-reduction-interleave",
            .descr = &.{"The maximum interleave count to use when interleaving a scalar reduction in a nested loop."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_num_inline_blocks",
            .string = "--max-num-inline-blocks",
            .descr = &.{"Max number of blocks to be partially inlined"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_num_inst_between_tfr_and_nv_store",
            .string = "--max-num-inst-between-tfr-and-nv-store",
            .descr = &.{"Maximum distance between a tfr feeding a store we consider the store still to be newifiable"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_partial_inlining",
            .string = "--max-partial-inlining",
            .descr = &.{"Max number of partial inlining. The default is unlimited"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_prefetch_iters_ahead",
            .string = "--max-prefetch-iters-ahead",
            .descr = &.{"Max number of iterations to prefetch ahead"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_registers_for_gc_values",
            .string = "--max-registers-for-gc-values",
            .descr = &.{"Max number of VRegs allowed to pass GC pointer meta args in"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_sched_reorder",
            .string = "--max-sched-reorder",
            .descr = &.{"Number of instructions to allow ahead of the critical path in sched=list-ilp"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_speculation_depth",
            .string = "--max-speculation-depth",
            .descr = &.{"Limit maximum recursion depth when calculating costs of speculatively executed instructions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_store_memcpy",
            .string = "--max-store-memcpy",
            .descr = &.{"Max #stores to inline memcpy"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_store_memcpy_Os",
            .string = "--max-store-memcpy-Os",
            .descr = &.{"Max #stores to inline memcpy"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_store_memmove",
            .string = "--max-store-memmove",
            .descr = &.{"Max #stores to inline memmove"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_store_memmove_Os",
            .string = "--max-store-memmove-Os",
            .descr = &.{"Max #stores to inline memmove"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_store_memset",
            .string = "--max-store-memset",
            .descr = &.{"Max #stores to inline memset"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_store_memset_Os",
            .string = "--max-store-memset-Os",
            .descr = &.{"Max #stores to inline memset"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_switch_cases_per_result",
            .string = "--max-switch-cases-per-result",
            .descr = &.{"Limit cases to analyze when converting a switch to select"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "max_uses_for_sinking",
            .string = "--max-uses-for-sinking",
            .descr = &.{"Do not sink instructions that have too many uses."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mc_relax_all",
            .string = "--mc-relax-all",
            .descr = &.{"When used with filetype=obj, relax all fixups in the emitted object file"},
        },
        .{
            .name = "mcabac",
            .string = "--mcabac",
            .descr = &.{"tbd"},
        },
        .{
            .name = "mcfg_dot_filename_prefix",
            .string = "--mcfg-dot-filename-prefix",
            .descr = &.{"The prefix used for the Machine CFG dot file names."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "mcfg_func_name",
            .string = "--mcfg-func-name",
            .descr = &.{"The name of a function (or its substring) whose CFG is viewed/printed."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "mcp_use_is_copy_instr",
            .string = "--mcp-use-is-copy-instr",
            .descr = &.{""},
        },
        .{
            .name = "mcpu",
            .string = "--mcpu",
            .descr = &.{"Target a specific cpu type (-mcpu=help for details)"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "meabi",
            .string = "--meabi",
            .descr = &.{"Set EABI type (default depends on triple):"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { default = 0, @"4" = 1, @"5" = 2, gnu = 3 }) },
        },
        .{
            .name = "mem_loc_frag_fill",
            .string = "--mem-loc-frag-fill",
            .descr = &.{""},
        },
        .{
            .name = "membedded_data",
            .string = "--membedded-data",
            .descr = &.{"MIPS: Try to allocate variables in the following sections if possible: .rodata, .sdata, .data ."},
        },
        .{
            .name = "memcmp_num_loads_per_block",
            .string = "--memcmp-num-loads-per-block",
            .descr = &.{"The number of loads per basic block for inline expansion of memcmp that is only being compared against zero."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memdep_block_number_limit",
            .string = "--memdep-block-number-limit",
            .descr = &.{"The number of blocks to scan during memory dependency analysis (default = 200)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memdep_block_scan_limit",
            .string = "--memdep-block-scan-limit",
            .descr = &.{"The number of instructions to scan in a block in memory dependency analysis (default = 100)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memop_max_annotations",
            .string = "--memop-max-annotations",
            .descr = &.{"Max number of preicise value annotations for a single memopintrinsic"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memop_value_prof_max_opt_size",
            .string = "--memop-value-prof-max-opt-size",
            .descr = &.{"Optimize the memop size <= this value"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memory_check_merge_threshold",
            .string = "--memory-check-merge-threshold",
            .descr = &.{"Maximum number of comparisons done when trying to merge runtime memory checks. (default = 100)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memprof_accesses_per_byte_cold_threshold",
            .string = "--memprof-accesses-per-byte-cold-threshold",
            .descr = &.{"The threshold the accesses per byte must be under to consider an allocation cold"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memprof_debug",
            .string = "--memprof-debug",
            .descr = &.{"debug"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memprof_debug_func",
            .string = "--memprof-debug-func",
            .descr = &.{"Debug func"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "memprof_debug_max",
            .string = "--memprof-debug-max",
            .descr = &.{"Debug max inst"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memprof_debug_min",
            .string = "--memprof-debug-min",
            .descr = &.{"Debug min inst"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memprof_guard_against_version_mismatch",
            .string = "--memprof-guard-against-version-mismatch",
            .descr = &.{"Guard against compiler/runtime version mismatch."},
        },
        .{
            .name = "memprof_instrument_atomics",
            .string = "--memprof-instrument-atomics",
            .descr = &.{"instrument atomic instructions (rmw, cmpxchg)"},
        },
        .{
            .name = "memprof_instrument_reads",
            .string = "--memprof-instrument-reads",
            .descr = &.{"instrument read instructions"},
        },
        .{
            .name = "memprof_instrument_stack",
            .string = "--memprof-instrument-stack",
            .descr = &.{"Instrument scalar stack variables"},
        },
        .{
            .name = "memprof_instrument_writes",
            .string = "--memprof-instrument-writes",
            .descr = &.{"instrument write instructions"},
        },
        .{
            .name = "memprof_mapping_granularity",
            .string = "--memprof-mapping-granularity",
            .descr = &.{"granularity of memprof shadow mapping"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memprof_mapping_scale",
            .string = "--memprof-mapping-scale",
            .descr = &.{"scale of memprof shadow mapping"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memprof_memory_access_callback_prefix",
            .string = "--memprof-memory-access-callback-prefix",
            .descr = &.{"Prefix for memory access callbacks"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "memprof_min_lifetime_cold_threshold",
            .string = "--memprof-min-lifetime-cold-threshold",
            .descr = &.{"The minimum lifetime (s) for an allocation to be considered cold"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "memprof_use_callbacks",
            .string = "--memprof-use-callbacks",
            .descr = &.{"Use callbacks instead of inline instrumentation sequences."},
        },
        .{
            .name = "memssa_check_limit",
            .string = "--memssa-check-limit",
            .descr = &.{"The maximum number of stores/phis MemorySSAwill consider trying to walk past (default = 100)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mergefunc_preserve_debug_info",
            .string = "--mergefunc-preserve-debug-info",
            .descr = &.{"Preserve debug info in thunk when mergefunc transformations are made."},
        },
        .{
            .name = "mergefunc_use_aliases",
            .string = "--mergefunc-use-aliases",
            .descr = &.{"Allow mergefunc to create aliases"},
        },
        .{
            .name = "mergefunc_verify",
            .string = "--mergefunc-verify",
            .descr = &.{"How many functions in a module could be used for MergeFunctions to pass a basic correctness check. '0' disables this check. Works only with '-debug' key."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "merror_missing_parenthesis",
            .string = "--merror-missing-parenthesis",
            .descr = &.{"Error for missing parenthesis around predicate registers"},
        },
        .{
            .name = "merror_noncontigious_register",
            .string = "--merror-noncontigious-register",
            .descr = &.{"Error for register names that aren't contigious"},
        },
        .{
            .name = "mextern_sdata",
            .string = "--mextern-sdata",
            .descr = &.{"MIPS: Use gp_rel for data that is not defined by the current object."},
        },
        .{
            .name = "mfix4300",
            .string = "--mfix4300",
            .descr = &.{"Enable the VR4300 mulmul bug fix."},
        },
        .{
            .name = "mfs_count_threshold",
            .string = "--mfs-count-threshold",
            .descr = &.{"Minimum number of times a block must be executed to be retained."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mfs_psi_cutoff",
            .string = "--mfs-psi-cutoff",
            .descr = &.{"Percentile profile summary cutoff used to determine cold blocks. Unused if set to zero."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mfs_split_ehcode",
            .string = "--mfs-split-ehcode",
            .descr = &.{"Splits all EH code and it's descendants by default."},
        },
        .{
            .name = "mgpopt",
            .string = "--mgpopt",
            .descr = &.{"Enable gp-relative addressing of mips small data items"},
        },
        .{
            .name = "mhvx",
            .string = "--mhvx",
            .descr = &.{"Enable Hexagon Vector eXtensions"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u4) { v60 = 0, v62 = 1, v65 = 2, v66 = 3, v67 = 4, v68 = 5, v69 = 6, v71 = 7, v73 = 8 }) },
        },
        .{
            .name = "mhvx_ieee_fp",
            .string = "--mhvx-ieee-fp",
            .descr = &.{"Enable HVX IEEE floating point extensions"},
        },
        .{
            .name = "mhwmult",
            .string = "--mhwmult",
            .descr = &.{"Hardware multiplier use mode for MSP430"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, @"16bit" = 1, @"32bit" = 2, f5series = 3 }) },
        },
        .{
            .name = "min_block_execution",
            .string = "--min-block-execution",
            .descr = &.{"Minimum block executions to consider its BranchProbabilityInfo valid"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "min_ctr_loop_threshold",
            .string = "--min-ctr-loop-threshold",
            .descr = &.{"Loops with a constant trip count smaller than this value will not use the count register."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "min_jump_table_entries",
            .string = "--min-jump-table-entries",
            .descr = &.{"Set minimum number of entries to use a jump table."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "min_prefetch_stride",
            .string = "--min-prefetch-stride",
            .descr = &.{"Min stride to add prefetches"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "min_region_size_ratio",
            .string = "--min-region-size-ratio",
            .descr = &.{"Minimum ratio comparing relative sizes of each outline candidate and original function"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "minimize_addr_in_v5",
            .string = "--minimize-addr-in-v5",
            .descr = &.{"Always use DW_AT_ranges in DWARFv5 whenever it could allow more address pool entry sharing to reduce relocations/object size"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { Default = 0, Ranges = 1, Expressions = 2, Form = 3, Disabled = 4 }) },
        },
        .{
            .name = "minimum_jump_tables",
            .string = "--minimum-jump-tables",
            .descr = &.{"Set minimum jump tables"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mips_align_constant_islands",
            .string = "--mips-align-constant-islands",
            .descr = &.{"Align constant islands in code"},
        },
        .{
            .name = "mips_compact_branches",
            .string = "--mips-compact-branches",
            .descr = &.{"MIPS Specific: Compact branch policy."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { never = 0, optimal = 1, always = 2 }) },
        },
        .{
            .name = "mips_constant_islands_no_load_relaxation",
            .string = "--mips-constant-islands-no-load-relaxation",
            .descr = &.{"Don't relax loads to long loads - for testing purposes"},
        },
        .{
            .name = "mips_constant_islands_small_offset",
            .string = "--mips-constant-islands-small-offset",
            .descr = &.{"Make small offsets be this amount for testing purposes"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mips_erase_gp_opnd",
            .string = "--mips-erase-gp-opnd",
            .descr = &.{"Erase GP Operand"},
        },
        .{
            .name = "mips_fix_global_base_reg",
            .string = "--mips-fix-global-base-reg",
            .descr = &.{"Always use $gp as the global base register."},
        },
        .{
            .name = "mips_jalr_reloc",
            .string = "--mips-jalr-reloc",
            .descr = &.{"MIPS: Emit R_{MICRO}MIPS_JALR relocation with jalr"},
        },
        .{
            .name = "mips_load_target_from_got",
            .string = "--mips-load-target-from-got",
            .descr = &.{"Load target address from GOT"},
        },
        .{
            .name = "mips_mixed_16_32",
            .string = "--mips-mixed-16-32",
            .descr = &.{"Allow for a mixture of Mips16 and Mips32 code in a single output file"},
        },
        .{
            .name = "mips_os16",
            .string = "--mips-os16",
            .descr = &.{"Compile all functions that don't use floating point as Mips 16"},
        },
        .{
            .name = "mips_round_section_sizes",
            .string = "--mips-round-section-sizes",
            .descr = &.{"Round section sizes up to the section alignment"},
        },
        .{
            .name = "mips_ssection_threshold",
            .string = "--mips-ssection-threshold",
            .descr = &.{"Small data and bss section threshold size (default=8)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mips_tail_calls",
            .string = "--mips-tail-calls",
            .descr = &.{"MIPS: permit tail calls."},
        },
        .{
            .name = "mips16_constant_islands",
            .string = "--mips16-constant-islands",
            .descr = &.{"Enable mips16 constant islands."},
        },
        .{
            .name = "mips16_dont_expand_cond_pseudo",
            .string = "--mips16-dont-expand-cond-pseudo",
            .descr = &.{"Don't expand conditional move related pseudos for Mips 16"},
        },
        .{
            .name = "mips16_hard_float",
            .string = "--mips16-hard-float",
            .descr = &.{"Enable mips16 hard float."},
        },
        .{
            .name = "mips32_function_mask",
            .string = "--mips32-function-mask",
            .descr = &.{"Force function to be mips32"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "mipspostlegalizercombinerhelper_disable_rule",
            .string = "--mipspostlegalizercombinerhelper-disable-rule",
            .descr = &.{"Disable one or more combiner rules temporarily in the MipsPostLegalizerCombinerHelper pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "mipspostlegalizercombinerhelper_only_enable_rule",
            .string = "--mipspostlegalizercombinerhelper-only-enable-rule",
            .descr = &.{"Disable all rules in the MipsPostLegalizerCombinerHelper pass then re-enable the specified ones"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "mir_debug_loc",
            .string = "--mir-debug-loc",
            .descr = &.{"Print MIR debug-locations"},
        },
        .{
            .name = "mir_strip_debugify_only",
            .string = "--mir-strip-debugify-only",
            .descr = &.{"Should mir-strip-debug only strip debug info from debugified modules by default"},
        },
        .{
            .name = "mir_vreg_namer_use_stable_hash",
            .string = "--mir-vreg-namer-use-stable-hash",
            .descr = &.{"Use Stable Hashing for MIR VReg Renaming"},
        },
        .{
            .name = "misched",
            .string = "--misched",
            .descr = &.{"Machine instruction scheduler to use"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u4) { default = 0, converge = 1, ilpmax = 2, ilpmin = 3, si = 4, @"gcn-max-occupancy" = 5, @"gcn-max-ilp" = 6, @"gcn-iterative-max-occupancy-experimental" = 7, @"gcn-iterative-minreg" = 8, @"gcn-iterative-ilp" = 9, r600 = 10, hexagon = 11, @"ppc-prera" = 12, @"ppc-postra" = 13 }) },
        },
        .{
            .name = "misched_bottomup",
            .string = "--misched-bottomup",
            .descr = &.{"Force bottom-up list scheduling"},
        },
        .{
            .name = "misched_cluster",
            .string = "--misched-cluster",
            .descr = &.{"Enable memop clustering."},
        },
        .{
            .name = "misched_cyclicpath",
            .string = "--misched-cyclicpath",
            .descr = &.{"Enable cyclic critical path analysis."},
        },
        .{
            .name = "misched_dcpl",
            .string = "--misched-dcpl",
            .descr = &.{"Print critical path length to stdout"},
        },
        .{
            .name = "misched_fusion",
            .string = "--misched-fusion",
            .descr = &.{"Enable scheduling for macro fusion."},
        },
        .{
            .name = "misched_limit",
            .string = "--misched-limit",
            .descr = &.{"Limit ready list to N instructions"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "misched_postra",
            .string = "--misched-postra",
            .descr = &.{"Run MachineScheduler post regalloc (independent of preRA sched)"},
        },
        .{
            .name = "misched_regpressure",
            .string = "--misched-regpressure",
            .descr = &.{"Enable register pressure scheduling."},
        },
        .{
            .name = "misched_topdown",
            .string = "--misched-topdown",
            .descr = &.{"Force top-down list scheduling"},
        },
        .{
            .name = "misched_verbose_level",
            .string = "--misched-verbose-level",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "misexpect_tolerance",
            .string = "--misexpect-tolerance",
            .descr = &.{"Prevents emiting diagnostics when profile counts are within N% of the threshold.."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "misfetch_cost",
            .string = "--misfetch-cost",
            .descr = &.{"Cost that models the probabilistic risk of an instruction misfetch due to a jump comparing to falling through, whose cost is zero."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mispredict_default_rate",
            .string = "--mispredict-default-rate",
            .descr = &.{"Default mispredict rate (initialized to 25%)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ml_advisor_keep_fpi_cache",
            .string = "--ml-advisor-keep-fpi-cache",
            .descr = &.{"For test - keep the ML Inline advisor's FunctionPropertiesInfo cache"},
        },
        .{
            .name = "ml_advisor_size_increase_threshold",
            .string = "--ml-advisor-size-increase-threshold",
            .descr = &.{"Maximum factor by which expected native size may increase before blocking any further inlining."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mlocal_sdata",
            .string = "--mlocal-sdata",
            .descr = &.{"MIPS: Use gp_rel for object-local data."},
        },
        .{
            .name = "mno_check_zero_division",
            .string = "--mno-check-zero-division",
            .descr = &.{"MIPS: Don't trap on integer division by zero."},
        },
        .{
            .name = "mno_compound",
            .string = "--mno-compound",
            .descr = &.{"Disable looking for compound instructions for Hexagon"},
        },
        .{
            .name = "mno_fixup",
            .string = "--mno-fixup",
            .descr = &.{"Disable fixing up resolved relocations for Hexagon"},
        },
        .{
            .name = "mno_hvx",
            .string = "--mno-hvx",
            .descr = &.{"Disable Hexagon Vector eXtensions"},
        },
        .{
            .name = "mno_ldc1_sdc1",
            .string = "--mno-ldc1-sdc1",
            .descr = &.{"Expand double precision loads and stores to their single precision counterparts"},
        },
        .{
            .name = "mno_pairing",
            .string = "--mno-pairing",
            .descr = &.{"Disable looking for duplex instructions for Hexagon"},
        },
        .{
            .name = "mno_sort_sda",
            .string = "--mno-sort-sda",
            .descr = &.{"Disable small data sections sorting"},
        },
        .{
            .name = "module_summary_dot_file",
            .string = "--module-summary-dot-file",
            .descr = &.{"File to emit dot graph of new summary into"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "moudle_inliner_top_priority_threshold",
            .string = "--moudle-inliner-top-priority-threshold",
            .descr = &.{"The cost threshold for call sites that get inlined without the cost-benefit analysis"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "msan_and_mask",
            .string = "--msan-and-mask",
            .descr = &.{"Define custom MSan AndMask"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "msan_check_access_address",
            .string = "--msan-check-access-address",
            .descr = &.{"report accesses through a pointer which has poisoned shadow"},
        },
        .{
            .name = "msan_check_constant_shadow",
            .string = "--msan-check-constant-shadow",
            .descr = &.{"Insert checks for constant shadow values"},
        },
        .{
            .name = "msan_disable_checks",
            .string = "--msan-disable-checks",
            .descr = &.{"Apply no_sanitize to the whole file"},
        },
        .{
            .name = "msan_disambiguate_warning_threshold",
            .string = "--msan-disambiguate-warning-threshold",
            .descr = &.{"Define threshold for number of checks per debug location to force origin update."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "msan_dump_strict_instructions",
            .string = "--msan-dump-strict-instructions",
            .descr = &.{"print out instructions with default strict semantics"},
        },
        .{
            .name = "msan_eager_checks",
            .string = "--msan-eager-checks",
            .descr = &.{"check arguments and return values at function call boundaries"},
        },
        .{
            .name = "msan_handle_asm_conservative",
            .string = "--msan-handle-asm-conservative",
            .descr = &.{"conservative handling of inline assembly"},
        },
        .{
            .name = "msan_handle_icmp",
            .string = "--msan-handle-icmp",
            .descr = &.{"propagate shadow through ICmpEQ and ICmpNE"},
        },
        .{
            .name = "msan_handle_icmp_exact",
            .string = "--msan-handle-icmp-exact",
            .descr = &.{"exact handling of relational integer ICmp"},
        },
        .{
            .name = "msan_handle_lifetime_intrinsics",
            .string = "--msan-handle-lifetime-intrinsics",
            .descr = &.{"when possible, poison scoped variables at the beginning of the scope (slower, but more precise)"},
        },
        .{
            .name = "msan_instrumentation_with_call_threshold",
            .string = "--msan-instrumentation-with-call-threshold",
            .descr = &.{"If the function being instrumented requires more than this number of checks and origin stores, use callbacks instead of inline checks (-1 means never use callbacks)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "msan_keep_going",
            .string = "--msan-keep-going",
            .descr = &.{"keep going after reporting a UMR"},
        },
        .{
            .name = "msan_kernel",
            .string = "--msan-kernel",
            .descr = &.{"Enable KernelMemorySanitizer instrumentation"},
        },
        .{
            .name = "msan_origin_base",
            .string = "--msan-origin-base",
            .descr = &.{"Define custom MSan OriginBase"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "msan_poison_stack",
            .string = "--msan-poison-stack",
            .descr = &.{"poison uninitialized stack variables"},
        },
        .{
            .name = "msan_poison_stack_pattern",
            .string = "--msan-poison-stack-pattern",
            .descr = &.{"poison uninitialized stack variables with the given pattern"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "msan_poison_stack_with_call",
            .string = "--msan-poison-stack-with-call",
            .descr = &.{"poison uninitialized stack variables with a call"},
        },
        .{
            .name = "msan_poison_undef",
            .string = "--msan-poison-undef",
            .descr = &.{"poison undef temps"},
        },
        .{
            .name = "msan_print_stack_names",
            .string = "--msan-print-stack-names",
            .descr = &.{"Print name of local stack variable"},
        },
        .{
            .name = "msan_shadow_base",
            .string = "--msan-shadow-base",
            .descr = &.{"Define custom MSan ShadowBase"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "msan_track_origins",
            .string = "--msan-track-origins",
            .descr = &.{"Track origins (allocation sites) of poisoned memory"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "msan_with_comdat",
            .string = "--msan-with-comdat",
            .descr = &.{"Place MSan constructors in comdat sections"},
        },
        .{
            .name = "msan_xor_mask",
            .string = "--msan-xor-mask",
            .descr = &.{"Define custom MSan XorMask"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "msp430_branch_select",
            .string = "--msp430-branch-select",
            .descr = &.{"Expand out of range branches"},
        },
        .{
            .name = "msp430_no_legal_immediate",
            .string = "--msp430-no-legal-immediate",
            .descr = &.{"Enable non legal immediates (for testing purposes only)"},
        },
        .{
            .name = "mtriple",
            .string = "--mtriple",
            .descr = &.{"Override target triple for module"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "mul_constant_optimization",
            .string = "--mul-constant-optimization",
            .descr = &.{"Replace 'mul x, Const' with more effective instructions like SHIFT, LEA, etc."},
        },
        .{
            .name = "mv5",
            .string = "--mv5",
            .descr = &.{"Build for Hexagon V5"},
        },
        .{
            .name = "mv55",
            .string = "--mv55",
            .descr = &.{"Build for Hexagon V55"},
        },
        .{
            .name = "mv60",
            .string = "--mv60",
            .descr = &.{"Build for Hexagon V60"},
        },
        .{
            .name = "mv62",
            .string = "--mv62",
            .descr = &.{"Build for Hexagon V62"},
        },
        .{
            .name = "mv65",
            .string = "--mv65",
            .descr = &.{"Build for Hexagon V65"},
        },
        .{
            .name = "mv66",
            .string = "--mv66",
            .descr = &.{"Build for Hexagon V66"},
        },
        .{
            .name = "mv67",
            .string = "--mv67",
            .descr = &.{"Build for Hexagon V67"},
        },
        .{
            .name = "mv67t",
            .string = "--mv67t",
            .descr = &.{"Build for Hexagon V67T"},
        },
        .{
            .name = "mv68",
            .string = "--mv68",
            .descr = &.{"Build for Hexagon V68"},
        },
        .{
            .name = "mv69",
            .string = "--mv69",
            .descr = &.{"Build for Hexagon V69"},
        },
        .{
            .name = "mv71",
            .string = "--mv71",
            .descr = &.{"Build for Hexagon V71"},
        },
        .{
            .name = "mv71t",
            .string = "--mv71t",
            .descr = &.{"Build for Hexagon V71T"},
        },
        .{
            .name = "mv73",
            .string = "--mv73",
            .descr = &.{"Build for Hexagon V73"},
        },
        .{
            .name = "mve_max_interleave_factor",
            .string = "--mve-max-interleave-factor",
            .descr = &.{"Maximum interleave factor for MVE VLDn to generate."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "mwarn_missing_parenthesis",
            .string = "--mwarn-missing-parenthesis",
            .descr = &.{"Warn for missing parenthesis around predicate registers"},
        },
        .{
            .name = "mwarn_noncontigious_register",
            .string = "--mwarn-noncontigious-register",
            .descr = &.{"Warn for register names that arent contigious"},
        },
        .{
            .name = "mwarn_sign_mismatch",
            .string = "--mwarn-sign-mismatch",
            .descr = &.{"Warn for mismatching a signed and unsigned value"},
        },
        .{
            .name = "no_deprecated_warn",
            .string = "--no-deprecated-warn",
            .descr = &.{"Suppress all deprecated warnings"},
        },
        .{
            .name = "no_discriminators",
            .string = "--no-discriminators",
            .descr = &.{"Disable generation of discriminator information."},
        },
        .{
            .name = "no_dwarf_ranges_section",
            .string = "--no-dwarf-ranges-section",
            .descr = &.{"Disable emission .debug_ranges section."},
        },
        .{
            .name = "no_integrated_as",
            .string = "--no-integrated-as",
            .descr = &.{"Disable integrated assembler"},
        },
        .{
            .name = "no_pgo_warn_mismatch",
            .string = "--no-pgo-warn-mismatch",
            .descr = &.{"Use this option to turn off/on warnings about profile cfg mismatch."},
        },
        .{
            .name = "no_pgo_warn_mismatch_comdat_weak",
            .string = "--no-pgo-warn-mismatch-comdat-weak",
            .descr = &.{"The option is used to turn on/off warnings about hash mismatch for comdat or weak functions."},
        },
        .{
            .name = "no_phi_elim_live_out_early_exit",
            .string = "--no-phi-elim-live-out-early-exit",
            .descr = &.{"Do not use an early exit if isLiveOutPastPHIs returns true."},
        },
        .{
            .name = "no_stack_coloring",
            .string = "--no-stack-coloring",
            .descr = &.{"Disable stack coloring"},
        },
        .{
            .name = "no_stack_slot_sharing",
            .string = "--no-stack-slot-sharing",
            .descr = &.{"Suppress slot sharing during stack coloring"},
        },
        .{
            .name = "no_type_check",
            .string = "--no-type-check",
            .descr = &.{"Suppress type errors (Wasm)"},
        },
        .{
            .name = "no_warn",
            .string = "--no-warn",
            .descr = &.{"Suppress all warnings"},
        },
        .{
            .name = "no_warn_sample_unused",
            .string = "--no-warn-sample-unused",
            .descr = &.{"Use this option to turn off/on warnings about function with samples but without debug information to use those samples. "},
        },
        .{
            .name = "no_x86_call_frame_opt",
            .string = "--no-x86-call-frame-opt",
            .descr = &.{"Avoid optimizing x86 call frames for size"},
        },
        .{
            .name = "no_xray_index",
            .string = "--no-xray-index",
            .descr = &.{"Don't emit xray_fn_idx section"},
        },
        .{
            .name = "non_global_value_max_name_size",
            .string = "--non-global-value-max-name-size",
            .descr = &.{"Maximum size for the name of non-global values."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "nozero_initialized_in_bss",
            .string = "--nozero-initialized-in-bss",
            .descr = &.{"Don't place zero-initialized symbols into bss section"},
        },
        .{
            .name = "number_scavenger_slots",
            .string = "--number-scavenger-slots",
            .descr = &.{"Set the number of scavenger slots"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "nvj_count",
            .string = "--nvj-count",
            .descr = &.{"Maximum number of predicated jumps to be converted to New Value Jump"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "nvptx_fma_level",
            .string = "--nvptx-fma-level",
            .descr = &.{"NVPTX Specific: FMA contraction (0: don't do it 1: do it  2: do it aggressively"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "nvptx_no_f16_math",
            .string = "--nvptx-no-f16-math",
            .descr = &.{"NVPTX Specific: Disable generation of f16 math ops."},
        },
        .{
            .name = "nvptx_prec_divf32",
            .string = "--nvptx-prec-divf32",
            .descr = &.{"NVPTX Specifies: 0 use div.approx, 1 use div.full, 2 use IEEE Compliant F32 div.rnd if available."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "nvptx_prec_sqrtf32",
            .string = "--nvptx-prec-sqrtf32",
            .descr = &.{"NVPTX Specific: 0 use sqrt.approx, 1 use sqrt.rn."},
        },
        .{
            .name = "nvptx_sched4reg",
            .string = "--nvptx-sched4reg",
            .descr = &.{"NVPTX Specific: schedule for register pressue"},
        },
        .{
            .name = "nvptx_short_ptr",
            .string = "--nvptx-short-ptr",
            .descr = &.{"Use 32-bit pointers for accessing const/local/shared address spaces."},
        },
        .{
            .name = "nvvm_intr_range_sm",
            .string = "--nvvm-intr-range-sm",
            .descr = &.{"SM variant"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "nvvm_reflect_enable",
            .string = "--nvvm-reflect-enable",
            .descr = &.{"NVVM reflection, enabled by default"},
        },
        .{
            .name = "old_thumb2_ifcvt",
            .string = "--old-thumb2-ifcvt",
            .descr = &.{"Use old-style Thumb2 if-conversion heuristics"},
        },
        .{
            .name = "only_nonnested_memmove_idiom",
            .string = "--only-nonnested-memmove-idiom",
            .descr = &.{"Only enable generating memmove in non-nested loops"},
        },
        .{
            .name = "only_simple_regions",
            .string = "--only-simple-regions",
            .descr = &.{"Show only simple regions in the graphviz viewer"},
        },
        .{
            .name = "opaque_pointers",
            .string = "--opaque-pointers",
            .descr = &.{"Use opaque pointers"},
        },
        .{
            .name = "openmp_deduce_icv_values",
            .string = "--openmp-deduce-icv-values",
            .descr = &.{""},
        },
        .{
            .name = "openmp_hide_memory_transfer_latency",
            .string = "--openmp-hide-memory-transfer-latency",
            .descr = &.{"[WIP] Tries to hide the latency of host to device memory transfers"},
        },
        .{
            .name = "openmp_ir_builder_optimistic_attributes",
            .string = "--openmp-ir-builder-optimistic-attributes",
            .descr = &.{"Use optimistic attributes describing 'as-if' properties of runtime calls."},
        },
        .{
            .name = "openmp_ir_builder_unroll_threshold_factor",
            .string = "--openmp-ir-builder-unroll-threshold-factor",
            .descr = &.{"Factor for the unroll threshold to account for code simplifications still taking place"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "openmp_opt_disable",
            .string = "--openmp-opt-disable",
            .descr = &.{"Disable OpenMP specific optimizations."},
        },
        .{
            .name = "openmp_opt_disable_barrier_elimination",
            .string = "--openmp-opt-disable-barrier-elimination",
            .descr = &.{"Disable OpenMP optimizations that eliminate barriers."},
        },
        .{
            .name = "openmp_opt_disable_deglobalization",
            .string = "--openmp-opt-disable-deglobalization",
            .descr = &.{"Disable OpenMP optimizations involving deglobalization."},
        },
        .{
            .name = "openmp_opt_disable_folding",
            .string = "--openmp-opt-disable-folding",
            .descr = &.{"Disable OpenMP optimizations involving folding."},
        },
        .{
            .name = "openmp_opt_disable_internalization",
            .string = "--openmp-opt-disable-internalization",
            .descr = &.{"Disable function internalization."},
        },
        .{
            .name = "openmp_opt_disable_spmdization",
            .string = "--openmp-opt-disable-spmdization",
            .descr = &.{"Disable OpenMP optimizations involving SPMD-ization."},
        },
        .{
            .name = "openmp_opt_disable_state_machine_rewrite",
            .string = "--openmp-opt-disable-state-machine-rewrite",
            .descr = &.{"Disable OpenMP optimizations that replace the state machine."},
        },
        .{
            .name = "openmp_opt_enable_merging",
            .string = "--openmp-opt-enable-merging",
            .descr = &.{"Enable the OpenMP region merging optimization."},
        },
        .{
            .name = "openmp_opt_inline_device",
            .string = "--openmp-opt-inline-device",
            .descr = &.{"Inline all applicible functions on the device."},
        },
        .{
            .name = "openmp_opt_max_iterations",
            .string = "--openmp-opt-max-iterations",
            .descr = &.{"Maximal number of attributor iterations."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "openmp_opt_print_module_after",
            .string = "--openmp-opt-print-module-after",
            .descr = &.{"Print the current module after OpenMP optimizations."},
        },
        .{
            .name = "openmp_opt_print_module_before",
            .string = "--openmp-opt-print-module-before",
            .descr = &.{"Print the current module before OpenMP optimizations."},
        },
        .{
            .name = "openmp_opt_shared_limit",
            .string = "--openmp-opt-shared-limit",
            .descr = &.{"Maximum amount of shared memory to use."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "openmp_opt_verbose_remarks",
            .string = "--openmp-opt-verbose-remarks",
            .descr = &.{"Enables more verbose remarks."},
        },
        .{
            .name = "openmp_print_gpu_kernels",
            .string = "--openmp-print-gpu-kernels",
            .descr = &.{""},
        },
        .{
            .name = "openmp_print_icv_values",
            .string = "--openmp-print-icv-values",
            .descr = &.{""},
        },
        .{
            .name = "opt_bisect_limit",
            .string = "--opt-bisect-limit",
            .descr = &.{"Maximum optimization to perform"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "opt_bisect_print_ir_path",
            .string = "--opt-bisect-print-ir-path",
            .descr = &.{"Print IR to path when opt-bisect-limit is reached"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "optimize_regalloc",
            .string = "--optimize-regalloc",
            .descr = &.{"Enable optimized register allocation compilation path."},
        },
        .{
            .name = "optsize_jump_table_density",
            .string = "--optsize-jump-table-density",
            .descr = &.{"Minimum density for building a jump table in an optsize function"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "orderfile_write_mapping",
            .string = "--orderfile-write-mapping",
            .descr = &.{"Dump functions and their MD5 hash to deobfuscate profile data"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "outline_region_freq_percent",
            .string = "--outline-region-freq-percent",
            .descr = &.{"Relative frequency of outline region to the entry block"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "overwrite_existing_weights",
            .string = "--overwrite-existing-weights",
            .descr = &.{"Ignore existing branch weights on IR and always overwrite."},
        },
        .{
            .name = "partial_inlining_extra_penalty",
            .string = "--partial-inlining-extra-penalty",
            .descr = &.{"A debug option to add additional penalty to the computed one."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "partial_profile",
            .string = "--partial-profile",
            .descr = &.{"Specify the current profile is used as a partial profile."},
        },
        .{
            .name = "partial_reg_update_clearance",
            .string = "--partial-reg-update-clearance",
            .descr = &.{"Clearance between two register writes for inserting XOR to avoid partial register update"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "partial_sample_profile_working_set_size_scale_factor",
            .string = "--partial-sample-profile-working-set-size-scale-factor",
            .descr = &.{"The scale factor used to scale the working set size of the partial sample profile along with the partial profile ratio. This includes the factor of the profile counter per block and the factor to scale the working set size to use the same shared thresholds as PGO."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "partial_unrolling_threshold",
            .string = "--partial-unrolling-threshold",
            .descr = &.{"Threshold for partial unrolling"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pass_remarks",
            .string = "--pass-remarks",
            .descr = &.{"Enable optimization remarks from passes whose name match the given regular expression"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "pass_remarks_analysis",
            .string = "--pass-remarks-analysis",
            .descr = &.{"Enable optimization analysis remarks from passes whose name match the given regular expression"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "pass_remarks_filter",
            .string = "--pass-remarks-filter",
            .descr = &.{"Only record optimization remarks from passes whose names match the given regular expression"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "pass_remarks_format",
            .string = "--pass-remarks-format",
            .descr = &.{"The format used for serializing remarks (default: YAML)"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "pass_remarks_hotness_threshold",
            .string = "--pass-remarks-hotness-threshold",
            .descr = &.{"Minimum profile count required for an optimization remark to be output. Use 'auto' to apply the threshold from profile summary."},
        },
        .{
            .name = "pass_remarks_missed",
            .string = "--pass-remarks-missed",
            .descr = &.{"Enable missed optimization remarks from passes whose name match the given regular expression"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "pass_remarks_output",
            .string = "--pass-remarks-output",
            .descr = &.{"Output filename for pass remarks"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "pass_remarks_with_hotness",
            .string = "--pass-remarks-with-hotness",
            .descr = &.{"With PGO, include profile count in optimization remarks"},
        },
        .{
            .name = "pbqp_coalescing",
            .string = "--pbqp-coalescing",
            .descr = &.{"Attempt coalescing during PBQP register allocation."},
        },
        .{
            .name = "persist_profile_staleness",
            .string = "--persist-profile-staleness",
            .descr = &.{"Compute stale profile statistical metrics and write it into the native object file(.llvm_stats section)."},
        },
        .{
            .name = "pgo_critical_edge_threshold",
            .string = "--pgo-critical-edge-threshold",
            .descr = &.{"Do not instrument functions with the number of critical edges  greater than this threshold."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pgo_emit_branch_prob",
            .string = "--pgo-emit-branch-prob",
            .descr = &.{"When this option is on, the annotated branch probability will be emitted as optimization remarks: -{Rpass|pass-remarks}=pgo-instrumentation"},
        },
        .{
            .name = "pgo_fix_entry_count",
            .string = "--pgo-fix-entry-count",
            .descr = &.{"Fix function entry count in profile use."},
        },
        .{
            .name = "pgo_function_entry_coverage",
            .string = "--pgo-function-entry-coverage",
            .descr = &.{"Use this option to enable function entry coverage instrumentation."},
        },
        .{
            .name = "pgo_function_size_threshold",
            .string = "--pgo-function-size-threshold",
            .descr = &.{"Do not instrument functions smaller than this threshold."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pgo_instr_memop",
            .string = "--pgo-instr-memop",
            .descr = &.{"Use this option to turn on/off memory intrinsic size profiling."},
        },
        .{
            .name = "pgo_instr_old_cfg_hashing",
            .string = "--pgo-instr-old-cfg-hashing",
            .descr = &.{"Use the old CFG function hashing"},
        },
        .{
            .name = "pgo_instr_select",
            .string = "--pgo-instr-select",
            .descr = &.{"Use this option to turn on/off SELECT instruction instrumentation. "},
        },
        .{
            .name = "pgo_instrument_entry",
            .string = "--pgo-instrument-entry",
            .descr = &.{"Force to instrument function entry basicblock."},
        },
        .{
            .name = "pgo_match_memprof",
            .string = "--pgo-match-memprof",
            .descr = &.{"Perform matching and annotation of memprof profiles."},
        },
        .{
            .name = "pgo_memop_count_threshold",
            .string = "--pgo-memop-count-threshold",
            .descr = &.{"The minimum count to optimize memory intrinsic calls"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pgo_memop_max_version",
            .string = "--pgo-memop-max-version",
            .descr = &.{"The max version for the optimized memory  intrinsic calls"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pgo_memop_optimize_memcmp_bcmp",
            .string = "--pgo-memop-optimize-memcmp-bcmp",
            .descr = &.{"Size-specialize memcmp and bcmp calls"},
        },
        .{
            .name = "pgo_memop_percent_threshold",
            .string = "--pgo-memop-percent-threshold",
            .descr = &.{"The percentage threshold for the memory intrinsic calls optimization"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pgo_memop_scale_count",
            .string = "--pgo-memop-scale-count",
            .descr = &.{"Scale the memop size counts using the basic  block count value"},
        },
        .{
            .name = "pgo_test_profile_file",
            .string = "--pgo-test-profile-file",
            .descr = &.{"Specify the path of profile data file. This ismainly for test purpose."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "pgo_test_profile_remapping_file",
            .string = "--pgo-test-profile-remapping-file",
            .descr = &.{"Specify the path of profile remapping file. This is mainly for test purpose."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "pgo_verify_bfi",
            .string = "--pgo-verify-bfi",
            .descr = &.{"Print out mismatched BFI counts after setting profile metadata The print is enabled under -Rpass-analysis=pgo, or internal option -pass-remakrs-analysis=pgo."},
        },
        .{
            .name = "pgo_verify_bfi_cutoff",
            .string = "--pgo-verify-bfi-cutoff",
            .descr = &.{"Set the threshold for pgo-verify-bfi: skip the counts whose profile count value is below."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pgo_verify_bfi_ratio",
            .string = "--pgo-verify-bfi-ratio",
            .descr = &.{"Set the threshold for pgo-verify-bfi:  only print out mismatched BFI if the difference percentage is greater than this value (in percentage)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pgo_verify_hot_bfi",
            .string = "--pgo-verify-hot-bfi",
            .descr = &.{"Print out the non-match BFI count if a hot raw profile count becomes non-hot, or a cold raw profile count becomes hot. The print is enabled under -Rpass-analysis=pgo, or internal option -pass-remakrs-analysis=pgo."},
        },
        .{
            .name = "pgo_view_counts",
            .string = "--pgo-view-counts",
            .descr = &.{"A boolean option to show CFG dag or text with block profile counts and branch probabilities right after PGO profile annotation step. The profile counts are computed using branch probabilities from the runtime profile data and block frequency propagation algorithm. To view the raw counts from the profile, use option -pgo-view-raw-counts instead. To limit graph display to only one function, use filtering option -view-bfi-func-name."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, graph = 1, text = 2 }) },
        },
        .{
            .name = "pgo_view_raw_counts",
            .string = "--pgo-view-raw-counts",
            .descr = &.{"A boolean option to show CFG dag or text with raw profile counts from profile data. See also option -pgo-view-counts. To limit graph display to only one function, use filtering option -view-bfi-func-name."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, graph = 1, text = 2 }) },
        },
        .{
            .name = "pgo_warn_misexpect",
            .string = "--pgo-warn-misexpect",
            .descr = &.{"Use this option to turn on/off warnings about incorrect usage of llvm.expect intrinsics."},
        },
        .{
            .name = "pgo_warn_missing_function",
            .string = "--pgo-warn-missing-function",
            .descr = &.{"Use this option to turn on/off warnings about missing profile data for functions."},
        },
        .{
            .name = "pgso",
            .string = "--pgso",
            .descr = &.{"Enable the profile guided size optimizations. "},
        },
        .{
            .name = "pgso_cold_code_only",
            .string = "--pgso-cold-code-only",
            .descr = &.{"Apply the profile guided size optimizations only to cold code."},
        },
        .{
            .name = "pgso_cold_code_only_for_instr_pgo",
            .string = "--pgso-cold-code-only-for-instr-pgo",
            .descr = &.{"Apply the profile guided size optimizations only to cold code under instrumentation PGO."},
        },
        .{
            .name = "pgso_cold_code_only_for_partial_sample_pgo",
            .string = "--pgso-cold-code-only-for-partial-sample-pgo",
            .descr = &.{"Apply the profile guided size optimizations only to cold code under partial-profile sample PGO."},
        },
        .{
            .name = "pgso_cold_code_only_for_sample_pgo",
            .string = "--pgso-cold-code-only-for-sample-pgo",
            .descr = &.{"Apply the profile guided size optimizations only to cold code under sample PGO."},
        },
        .{
            .name = "pgso_cutoff_instr_prof",
            .string = "--pgso-cutoff-instr-prof",
            .descr = &.{"The profile guided size optimization profile summary cutoff for instrumentation profile."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pgso_cutoff_sample_prof",
            .string = "--pgso-cutoff-sample-prof",
            .descr = &.{"The profile guided size optimization profile summary cutoff for sample profile."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pgso_lwss_only",
            .string = "--pgso-lwss-only",
            .descr = &.{"Apply the profile guided size optimizations only if the working set size is large (except for cold code.)"},
        },
        .{
            .name = "phi_elim_split_all_critical_edges",
            .string = "--phi-elim-split-all-critical-edges",
            .descr = &.{"Split all critical edges during PHI elimination"},
        },
        .{
            .name = "phi_node_folding_threshold",
            .string = "--phi-node-folding-threshold",
            .descr = &.{"Control the amount of phi node folding to perform (default = 2)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "phicse_debug_hash",
            .string = "--phicse-debug-hash",
            .descr = &.{"Perform extra assertion checking to verify that PHINodes's hash function is well-behaved w.r.t. its isEqual predicate"},
        },
        .{
            .name = "phicse_num_phi_smallsize",
            .string = "--phicse-num-phi-smallsize",
            .descr = &.{"When the basic block contains not more than this number of PHI nodes, perform a (faster!) exhaustive search instead of set-driven one."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pi_force_live_exit_outline",
            .string = "--pi-force-live-exit-outline",
            .descr = &.{"Force outline regions with live exits"},
        },
        .{
            .name = "pi_mark_coldcc",
            .string = "--pi-mark-coldcc",
            .descr = &.{"Mark outline function calls with ColdCC"},
        },
        .{
            .name = "pipeliner_annotate_for_testing",
            .string = "--pipeliner-annotate-for-testing",
            .descr = &.{"Instead of emitting the pipelined code, annotate instructions with the generated schedule for feeding into the -modulo-schedule-test pass"},
        },
        .{
            .name = "pipeliner_dbg_res",
            .string = "--pipeliner-dbg-res",
            .descr = &.{""},
        },
        .{
            .name = "pipeliner_experimental_cg",
            .string = "--pipeliner-experimental-cg",
            .descr = &.{"Use the experimental peeling code generator for software pipelining"},
        },
        .{
            .name = "pipeliner_force_ii",
            .string = "--pipeliner-force-ii",
            .descr = &.{"Force pipeliner to use specified II."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pipeliner_force_issue_width",
            .string = "--pipeliner-force-issue-width",
            .descr = &.{"Force pipeliner to use specified issue width."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pipeliner_max_mii",
            .string = "--pipeliner-max-mii",
            .descr = &.{"Size limit for the MII."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pipeliner_max_stages",
            .string = "--pipeliner-max-stages",
            .descr = &.{"Maximum stages allowed in the generated scheduled."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pipeliner_prune_deps",
            .string = "--pipeliner-prune-deps",
            .descr = &.{"Prune dependences between unrelated Phi nodes."},
        },
        .{
            .name = "pipeliner_prune_loop_carried",
            .string = "--pipeliner-prune-loop-carried",
            .descr = &.{"Prune loop carried order dependences."},
        },
        .{
            .name = "pipeliner_show_mask",
            .string = "--pipeliner-show-mask",
            .descr = &.{""},
        },
        .{
            .name = "poison_checking_function_local",
            .string = "--poison-checking-function-local",
            .descr = &.{"Check that returns are non-poison (for testing)"},
        },
        .{
            .name = "post_RA_scheduler",
            .string = "--post-RA-scheduler",
            .descr = &.{"Enable scheduling after register allocation"},
        },
        .{
            .name = "postra_sched_debugdiv",
            .string = "--postra-sched-debugdiv",
            .descr = &.{"Debug control MBBs that are scheduled"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "postra_sched_debugmod",
            .string = "--postra-sched-debugmod",
            .descr = &.{"Debug control MBBs that are scheduled"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_always_use_base_pointer",
            .string = "--ppc-always-use-base-pointer",
            .descr = &.{"Force the use of a base pointer in every function"},
        },
        .{
            .name = "ppc_asm_full_reg_names",
            .string = "--ppc-asm-full-reg-names",
            .descr = &.{"Use full register names when printing assembly"},
        },
        .{
            .name = "ppc_bit_perm_rewriter_stress_rotates",
            .string = "--ppc-bit-perm-rewriter-stress-rotates",
            .descr = &.{"stress rotate selection in aggressive ppc isel for bit permutations"},
        },
        .{
            .name = "ppc_chaincommon_max_vars",
            .string = "--ppc-chaincommon-max-vars",
            .descr = &.{"Bucket number per loop for PPC loop chain common"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_chaincommon_min_threshold",
            .string = "--ppc-chaincommon-min-threshold",
            .descr = &.{"Minimal common base load/store instructions triggering chain commoning preparation. Must be not smaller than 4"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_convert_rr_to_ri",
            .string = "--ppc-convert-rr-to-ri",
            .descr = &.{"Convert eligible reg+reg instructions to reg+imm"},
        },
        .{
            .name = "ppc_disable_non_volatile_cr",
            .string = "--ppc-disable-non-volatile-cr",
            .descr = &.{"Disable the use of non-volatile CR register fields"},
        },
        .{
            .name = "ppc_disable_perfect_shuffle",
            .string = "--ppc-disable-perfect-shuffle",
            .descr = &.{"disable vector permute decomposition"},
        },
        .{
            .name = "ppc_dispprep_min_threshold",
            .string = "--ppc-dispprep-min-threshold",
            .descr = &.{"Minimal common base load/store instructions triggering DS/DQ form preparation"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_dqprep_max_vars",
            .string = "--ppc-dqprep-max-vars",
            .descr = &.{"Potential PHI threshold per loop for PPC loop prep of DQ form"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_dsprep_max_vars",
            .string = "--ppc-dsprep-max-vars",
            .descr = &.{"Potential PHI threshold per loop for PPC loop prep of DS form"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_eliminate_signext",
            .string = "--ppc-eliminate-signext",
            .descr = &.{"enable elimination of sign-extensions"},
        },
        .{
            .name = "ppc_eliminate_zeroext",
            .string = "--ppc-eliminate-zeroext",
            .descr = &.{"enable elimination of zero-extensions"},
        },
        .{
            .name = "ppc_enable_coldcc",
            .string = "--ppc-enable-coldcc",
            .descr = &.{"Enable using coldcc calling conv for cold internal functions"},
        },
        .{
            .name = "ppc_enable_gpr_to_vsr_spills",
            .string = "--ppc-enable-gpr-to-vsr-spills",
            .descr = &.{"Enable spills from gpr to vsr rather than stack"},
        },
        .{
            .name = "ppc_enable_pe_vector_spills",
            .string = "--ppc-enable-pe-vector-spills",
            .descr = &.{"Enable spills in prologue to vector registers."},
        },
        .{
            .name = "ppc_enable_pipeliner",
            .string = "--ppc-enable-pipeliner",
            .descr = &.{"Enable Machine Pipeliner for PPC"},
        },
        .{
            .name = "ppc_fma_rp_factor",
            .string = "--ppc-fma-rp-factor",
            .descr = &.{"register pressure factor for the transformations."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_fma_rp_reduction",
            .string = "--ppc-fma-rp-reduction",
            .descr = &.{"enable register pressure reduce in machine combiner pass."},
        },
        .{
            .name = "ppc_formprep_chain_commoning",
            .string = "--ppc-formprep-chain-commoning",
            .descr = &.{"Enable chain commoning in PPC loop prepare pass."},
        },
        .{
            .name = "ppc_formprep_max_vars",
            .string = "--ppc-formprep-max-vars",
            .descr = &.{"Potential common base number threshold per function for PPC loop prep"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_formprep_prefer_update",
            .string = "--ppc-formprep-prefer-update",
            .descr = &.{"prefer update form when ds form is also a update form"},
        },
        .{
            .name = "ppc_formprep_update_nonconst_inc",
            .string = "--ppc-formprep-update-nonconst-inc",
            .descr = &.{"prepare update form when the load/store increment is a loop invariant non-const value."},
        },
        .{
            .name = "ppc_gen_isel",
            .string = "--ppc-gen-isel",
            .descr = &.{"Enable generating the ISEL instruction."},
        },
        .{
            .name = "ppc_gep_opt",
            .string = "--ppc-gep-opt",
            .descr = &.{"Enable optimizations on complex GEPs"},
        },
        .{
            .name = "ppc_gpr_icmps",
            .string = "--ppc-gpr-icmps",
            .descr = &.{"Specify the types of comparisons to emit GPR-only code for."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u4) { none = 0, all = 1, i32 = 2, i64 = 3, nonextin = 4, zext = 5, zexti32 = 6, zexti64 = 7, sext = 8, sexti32 = 9, sexti64 = 10 }) },
        },
        .{
            .name = "ppc_late_peephole",
            .string = "--ppc-late-peephole",
            .descr = &.{"Run pre-emit peephole optimizations."},
        },
        .{
            .name = "ppc_lsr_no_insns_cost",
            .string = "--ppc-lsr-no-insns-cost",
            .descr = &.{"Do not add instruction count to lsr cost model"},
        },
        .{
            .name = "ppc_machine_combiner",
            .string = "--ppc-machine-combiner",
            .descr = &.{"Enable the machine combiner pass"},
        },
        .{
            .name = "ppc_max_crbit_spill_dist",
            .string = "--ppc-max-crbit-spill-dist",
            .descr = &.{"Maximum search distance for definition of CR bit spill on ppc"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_old_latency_calc",
            .string = "--ppc-old-latency-calc",
            .descr = &.{"Use the old (incorrect) instruction latency calculation"},
        },
        .{
            .name = "ppc_opt_conditional_trap",
            .string = "--ppc-opt-conditional-trap",
            .descr = &.{"enable optimization of conditional traps"},
        },
        .{
            .name = "ppc_pcrel_linker_opt",
            .string = "--ppc-pcrel-linker-opt",
            .descr = &.{"enable PC Relative linker optimization"},
        },
        .{
            .name = "ppc_postra_bias_addi",
            .string = "--ppc-postra-bias-addi",
            .descr = &.{"Enable scheduling addi instruction as earlyas possible post ra"},
        },
        .{
            .name = "ppc_preinc_prep_max_vars",
            .string = "--ppc-preinc-prep-max-vars",
            .descr = &.{"Potential PHI threshold per loop for PPC loop prep of update form"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_quadword_atomics",
            .string = "--ppc-quadword-atomics",
            .descr = &.{"enable quadword lock-free atomic operations"},
        },
        .{
            .name = "ppc_reduce_cr_logicals",
            .string = "--ppc-reduce-cr-logicals",
            .descr = &.{"Expand eligible cr-logical binary ops to branches"},
        },
        .{
            .name = "ppc_reg_to_imm_fixed_point",
            .string = "--ppc-reg-to-imm-fixed-point",
            .descr = &.{"Iterate to a fixed point when attempting to convert reg-reg instructions to reg-imm"},
        },
        .{
            .name = "ppc_reg_with_percent_prefix",
            .string = "--ppc-reg-with-percent-prefix",
            .descr = &.{"Prints full register names with percent"},
        },
        .{
            .name = "ppc_set_dscr",
            .string = "--ppc-set-dscr",
            .descr = &.{"Set the Data Stream Control Register."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "ppc_stack_ptr_caller_preserved",
            .string = "--ppc-stack-ptr-caller-preserved",
            .descr = &.{"Consider R1 caller preserved so stack saves of caller preserved registers can be LICM candidates"},
        },
        .{
            .name = "ppc_tls_opt",
            .string = "--ppc-tls-opt",
            .descr = &.{"Enable tls optimization peephole"},
        },
        .{
            .name = "ppc_track_subreg_liveness",
            .string = "--ppc-track-subreg-liveness",
            .descr = &.{"Enable subregister liveness tracking for PPC"},
        },
        .{
            .name = "ppc_use_absolute_jumptables",
            .string = "--ppc-use-absolute-jumptables",
            .descr = &.{"use absolute jump tables on ppc"},
        },
        .{
            .name = "ppc_use_base_pointer",
            .string = "--ppc-use-base-pointer",
            .descr = &.{"Enable use of a base pointer for complex stack frames"},
        },
        .{
            .name = "ppc_use_bit_perm_rewriter",
            .string = "--ppc-use-bit-perm-rewriter",
            .descr = &.{"use aggressive ppc isel for bit permutations"},
        },
        .{
            .name = "ppc_use_branch_hint",
            .string = "--ppc-use-branch-hint",
            .descr = &.{"Enable static hinting of branches on ppc"},
        },
        .{
            .name = "ppc_vsr_nums_as_vr",
            .string = "--ppc-vsr-nums-as-vr",
            .descr = &.{"Prints full register names with vs{31-63} as v{0-31}"},
        },
        .{
            .name = "pragma_unroll_and_jam_threshold",
            .string = "--pragma-unroll-and-jam-threshold",
            .descr = &.{"Unrolled size limit for loops with an unroll_and_jam(full) or unroll_count pragma."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pragma_unroll_threshold",
            .string = "--pragma-unroll-threshold",
            .descr = &.{"Unrolled size limit for loops with an unroll(full) or unroll_count pragma."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pragma_vectorize_scev_check_threshold",
            .string = "--pragma-vectorize-scev-check-threshold",
            .descr = &.{"The maximum number of SCEV checks allowed with a vectorize(enable) pragma"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "pre_RA_sched",
            .string = "--pre-RA-sched",
            .descr = &.{"Instruction schedulers available (before register allocation):"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { @"vliw-td" = 0, @"list-ilp" = 1, @"list-hybrid" = 2, source = 3, @"list-burr" = 4, linearize = 5, fast = 6, default = 7 }) },
        },
        .{
            .name = "precise_rotation_cost",
            .string = "--precise-rotation-cost",
            .descr = &.{"Model the cost of loop rotation more precisely by using profile data."},
        },
        .{
            .name = "prefer_inloop_reductions",
            .string = "--prefer-inloop-reductions",
            .descr = &.{"Prefer in-loop vector reductions, overriding the targets preference."},
        },
        .{
            .name = "prefer_no_csel",
            .string = "--prefer-no-csel",
            .descr = &.{"Prefer predicated Move to CSEL"},
        },
        .{
            .name = "prefer_predicate_over_epilogue",
            .string = "--prefer-predicate-over-epilogue",
            .descr = &.{"Tail-folding and predication preferences over creating a scalar epilogue loop."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { @"scalar-epilogue" = 0, @"predicate-else-scalar-epilogue" = 1, @"predicate-dont-vectorize" = 2 }) },
        },
        .{
            .name = "prefer_predicated_reduction_select",
            .string = "--prefer-predicated-reduction-select",
            .descr = &.{"Prefer predicating a reduction operation over an after loop select."},
        },
        .{
            .name = "prefetch_distance",
            .string = "--prefetch-distance",
            .descr = &.{"Number of instructions to prefetch ahead"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "prefetch_hints_file",
            .string = "--prefetch-hints-file",
            .descr = &.{"Path to the prefetch hints profile. See also -x86-discriminate-memops"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "preinline_threshold",
            .string = "--preinline-threshold",
            .descr = &.{"Control the amount of inlining in pre-instrumentation inliner (default = 75)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "preserve_alignment_assumptions_during_inlining",
            .string = "--preserve-alignment-assumptions-during-inlining",
            .descr = &.{"Convert align attributes to assumptions during inlining."},
        },
        .{
            .name = "preserve_as_comments",
            .string = "--preserve-as-comments",
            .descr = &.{"Preserve Comments in outputted assembly"},
        },
        .{
            .name = "print_after",
            .string = "--print-after",
            .descr = &.{"Print IR after specified passes"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "print_after_all",
            .string = "--print-after-all",
            .descr = &.{"Print IR after each pass"},
        },
        .{
            .name = "print_after_isel",
            .string = "--print-after-isel",
            .descr = &.{"Print machine instrs after ISel"},
        },
        .{
            .name = "print_all_options",
            .string = "--print-all-options",
            .descr = &.{"Print all option values after command line parsing"},
        },
        .{
            .name = "print_before",
            .string = "--print-before",
            .descr = &.{"Print IR before specified passes"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "print_before_all",
            .string = "--print-before-all",
            .descr = &.{"Print IR before each pass"},
        },
        .{
            .name = "print_before_changed",
            .string = "--print-before-changed",
            .descr = &.{"Print before passes that change them"},
        },
        .{
            .name = "print_bfi",
            .string = "--print-bfi",
            .descr = &.{"Print the block frequency info."},
        },
        .{
            .name = "print_bfi_func_name",
            .string = "--print-bfi-func-name",
            .descr = &.{"The option to specify the name of the function whose block frequency info is printed."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "print_bpi",
            .string = "--print-bpi",
            .descr = &.{"Print the branch probability info."},
        },
        .{
            .name = "print_bpi_func_name",
            .string = "--print-bpi-func-name",
            .descr = &.{"The option to specify the name of the function whose branch probability info is printed."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "print_changed",
            .string = "--print-changed",
            .descr = &.{"Print changed IRs"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { quiet = 0, diff = 1, @"diff-quiet" = 2, cdiff = 3, @"cdiff-quiet" = 4, @"dot-cfg" = 5, @"dot-cfg-quiet" = 6 }) },
        },
        .{
            .name = "print_changed_dot_path",
            .string = "--print-changed-dot-path",
            .descr = &.{"system dot used by change reporters"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "print_debug_ata",
            .string = "--print-debug-ata",
            .descr = &.{""},
        },
        .{
            .name = "print_debug_counter",
            .string = "--print-debug-counter",
            .descr = &.{"Print out debug counter info after all counters accumulated"},
        },
        .{
            .name = "print_failed_fuse_candidates",
            .string = "--print-failed-fuse-candidates",
            .descr = &.{"Print instructions that the allocator wants to fuse, but the X86 backend currently can't"},
        },
        .{
            .name = "print_gc",
            .string = "--print-gc",
            .descr = &.{"Dump garbage collector data"},
        },
        .{
            .name = "print_import_failures",
            .string = "--print-import-failures",
            .descr = &.{"Print information for functions rejected for importing"},
        },
        .{
            .name = "print_imports",
            .string = "--print-imports",
            .descr = &.{"Print imported functions"},
        },
        .{
            .name = "print_instruction_comments",
            .string = "--print-instruction-comments",
            .descr = &.{"Prints comments for instruction based on inline cost analysis"},
        },
        .{
            .name = "print_isel_input",
            .string = "--print-isel-input",
            .descr = &.{"Print LLVM IR input to isel pass"},
        },
        .{
            .name = "print_lsr_output",
            .string = "--print-lsr-output",
            .descr = &.{"Print LLVM IR produced by the loop-reduce pass"},
        },
        .{
            .name = "print_lvi_after_jump_threading",
            .string = "--print-lvi-after-jump-threading",
            .descr = &.{"Print the LazyValueInfo cache after JumpThreading"},
        },
        .{
            .name = "print_machine_bfi",
            .string = "--print-machine-bfi",
            .descr = &.{"Print the machine block frequency info."},
        },
        .{
            .name = "print_module_scope",
            .string = "--print-module-scope",
            .descr = &.{"When printing IR for print-[before|after]{-all} always print a module IR"},
        },
        .{
            .name = "print_on_crash",
            .string = "--print-on-crash",
            .descr = &.{"Print the last form of the IR before crash"},
        },
        .{
            .name = "print_options",
            .string = "--print-options",
            .descr = &.{"Print non-default options after command line parsing"},
        },
        .{
            .name = "print_pipeline_passes",
            .string = "--print-pipeline-passes",
            .descr = &.{"Print a '-passes' compatible string describing the pipeline (best-effort only)."},
        },
        .{
            .name = "print_region_style",
            .string = "--print-region-style",
            .descr = &.{"style of printing regions"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, bb = 1, rn = 2 }) },
        },
        .{
            .name = "print_regmask_num_regs",
            .string = "--print-regmask-num-regs",
            .descr = &.{"Number of registers to limit to when printing regmask operands in IR dumps. unlimited = -1"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "print_regusage",
            .string = "--print-regusage",
            .descr = &.{"print register usage details collected for analysis."},
        },
        .{
            .name = "print_slotindexes",
            .string = "--print-slotindexes",
            .descr = &.{"When printing machine IR, annotate instructions and blocks with SlotIndexes when available"},
        },
        .{
            .name = "print_summary_global_ids",
            .string = "--print-summary-global-ids",
            .descr = &.{"Print the global id for each value when reading the module summary"},
        },
        .{
            .name = "procres_cost_lim",
            .string = "--procres-cost-lim",
            .descr = &.{"The OOO window for processor resources during scheduling."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "profile_accurate_for_symsinlist",
            .string = "--profile-accurate-for-symsinlist",
            .descr = &.{"For symbols in profile symbol list, regard their profiles to be accurate. It may be overriden by profile-sample-accurate. "},
        },
        .{
            .name = "profile_guided_section_prefix",
            .string = "--profile-guided-section-prefix",
            .descr = &.{"Use profile info to add section prefix for hot/cold functions"},
        },
        .{
            .name = "profile_isfs",
            .string = "--profile-isfs",
            .descr = &.{"Profile uses flow sensitive discriminators"},
        },
        .{
            .name = "profile_likely_prob",
            .string = "--profile-likely-prob",
            .descr = &.{"branch probability threshold in percentage to be considered very likely when profile is available"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "profile_sample_accurate",
            .string = "--profile-sample-accurate",
            .descr = &.{"If the sample profile is accurate, we will mark all un-sampled callsite and function as having 0 samples. Otherwise, treat un-sampled callsites and functions conservatively as unknown."},
        },
        .{
            .name = "profile_sample_block_accurate",
            .string = "--profile-sample-block-accurate",
            .descr = &.{"If the sample profile is accurate, we will mark all un-sampled branches and calls as having 0 samples. Otherwise, treat them conservatively as unknown."},
        },
        .{
            .name = "profile_summary_contextless",
            .string = "--profile-summary-contextless",
            .descr = &.{"Merge context profiles before calculating thresholds."},
        },
        .{
            .name = "profile_summary_cutoff_cold",
            .string = "--profile-summary-cutoff-cold",
            .descr = &.{"A count is cold if it is below the minimum count to reach this percentile of total counts."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "profile_summary_cutoff_hot",
            .string = "--profile-summary-cutoff-hot",
            .descr = &.{"A count is hot if it exceeds the minimum count to reach this percentile of total counts."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "profile_summary_huge_working_set_size_threshold",
            .string = "--profile-summary-huge-working-set-size-threshold",
            .descr = &.{"The code working set size is considered huge if the number of blocks required to reach the -profile-summary-cutoff-hot percentile exceeds this count."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "profile_summary_large_working_set_size_threshold",
            .string = "--profile-summary-large-working-set-size-threshold",
            .descr = &.{"The code working set size is considered large if the number of blocks required to reach the -profile-summary-cutoff-hot percentile exceeds this count."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "profile_symbol_list_cutoff",
            .string = "--profile-symbol-list-cutoff",
            .descr = &.{"Cutoff value about how many symbols in profile symbol list will be used. This is very useful for performance debugging"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "profile_unknown_in_special_section",
            .string = "--profile-unknown-in-special-section",
            .descr = &.{"In profiling mode like sampleFDO, if a function doesn't have profile, we cannot tell the function is cold for sure because it may be a function newly added without ever being sampled. With the flag enabled, compiler can put such profile unknown functions into a special section, so runtime system can choose to handle it in a different way than .text section, to save RAM for example. "},
        },
        .{
            .name = "propagate_attrs",
            .string = "--propagate-attrs",
            .descr = &.{"Propagate attributes in index"},
        },
        .{
            .name = "protect_from_escaped_allocas",
            .string = "--protect-from-escaped-allocas",
            .descr = &.{"Do not optimize lifetime zones that are broken"},
        },
        .{
            .name = "r600_ir_structurize",
            .string = "--r600-ir-structurize",
            .descr = &.{"Use StructurizeCFG IR pass"},
        },
        .{
            .name = "rafast_ignore_missing_defs",
            .string = "--rafast-ignore-missing-defs",
            .descr = &.{""},
        },
        .{
            .name = "rdf_dump",
            .string = "--rdf-dump",
            .descr = &.{""},
        },
        .{
            .name = "rdf_limit",
            .string = "--rdf-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "rdf_liveness_max_rec",
            .string = "--rdf-liveness-max-rec",
            .descr = &.{"Maximum recursion level"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "rdf_opt",
            .string = "--rdf-opt",
            .descr = &.{"Enable RDF-based optimizations"},
        },
        .{
            .name = "reassociate_geps_verify_no_dead_code",
            .string = "--reassociate-geps-verify-no-dead-code",
            .descr = &.{"Verify this pass produces no dead code"},
        },
        .{
            .name = "rebalance_only_imbal",
            .string = "--rebalance-only-imbal",
            .descr = &.{"Rebalance address tree only if it is imbalanced"},
        },
        .{
            .name = "rebalance_only_opt",
            .string = "--rebalance-only-opt",
            .descr = &.{"Rebalance address tree only if this allows optimizations"},
        },
        .{
            .name = "recurrence_chain_limit",
            .string = "--recurrence-chain-limit",
            .descr = &.{"Maximum length of recurrence chain when evaluating the benefit of commuting operands"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "recursive_inline_max_stacksize",
            .string = "--recursive-inline-max-stacksize",
            .descr = &.{"Do not inline recursive functions with a stack size that exceeds the specified limit"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "regalloc",
            .string = "--regalloc",
            .descr = &.{"Register allocator to use"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { pbqp = 0, greedy = 1, fast = 2, basic = 3, default = 4 }) },
        },
        .{
            .name = "regalloc_cheap_remat_weight",
            .string = "--regalloc-cheap-remat-weight",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "regalloc_copy_weight",
            .string = "--regalloc-copy-weight",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "regalloc_csr_first_time_cost",
            .string = "--regalloc-csr-first-time-cost",
            .descr = &.{"Cost for first time use of callee-saved register."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "regalloc_enable_advisor",
            .string = "--regalloc-enable-advisor",
            .descr = &.{"Enable regalloc advisor mode"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { default = 0, release = 1, development = 2 }) },
        },
        .{
            .name = "regalloc_enable_priority_advisor",
            .string = "--regalloc-enable-priority-advisor",
            .descr = &.{"Enable regalloc advisor mode"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { default = 0, release = 1, development = 2 }) },
        },
        .{
            .name = "regalloc_eviction_max_interference_cutoff",
            .string = "--regalloc-eviction-max-interference-cutoff",
            .descr = &.{"Number of interferences after which we declare an interference unevictable and bail out. This is a compilation cost-saving consideration. To disable, pass a very large number."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "regalloc_expensive_remat_weight",
            .string = "--regalloc-expensive-remat-weight",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "regalloc_load_weight",
            .string = "--regalloc-load-weight",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "regalloc_store_weight",
            .string = "--regalloc-store-weight",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "regbankselect_fast",
            .string = "--regbankselect-fast",
            .descr = &.{"Run the Fast mode (default mapping)"},
        },
        .{
            .name = "regbankselect_greedy",
            .string = "--regbankselect-greedy",
            .descr = &.{"Use the Greedy mode (best local mapping)"},
        },
        .{
            .name = "relax_elf_relocations",
            .string = "--relax-elf-relocations",
            .descr = &.{"Emit GOTPCRELX/REX_GOTPCRELX instead of GOTPCREL on x86-64 ELF"},
        },
        .{
            .name = "relax_nv_checks",
            .string = "--relax-nv-checks",
            .descr = &.{"Relax checks of new-value validity"},
        },
        .{
            .name = "relocation_model",
            .string = "--relocation-model",
            .descr = &.{"Choose relocation model"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { static = 0, pic = 1, @"dynamic-no-pic" = 2, ropi = 3, rwpi = 4, @"ropi-rwpi" = 5 }) },
        },
        .{
            .name = "remarks_section",
            .string = "--remarks-section",
            .descr = &.{"Emit a section containing remark diagnostics metadata. By default, this is enabled for the following formats: yaml-strtab, bitstream."},
        },
        .{
            .name = "remat_pic_stub_load",
            .string = "--remat-pic-stub-load",
            .descr = &.{"Re-materialize load from stub in PIC mode"},
        },
        .{
            .name = "rename_exclude_alias_prefixes",
            .string = "--rename-exclude-alias-prefixes",
            .descr = &.{"Prefixes for aliases that don't need to be renamed, separated by a comma"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "rename_exclude_function_prefixes",
            .string = "--rename-exclude-function-prefixes",
            .descr = &.{"Prefixes for functions that don't need to be renamed, separated by a comma"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "rename_exclude_global_prefixes",
            .string = "--rename-exclude-global-prefixes",
            .descr = &.{"Prefixes for global values that don't need to be renamed, separated by a comma"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "rename_exclude_struct_prefixes",
            .string = "--rename-exclude-struct-prefixes",
            .descr = &.{"Prefixes for structs that don't need to be renamed, separated by a comma"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "renumber_blocks_before_view",
            .string = "--renumber-blocks-before-view",
            .descr = &.{"If true, basic blocks are re-numbered before MBP layout is printed into a dot graph. Only used when a function is being printed."},
        },
        .{
            .name = "replexitval",
            .string = "--replexitval",
            .descr = &.{"Choose the strategy to replace exit value in IndVarSimplify"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { never = 0, cheap = 1, unusedindvarinloop = 2, noharduse = 3, always = 4 }) },
        },
        .{
            .name = "report_profile_staleness",
            .string = "--report-profile-staleness",
            .descr = &.{"Compute and report stale profile statistical metrics."},
        },
        .{
            .name = "reroll_num_tolerated_failed_matches",
            .string = "--reroll-num-tolerated-failed-matches",
            .descr = &.{"The maximum number of failures to tolerate during fuzzy matching. (default: 400)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "reserve_regs_for_regalloc",
            .string = "--reserve-regs-for-regalloc",
            .descr = &.{"Reserve physical registers, so they can't be used by register allocator. Should only be used for testing register allocator."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "restrict_statepoint_remat",
            .string = "--restrict-statepoint-remat",
            .descr = &.{"Restrict remat for statepoint operands"},
        },
        .{
            .name = "reverse_csr_restore_seq",
            .string = "--reverse-csr-restore-seq",
            .descr = &.{"reverse the CSR restore sequence"},
        },
        .{
            .name = "rewrite_map_file",
            .string = "--rewrite-map-file",
            .descr = &.{"Symbol Rewrite Map"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "rewrite_phi_limit",
            .string = "--rewrite-phi-limit",
            .descr = &.{"Limit the length of PHI chains to lookup"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "riscv_disable_insert_vsetvl_phi_opt",
            .string = "--riscv-disable-insert-vsetvl-phi-opt",
            .descr = &.{"Disable looking through phis when inserting vsetvlis."},
        },
        .{
            .name = "riscv_disable_regalloc_hints",
            .string = "--riscv-disable-regalloc-hints",
            .descr = &.{"Disable two address hints for register allocation"},
        },
        .{
            .name = "riscv_disable_sextw_removal",
            .string = "--riscv-disable-sextw-removal",
            .descr = &.{"Disable removal of sext.w"},
        },
        .{
            .name = "riscv_disable_strip_w_suffix",
            .string = "--riscv-disable-strip-w-suffix",
            .descr = &.{"Disable strip W suffix"},
        },
        .{
            .name = "riscv_disable_using_constant_pool_for_large_ints",
            .string = "--riscv-disable-using-constant-pool-for-large-ints",
            .descr = &.{"Disable using constant pool for large integers."},
        },
        .{
            .name = "riscv_enable_copyelim",
            .string = "--riscv-enable-copyelim",
            .descr = &.{"Enable the redundant copy elimination pass"},
        },
        .{
            .name = "riscv_enable_global_merge",
            .string = "--riscv-enable-global-merge",
            .descr = &.{"Enable the global merge pass"},
        },
        .{
            .name = "riscv_enable_machine_combiner",
            .string = "--riscv-enable-machine-combiner",
            .descr = &.{"Enable the machine combiner pass"},
        },
        .{
            .name = "riscv_enable_subreg_liveness",
            .string = "--riscv-enable-subreg-liveness",
            .descr = &.{""},
        },
        .{
            .name = "riscv_insert_vsetvl_strict_asserts",
            .string = "--riscv-insert-vsetvl-strict-asserts",
            .descr = &.{"Enable strict assertion checking for the dataflow algorithm"},
        },
        .{
            .name = "riscv_lower_ext_max_web_size",
            .string = "--riscv-lower-ext-max-web-size",
            .descr = &.{"Give the maximum size (in number of nodes) of the web of instructions that we will consider for VW expansion"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "riscv_lower_form_vw_w_with_splat",
            .string = "--riscv-lower-form-vw-w-with-splat",
            .descr = &.{"Allow the formation of VW_W operations (e.g., VWADD_W) with splat constants"},
        },
        .{
            .name = "riscv_lower_fp_repeated_divisors",
            .string = "--riscv-lower-fp-repeated-divisors",
            .descr = &.{"Set the minimum number of repetitions of a divisor to allow transformation to multiplications by the reciprocal"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "riscv_max_build_ints_cost",
            .string = "--riscv-max-build-ints-cost",
            .descr = &.{"The maximum cost used for building integers."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "riscv_no_aliases",
            .string = "--riscv-no-aliases",
            .descr = &.{"Disable the emission of assembler pseudo instructions"},
        },
        .{
            .name = "riscv_prefer_whole_register_move",
            .string = "--riscv-prefer-whole-register-move",
            .descr = &.{"Prefer whole register move for vector registers."},
        },
        .{
            .name = "riscv_v_fixed_length_vector_lmul_max",
            .string = "--riscv-v-fixed-length-vector-lmul-max",
            .descr = &.{"The maximum LMUL value to use for fixed length vectors. Fractional LMUL values are not supported."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "riscv_v_register_bit_width_lmul",
            .string = "--riscv-v-register-bit-width-lmul",
            .descr = &.{"The LMUL to use for getRegisterBitWidth queries. Affects LMUL used by autovectorized code. Fractional LMULs are not supported."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "riscv_v_slp_max_vf",
            .string = "--riscv-v-slp-max-vf",
            .descr = &.{"Result used for getMaximumVF query which is used exclusively by SLP vectorizer.  Defaults to 1 which disables SLP."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "riscv_v_vector_bits_max",
            .string = "--riscv-v-vector-bits-max",
            .descr = &.{"Assume V extension vector registers are at most this big, with zero meaning no maximum size is assumed."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "riscv_v_vector_bits_min",
            .string = "--riscv-v-vector-bits-min",
            .descr = &.{"Assume V extension vector registers are at least this big, with zero meaning no minimum size is assumed. A value of -1 means use Zvl*b extension. This is primarily used to enable autovectorization with fixed width vectors."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "rotation_max_header_size",
            .string = "--rotation-max-header-size",
            .descr = &.{"The default maximum header size for automatic loop rotation"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "rotation_prepare_for_lto",
            .string = "--rotation-prepare-for-lto",
            .descr = &.{"Run loop-rotation in the prepare-for-lto stage. This option should be used for testing only."},
        },
        .{
            .name = "rs4gc_allow_statepoint_with_no_deopt_info",
            .string = "--rs4gc-allow-statepoint-with-no-deopt-info",
            .descr = &.{""},
        },
        .{
            .name = "rs4gc_clobber_non_live",
            .string = "--rs4gc-clobber-non-live",
            .descr = &.{""},
        },
        .{
            .name = "rs4gc_remat_derived_at_uses",
            .string = "--rs4gc-remat-derived-at-uses",
            .descr = &.{""},
        },
        .{
            .name = "run_pass",
            .string = "--run-pass",
            .descr = &.{"Run compiler only for specified passes (comma separated list)"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "runtime_check_per_loop_load_elim",
            .string = "--runtime-check-per-loop-load-elim",
            .descr = &.{"Max number of memchecks allowed per eliminated load on average"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "runtime_counter_relocation",
            .string = "--runtime-counter-relocation",
            .descr = &.{"Enable relocating counters at runtime."},
        },
        .{
            .name = "runtime_mem_idiom_threshold",
            .string = "--runtime-mem-idiom-threshold",
            .descr = &.{"Threshold (in bytes) for the runtime check guarding the memmove."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "runtime_memory_check_threshold",
            .string = "--runtime-memory-check-threshold",
            .descr = &.{"When performing memory disambiguation checks at runtime do not generate more than this number of comparisons (default = 8)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "safe_stack_coloring",
            .string = "--safe-stack-coloring",
            .descr = &.{"enable safe stack coloring"},
        },
        .{
            .name = "safe_stack_layout",
            .string = "--safe-stack-layout",
            .descr = &.{"enable safe stack layout"},
        },
        .{
            .name = "safepoint_ir_verifier_print_only",
            .string = "--safepoint-ir-verifier-print-only",
            .descr = &.{""},
        },
        .{
            .name = "safestack_use_pointer_address",
            .string = "--safestack-use-pointer-address",
            .descr = &.{""},
        },
        .{
            .name = "sample_profile_check_record_coverage",
            .string = "--sample-profile-check-record-coverage",
            .descr = &.{"Emit a warning if less than N% of records in the input profile are matched to the IR."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_check_sample_coverage",
            .string = "--sample-profile-check-sample-coverage",
            .descr = &.{"Emit a warning if less than N% of samples in the input profile are matched to the IR."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_cold_inline_threshold",
            .string = "--sample-profile-cold-inline-threshold",
            .descr = &.{"Threshold for inlining cold callsites"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_even_flow_distribution",
            .string = "--sample-profile-even-flow-distribution",
            .descr = &.{"Try to evenly distribute flow when there are multiple equally likely options."},
        },
        .{
            .name = "sample_profile_file",
            .string = "--sample-profile-file",
            .descr = &.{"Profile file loaded by -sample-profile"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "sample_profile_hot_inline_threshold",
            .string = "--sample-profile-hot-inline-threshold",
            .descr = &.{"Hot callsite threshold for proirity-based sample profile loader inlining."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_icp_max_prom",
            .string = "--sample-profile-icp-max-prom",
            .descr = &.{"Max number of promotions for a single indirect call callsite in sample profile loader"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_icp_relative_hotness",
            .string = "--sample-profile-icp-relative-hotness",
            .descr = &.{"Relative hotness percentage threshold for indirect call promotion in proirity-based sample profile loader inlining."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_icp_relative_hotness_skip",
            .string = "--sample-profile-icp-relative-hotness-skip",
            .descr = &.{"Skip relative hotness check for ICP up to given number of targets."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_inline_growth_limit",
            .string = "--sample-profile-inline-growth-limit",
            .descr = &.{"The size growth ratio limit for proirity-based sample profile loader inlining."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_inline_limit_max",
            .string = "--sample-profile-inline-limit-max",
            .descr = &.{"The upper bound of size growth limit for proirity-based sample profile loader inlining."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_inline_limit_min",
            .string = "--sample-profile-inline-limit-min",
            .descr = &.{"The lower bound of size growth limit for proirity-based sample profile loader inlining."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_inline_replay",
            .string = "--sample-profile-inline-replay",
            .descr = &.{"Optimization remarks file containing inline remarks to be replayed by inlining from sample profile loader."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "sample_profile_inline_replay_fallback",
            .string = "--sample-profile-inline-replay-fallback",
            .descr = &.{"How sample profile inline replay treats sites that don't come from the replay. Original: defers to original advisor, AlwaysInline: inline all sites not in replay, NeverInline: inline no sites not in replay"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Original = 0, AlwaysInline = 1, NeverInline = 2 }) },
        },
        .{
            .name = "sample_profile_inline_replay_format",
            .string = "--sample-profile-inline-replay-format",
            .descr = &.{"How sample profile inline replay file is formatted"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Line = 0, LineColumn = 1, LineDiscriminator = 2, LineColumnDiscriminator = 3 }) },
        },
        .{
            .name = "sample_profile_inline_replay_scope",
            .string = "--sample-profile-inline-replay-scope",
            .descr = &.{"Whether inline replay should be applied to the entire Module or just the Functions (default) that are present as callers in remarks during sample profile inlining."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { Function = 0, Module = 1 }) },
        },
        .{
            .name = "sample_profile_inline_size",
            .string = "--sample-profile-inline-size",
            .descr = &.{"Inline cold call sites in profile loader if it's beneficial for code size."},
        },
        .{
            .name = "sample_profile_join_islands",
            .string = "--sample-profile-join-islands",
            .descr = &.{"Join isolated components having positive flow."},
        },
        .{
            .name = "sample_profile_max_propagate_iterations",
            .string = "--sample-profile-max-propagate-iterations",
            .descr = &.{"Maximum number of iterations to go through when propagating sample block/edge weights through the CFG."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_merge_inlinee",
            .string = "--sample-profile-merge-inlinee",
            .descr = &.{"Merge past inlinee's profile to outline version if sample profile loader decided not to inline a call site. It will only be enabled when top-down order of profile loading is enabled. "},
        },
        .{
            .name = "sample_profile_prioritized_inline",
            .string = "--sample-profile-prioritized-inline",
            .descr = &.{"Use call site prioritized inlining for sample profile loader.Currently only CSSPGO is supported."},
        },
        .{
            .name = "sample_profile_profi_cost_block_dec",
            .string = "--sample-profile-profi-cost-block-dec",
            .descr = &.{"The cost of decreasing a block's count by one."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_profi_cost_block_entry_dec",
            .string = "--sample-profile-profi-cost-block-entry-dec",
            .descr = &.{"The cost of decreasing the entry block's count by one."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_profi_cost_block_entry_inc",
            .string = "--sample-profile-profi-cost-block-entry-inc",
            .descr = &.{"The cost of increasing the entry block's count by one."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_profi_cost_block_inc",
            .string = "--sample-profile-profi-cost-block-inc",
            .descr = &.{"The cost of increasing a block's count by one."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_profi_cost_block_unknown_inc",
            .string = "--sample-profile-profi-cost-block-unknown-inc",
            .descr = &.{"The cost of increasing an unknown block's count by one."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_profi_cost_block_zero_inc",
            .string = "--sample-profile-profi-cost-block-zero-inc",
            .descr = &.{"The cost of increasing a count of zero-weight block by one."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sample_profile_rebalance_unknown",
            .string = "--sample-profile-rebalance-unknown",
            .descr = &.{"Evenly re-distribute flow among unknown subgraphs."},
        },
        .{
            .name = "sample_profile_recursive_inline",
            .string = "--sample-profile-recursive-inline",
            .descr = &.{"Allow sample loader inliner to inline recursive calls."},
        },
        .{
            .name = "sample_profile_remapping_file",
            .string = "--sample-profile-remapping-file",
            .descr = &.{"Profile remapping file loaded by -sample-profile"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "sample_profile_top_down_load",
            .string = "--sample-profile-top-down-load",
            .descr = &.{"Do profile annotation and inlining for functions in top-down order of call graph during sample profile loading. It only works for new pass manager. "},
        },
        .{
            .name = "sample_profile_use_preinliner",
            .string = "--sample-profile-use-preinliner",
            .descr = &.{"Use the preinliner decisions stored in profile context."},
        },
        .{
            .name = "sample_profile_use_profi",
            .string = "--sample-profile-use-profi",
            .descr = &.{"Use profi to infer block and edge counts."},
        },
        .{
            .name = "sanitizer_coverage_control_flow",
            .string = "--sanitizer-coverage-control-flow",
            .descr = &.{"collect control flow for each function"},
        },
        .{
            .name = "sanitizer_coverage_inline_8bit_counters",
            .string = "--sanitizer-coverage-inline-8bit-counters",
            .descr = &.{"increments 8-bit counter for every edge"},
        },
        .{
            .name = "sanitizer_coverage_inline_bool_flag",
            .string = "--sanitizer-coverage-inline-bool-flag",
            .descr = &.{"sets a boolean flag for every edge"},
        },
        .{
            .name = "sanitizer_coverage_level",
            .string = "--sanitizer-coverage-level",
            .descr = &.{"Sanitizer Coverage. 0: none, 1: entry block, 2: all blocks, 3: all blocks and critical edges"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sanitizer_coverage_pc_table",
            .string = "--sanitizer-coverage-pc-table",
            .descr = &.{"create a static PC table"},
        },
        .{
            .name = "sanitizer_coverage_prune_blocks",
            .string = "--sanitizer-coverage-prune-blocks",
            .descr = &.{"Reduce the number of instrumented blocks"},
        },
        .{
            .name = "sanitizer_coverage_stack_depth",
            .string = "--sanitizer-coverage-stack-depth",
            .descr = &.{"max stack depth tracing"},
        },
        .{
            .name = "sanitizer_coverage_trace_compares",
            .string = "--sanitizer-coverage-trace-compares",
            .descr = &.{"Tracing of CMP and similar instructions"},
        },
        .{
            .name = "sanitizer_coverage_trace_divs",
            .string = "--sanitizer-coverage-trace-divs",
            .descr = &.{"Tracing of DIV instructions"},
        },
        .{
            .name = "sanitizer_coverage_trace_geps",
            .string = "--sanitizer-coverage-trace-geps",
            .descr = &.{"Tracing of GEP instructions"},
        },
        .{
            .name = "sanitizer_coverage_trace_loads",
            .string = "--sanitizer-coverage-trace-loads",
            .descr = &.{"Tracing of load instructions"},
        },
        .{
            .name = "sanitizer_coverage_trace_pc",
            .string = "--sanitizer-coverage-trace-pc",
            .descr = &.{"Experimental pc tracing"},
        },
        .{
            .name = "sanitizer_coverage_trace_pc_guard",
            .string = "--sanitizer-coverage-trace-pc-guard",
            .descr = &.{"pc tracing with a guard"},
        },
        .{
            .name = "sanitizer_coverage_trace_stores",
            .string = "--sanitizer-coverage-trace-stores",
            .descr = &.{"Tracing of store instructions"},
        },
        .{
            .name = "sanitizer_metadata_atomics",
            .string = "--sanitizer-metadata-atomics",
            .descr = &.{"Emit PCs for atomic operations."},
        },
        .{
            .name = "sanitizer_metadata_covered",
            .string = "--sanitizer-metadata-covered",
            .descr = &.{"Emit PCs for covered functions."},
        },
        .{
            .name = "sanitizer_metadata_uar",
            .string = "--sanitizer-metadata-uar",
            .descr = &.{"Emit PCs for start of functions that are subject for use-after-return checking"},
        },
        .{
            .name = "sanitizer_metadata_weak_callbacks",
            .string = "--sanitizer-metadata-weak-callbacks",
            .descr = &.{"Declare callbacks extern weak, and only call if non-null."},
        },
        .{
            .name = "scalable_vectorization",
            .string = "--scalable-vectorization",
            .descr = &.{"Control whether the compiler can use scalable vectors to vectorize a loop"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { off = 0, preferred = 1, on = 2 }) },
        },
        .{
            .name = "scalar_evolution_classify_expressions",
            .string = "--scalar-evolution-classify-expressions",
            .descr = &.{"When printing analysis, include information on every instruction"},
        },
        .{
            .name = "scalar_evolution_finite_loop",
            .string = "--scalar-evolution-finite-loop",
            .descr = &.{"Handle <= and >= in finite loops"},
        },
        .{
            .name = "scalar_evolution_huge_expr_threshold",
            .string = "--scalar-evolution-huge-expr-threshold",
            .descr = &.{"Size of the expression which is considered huge"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scalar_evolution_max_add_rec_size",
            .string = "--scalar-evolution-max-add-rec-size",
            .descr = &.{"Max coefficients in AddRec during evolving"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scalar_evolution_max_arith_depth",
            .string = "--scalar-evolution-max-arith-depth",
            .descr = &.{"Maximum depth of recursive arithmetics"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scalar_evolution_max_cast_depth",
            .string = "--scalar-evolution-max-cast-depth",
            .descr = &.{"Maximum depth of recursive SExt/ZExt/Trunc"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scalar_evolution_max_constant_evolving_depth",
            .string = "--scalar-evolution-max-constant-evolving-depth",
            .descr = &.{"Maximum depth of recursive constant evolving"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scalar_evolution_max_scc_analysis_depth",
            .string = "--scalar-evolution-max-scc-analysis-depth",
            .descr = &.{"Maximum amount of nodes to process while searching SCEVUnknown Phi strongly connected components"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scalar_evolution_max_scev_compare_depth",
            .string = "--scalar-evolution-max-scev-compare-depth",
            .descr = &.{"Maximum depth of recursive SCEV complexity comparisons"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scalar_evolution_max_scev_operations_implication_depth",
            .string = "--scalar-evolution-max-scev-operations-implication-depth",
            .descr = &.{"Maximum depth of recursive SCEV operations implication analysis"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scalar_evolution_max_value_compare_depth",
            .string = "--scalar-evolution-max-value-compare-depth",
            .descr = &.{"Maximum depth of recursive value complexity comparisons"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scalar_evolution_use_context_for_no_wrap_flag_strenghening",
            .string = "--scalar-evolution-use-context-for-no-wrap-flag-strenghening",
            .descr = &.{"Infer nuw/nsw flags using context where suitable"},
        },
        .{
            .name = "scalar_evolution_use_expensive_range_sharpening",
            .string = "--scalar-evolution-use-expensive-range-sharpening",
            .descr = &.{"Use more powerful methods of sharpening expression ranges. May be costly in terms of compile time"},
        },
        .{
            .name = "scalarize_load_store",
            .string = "--scalarize-load-store",
            .descr = &.{"Allow the scalarizer pass to scalarize loads and store"},
        },
        .{
            .name = "scalarize_variable_insert_extract",
            .string = "--scalarize-variable-insert-extract",
            .descr = &.{"Allow the scalarizer pass to scalarize insertelement/extractelement with variable index"},
        },
        .{
            .name = "scale_partial_sample_profile_working_set_size",
            .string = "--scale-partial-sample-profile-working-set-size",
            .descr = &.{"If true, scale the working set size of the partial sample profile by the partial profile ratio to reflect the size of the program being compiled."},
        },
        .{
            .name = "scev_addops_inline_threshold",
            .string = "--scev-addops-inline-threshold",
            .descr = &.{"Threshold for inlining addition operands into a SCEV"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scev_cheap_expansion_budget",
            .string = "--scev-cheap-expansion-budget",
            .descr = &.{"When performing SCEV expansion only if it is cheap to do, this controls the budget that is considered cheap (default = 4)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scev_mulops_inline_threshold",
            .string = "--scev-mulops-inline-threshold",
            .descr = &.{"Threshold for inlining multiplication operands into a SCEV"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scev_range_iter_threshold",
            .string = "--scev-range-iter-threshold",
            .descr = &.{"Threshold for switching to iteratively computing SCEV ranges"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "scev_verify_ir",
            .string = "--scev-verify-ir",
            .descr = &.{"Verify IR correctness when making sensitive SCEV queries (slow)"},
        },
        .{
            .name = "sched_avg_ipc",
            .string = "--sched-avg-ipc",
            .descr = &.{"Average inst/cycle whan no target itinerary exists."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sched_high_latency_cycles",
            .string = "--sched-high-latency-cycles",
            .descr = &.{"Roughly estimate the number of cycles that 'long latency'instructions take for targets with no itinerary"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sched_preds_closer",
            .string = "--sched-preds-closer",
            .descr = &.{""},
        },
        .{
            .name = "sched_retval_optimization",
            .string = "--sched-retval-optimization",
            .descr = &.{""},
        },
        .{
            .name = "scheditins",
            .string = "--scheditins",
            .descr = &.{"Use InstrItineraryData for latency lookup"},
        },
        .{
            .name = "schedmodel",
            .string = "--schedmodel",
            .descr = &.{"Use TargetSchedModel for latency lookup"},
        },
        .{
            .name = "schedule_ppc_vsx_fma_mutation_early",
            .string = "--schedule-ppc-vsx-fma-mutation-early",
            .descr = &.{"Schedule VSX FMA instruction mutation early"},
        },
        .{
            .name = "select_opti_loop_cycle_gain_threshold",
            .string = "--select-opti-loop-cycle-gain-threshold",
            .descr = &.{"Minimum gain per loop (in cycles) threshold."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "select_opti_loop_gradient_gain_threshold",
            .string = "--select-opti-loop-gradient-gain-threshold",
            .descr = &.{"Gradient gain threshold (%)."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "select_opti_loop_relative_gain_threshold",
            .string = "--select-opti-loop-relative-gain-threshold",
            .descr = &.{"Minimum relative gain per loop threshold (1/X). Defaults to 12.5%"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sgpr_regalloc",
            .string = "--sgpr-regalloc",
            .descr = &.{"Register allocator to use for SGPRs"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { default = 0, basic = 1, greedy = 2, fast = 3 }) },
        },
        .{
            .name = "show_fs_branchprob",
            .string = "--show-fs-branchprob",
            .descr = &.{"Print setting flow sensitive branch probabilities"},
        },
        .{
            .name = "show_mc_encoding",
            .string = "--show-mc-encoding",
            .descr = &.{"Show encoding in .s output"},
        },
        .{
            .name = "shrink_frame_limit",
            .string = "--shrink-frame-limit",
            .descr = &.{"Max count of stack frame shrink-wraps"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "simple_loop_unswitch_drop_non_trivial_implicit_null_checks",
            .string = "--simple-loop-unswitch-drop-non-trivial-implicit-null-checks",
            .descr = &.{"If enabled, drop make.implicit metadata in unswitched implicit null checks to save time analyzing if we can keep it."},
        },
        .{
            .name = "simple_loop_unswitch_guards",
            .string = "--simple-loop-unswitch-guards",
            .descr = &.{"If enabled, simple loop unswitching will also consider llvm.experimental.guard intrinsics as unswitch candidates."},
        },
        .{
            .name = "simple_loop_unswitch_memoryssa_threshold",
            .string = "--simple-loop-unswitch-memoryssa-threshold",
            .descr = &.{"Max number of memory uses to explore during partial unswitching analysis"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "simplify_mir",
            .string = "--simplify-mir",
            .descr = &.{"Leave out unnecessary information when printing MIR"},
        },
        .{
            .name = "simplifycfg_branch_fold_common_dest_vector_multiplier",
            .string = "--simplifycfg-branch-fold-common-dest-vector-multiplier",
            .descr = &.{"Multiplier to apply to threshold when determining whether or not to fold branch to common destination when vector operations are present"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "simplifycfg_branch_fold_threshold",
            .string = "--simplifycfg-branch-fold-threshold",
            .descr = &.{"Maximum cost of combining conditions when folding branches"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "simplifycfg_hoist_common",
            .string = "--simplifycfg-hoist-common",
            .descr = &.{"Hoist common instructions up to the parent block"},
        },
        .{
            .name = "simplifycfg_hoist_common_skip_limit",
            .string = "--simplifycfg-hoist-common-skip-limit",
            .descr = &.{"Allow reordering across at most this many instructions when hoisting"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "simplifycfg_hoist_cond_stores",
            .string = "--simplifycfg-hoist-cond-stores",
            .descr = &.{"Hoist conditional stores if an unconditional store precedes"},
        },
        .{
            .name = "simplifycfg_max_small_block_size",
            .string = "--simplifycfg-max-small-block-size",
            .descr = &.{"Max size of a block which is still considered small enough to thread through"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "simplifycfg_merge_compatible_invokes",
            .string = "--simplifycfg-merge-compatible-invokes",
            .descr = &.{"Allow SimplifyCFG to merge invokes together when appropriate"},
        },
        .{
            .name = "simplifycfg_merge_cond_stores",
            .string = "--simplifycfg-merge-cond-stores",
            .descr = &.{"Hoist conditional stores even if an unconditional store does not precede - hoist multiple conditional stores into a single predicated store"},
        },
        .{
            .name = "simplifycfg_merge_cond_stores_aggressively",
            .string = "--simplifycfg-merge-cond-stores-aggressively",
            .descr = &.{"When merging conditional stores, do so even if the resultant basic blocks are unlikely to be if-converted as a result"},
        },
        .{
            .name = "simplifycfg_require_and_preserve_domtree",
            .string = "--simplifycfg-require-and-preserve-domtree",
            .descr = &.{"Temorary development switch used to gradually uplift SimplifyCFG into preserving DomTree,"},
        },
        .{
            .name = "simplifycfg_sink_common",
            .string = "--simplifycfg-sink-common",
            .descr = &.{"Sink common instructions down to the end block"},
        },
        .{
            .name = "sink_common_insts",
            .string = "--sink-common-insts",
            .descr = &.{"Sink common instructions (default = false)"},
        },
        .{
            .name = "sink_freq_percent_threshold",
            .string = "--sink-freq-percent-threshold",
            .descr = &.{"Do not sink instructions that require cloning unless they execute less than this percent of the time."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sink_insts_to_avoid_spills",
            .string = "--sink-insts-to-avoid-spills",
            .descr = &.{"Sink instructions into cycles to avoid register spills"},
        },
        .{
            .name = "skip_mips_long_branch",
            .string = "--skip-mips-long-branch",
            .descr = &.{"MIPS: Skip branch expansion pass."},
        },
        .{
            .name = "skip_ret_exit_block",
            .string = "--skip-ret-exit-block",
            .descr = &.{"Suppress counter promotion if exit blocks contain ret."},
        },
        .{
            .name = "slot1_store_slot0_load",
            .string = "--slot1-store-slot0-load",
            .descr = &.{"Allow slot1 store and slot0 load"},
        },
        .{
            .name = "slp_max_look_ahead_depth",
            .string = "--slp-max-look-ahead-depth",
            .descr = &.{"The maximum look-ahead depth for operand reordering scores"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_max_reg_size",
            .string = "--slp-max-reg-size",
            .descr = &.{"Attempt to vectorize for this register size in bits"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_max_root_look_ahead_depth",
            .string = "--slp-max-root-look-ahead-depth",
            .descr = &.{"The maximum look-ahead depth for searching best rooting option"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_max_store_lookup",
            .string = "--slp-max-store-lookup",
            .descr = &.{"Maximum depth of the lookup for consecutive stores."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_max_vf",
            .string = "--slp-max-vf",
            .descr = &.{"Maximum SLP vectorization factor (0=unlimited)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_min_reg_size",
            .string = "--slp-min-reg-size",
            .descr = &.{"Attempt to vectorize for this register size in bits"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_min_tree_size",
            .string = "--slp-min-tree-size",
            .descr = &.{"Only vectorize small trees if they are fully vectorizable"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_recursion_max_depth",
            .string = "--slp-recursion-max-depth",
            .descr = &.{"Limit the recursion depth when building a vectorizable tree"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_schedule_budget",
            .string = "--slp-schedule-budget",
            .descr = &.{"Limit the size of the SLP scheduling region per block"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_threshold",
            .string = "--slp-threshold",
            .descr = &.{"Only vectorize if you gain more than this number "},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "slp_vectorize_hor",
            .string = "--slp-vectorize-hor",
            .descr = &.{"Attempt to vectorize horizontal reductions"},
        },
        .{
            .name = "slp_vectorize_hor_store",
            .string = "--slp-vectorize-hor-store",
            .descr = &.{"Attempt to vectorize horizontal reductions feeding into a store"},
        },
        .{
            .name = "small_loop_cost",
            .string = "--small-loop-cost",
            .descr = &.{"The cost of a loop that is considered 'small' by the interleaver."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sort_profiled_scc_member",
            .string = "--sort-profiled-scc-member",
            .descr = &.{"Sort profiled recursion by edge weights."},
        },
        .{
            .name = "sort_timers",
            .string = "--sort-timers",
            .descr = &.{"In the report, sort the timers in each group in wall clock time order"},
        },
        .{
            .name = "sparc_bpcc_offset_bits",
            .string = "--sparc-bpcc-offset-bits",
            .descr = &.{"Restrict range of BPcc/FBPfcc instructions (DEBUG)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sparc_enable_branch_relax",
            .string = "--sparc-enable-branch-relax",
            .descr = &.{"Relax out of range conditional branches"},
        },
        .{
            .name = "sparc_reserve_app_registers",
            .string = "--sparc-reserve-app-registers",
            .descr = &.{"Reserve application registers (%g2-%g4)"},
        },
        .{
            .name = "spec_exec_max_not_hoisted",
            .string = "--spec-exec-max-not-hoisted",
            .descr = &.{"Speculative execution is not applied to basic blocks where the number of instructions that would not be speculatively executed exceeds this limit."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "spec_exec_max_speculation_cost",
            .string = "--spec-exec-max-speculation-cost",
            .descr = &.{"Speculative execution is not applied to basic blocks where the cost of the instructions to speculatively execute exceeds this limit."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "spec_exec_only_if_divergent_target",
            .string = "--spec-exec-only-if-divergent-target",
            .descr = &.{"Speculative execution is applied only to targets with divergent branches, even if the pass was configured to apply only to all targets."},
        },
        .{
            .name = "speculate_one_expensive_inst",
            .string = "--speculate-one-expensive-inst",
            .descr = &.{"Allow exactly one expensive instruction to be speculatively executed"},
        },
        .{
            .name = "speculative_counter_promotion_max_exiting",
            .string = "--speculative-counter-promotion-max-exiting",
            .descr = &.{"The max number of exiting blocks of a loop to allow  speculative counter promotion"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "speculative_counter_promotion_to_loop",
            .string = "--speculative-counter-promotion-to-loop",
            .descr = &.{"When the option is false, if the target block is in a loop, the promotion will be disallowed unless the promoted counter  update can be further/iteratively promoted into an acyclic  region."},
        },
        .{
            .name = "spill_func_threshold",
            .string = "--spill-func-threshold",
            .descr = &.{"Specify O2(not Os) spill func threshold"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "spill_func_threshold_Os",
            .string = "--spill-func-threshold-Os",
            .descr = &.{"Specify Os spill func threshold"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "split_dwarf_cross_cu_references",
            .string = "--split-dwarf-cross-cu-references",
            .descr = &.{"Enable cross-cu references in DWO files"},
        },
        .{
            .name = "split_dwarf_file",
            .string = "--split-dwarf-file",
            .descr = &.{"Specify the name of the .dwo file to encode in the DWARF output"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "split_dwarf_output",
            .string = "--split-dwarf-output",
            .descr = &.{".dwo output filename"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "split_machine_functions",
            .string = "--split-machine-functions",
            .descr = &.{"Split out cold basic blocks from machine functions based on profile information"},
        },
        .{
            .name = "split_spill_mode",
            .string = "--split-spill-mode",
            .descr = &.{"Spill mode for splitting live ranges"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { default = 0, size = 1, speed = 2 }) },
        },
        .{
            .name = "spp_all_backedges",
            .string = "--spp-all-backedges",
            .descr = &.{""},
        },
        .{
            .name = "spp_counted_loop_trip_width",
            .string = "--spp-counted-loop-trip-width",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "spp_no_backedge",
            .string = "--spp-no-backedge",
            .descr = &.{""},
        },
        .{
            .name = "spp_no_call",
            .string = "--spp-no-call",
            .descr = &.{""},
        },
        .{
            .name = "spp_no_entry",
            .string = "--spp-no-entry",
            .descr = &.{""},
        },
        .{
            .name = "spp_print_base_pointers",
            .string = "--spp-print-base-pointers",
            .descr = &.{""},
        },
        .{
            .name = "spp_print_liveset",
            .string = "--spp-print-liveset",
            .descr = &.{""},
        },
        .{
            .name = "spp_print_liveset_size",
            .string = "--spp-print-liveset-size",
            .descr = &.{""},
        },
        .{
            .name = "spp_rematerialization_threshold",
            .string = "--spp-rematerialization-threshold",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "spp_split_backedge",
            .string = "--spp-split-backedge",
            .descr = &.{""},
        },
        .{
            .name = "sroa_strict_inbounds",
            .string = "--sroa-strict-inbounds",
            .descr = &.{""},
        },
        .{
            .name = "ssc_dce_limit",
            .string = "--ssc-dce-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "stack_safety_max_iterations",
            .string = "--stack-safety-max-iterations",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "stack_safety_print",
            .string = "--stack-safety-print",
            .descr = &.{""},
        },
        .{
            .name = "stack_safety_run",
            .string = "--stack-safety-run",
            .descr = &.{""},
        },
        .{
            .name = "stack_size_section",
            .string = "--stack-size-section",
            .descr = &.{"Emit a section containing stack size metadata"},
        },
        .{
            .name = "stack_symbol_ordering",
            .string = "--stack-symbol-ordering",
            .descr = &.{"Order local stack symbols."},
        },
        .{
            .name = "stack_tagging_first_slot_opt",
            .string = "--stack-tagging-first-slot-opt",
            .descr = &.{"Apply first slot optimization for stack tagging (eliminate ADDG Rt, Rn, 0, 0)."},
        },
        .{
            .name = "stack_tagging_merge_init",
            .string = "--stack-tagging-merge-init",
            .descr = &.{"merge stack variable initializers with tagging when possible"},
        },
        .{
            .name = "stack_tagging_merge_init_scan_limit",
            .string = "--stack-tagging-merge-init-scan-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "stack_tagging_merge_init_size_limit",
            .string = "--stack-tagging-merge-init-size-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "stack_tagging_merge_settag",
            .string = "--stack-tagging-merge-settag",
            .descr = &.{"merge settag instruction in function epilog"},
        },
        .{
            .name = "stack_tagging_unchecked_ld_st",
            .string = "--stack-tagging-unchecked-ld-st",
            .descr = &.{"Unconditionally apply unchecked-ld-st optimization (even for large stack frames, or in the presence of variable sized allocas)."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { never = 0, safe = 1, always = 2 }) },
        },
        .{
            .name = "stack_tagging_use_stack_safety",
            .string = "--stack-tagging-use-stack-safety",
            .descr = &.{"Use Stack Safety analysis results"},
        },
        .{
            .name = "stackcoloring_lifetime_start_on_first_use",
            .string = "--stackcoloring-lifetime-start-on-first-use",
            .descr = &.{"Treat stack lifetimes as starting on first use, not on START marker."},
        },
        .{
            .name = "stackmap_version",
            .string = "--stackmap-version",
            .descr = &.{"Specify the stackmap encoding version (default = 3)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "stackrealign",
            .string = "--stackrealign",
            .descr = &.{"Force align the stack to the minimum alignment"},
        },
        .{
            .name = "start_after",
            .string = "--start-after",
            .descr = &.{"Resume compilation after a specific pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "start_before",
            .string = "--start-before",
            .descr = &.{"Resume compilation before a specific pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "static_func_full_module_prefix",
            .string = "--static-func-full-module-prefix",
            .descr = &.{"Use full module build paths in the profile counter names for static functions."},
        },
        .{
            .name = "static_func_strip_dirname_prefix",
            .string = "--static-func-strip-dirname-prefix",
            .descr = &.{"Strip specified level of directory name from source path in the profile counter name for static functions."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "static_likely_prob",
            .string = "--static-likely-prob",
            .descr = &.{"branch probability threshold in percentageto be considered very likely"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "stats",
            .string = "--stats",
            .descr = &.{"Enable statistics output from program (available with Asserts)"},
        },
        .{
            .name = "stats_json",
            .string = "--stats-json",
            .descr = &.{"Display statistics as json data"},
        },
        .{
            .name = "stop_after",
            .string = "--stop-after",
            .descr = &.{"Stop compilation after a specific pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "stop_before",
            .string = "--stop-before",
            .descr = &.{"Stop compilation before a specific pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "store_to_load_forwarding_conflict_detection",
            .string = "--store-to-load-forwarding-conflict-detection",
            .descr = &.{"Enable conflict detection in loop-access analysis"},
        },
        .{
            .name = "stress_cgp_ext_ld_promotion",
            .string = "--stress-cgp-ext-ld-promotion",
            .descr = &.{"Stress test ext(promotable(ld)) -> promoted(ext(ld)) optimization in CodeGenPrepare"},
        },
        .{
            .name = "stress_cgp_store_extract",
            .string = "--stress-cgp-store-extract",
            .descr = &.{"Stress test store(extract) optimizations in CodeGenPrepare"},
        },
        .{
            .name = "stress_early_ifcvt",
            .string = "--stress-early-ifcvt",
            .descr = &.{"Turn all knobs to 11"},
        },
        .{
            .name = "stress_regalloc",
            .string = "--stress-regalloc",
            .descr = &.{"Limit all regclasses to N registers"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "strict_dwarf",
            .string = "--strict-dwarf",
            .descr = &.{"use strict dwarf"},
        },
        .{
            .name = "structurizecfg_relaxed_uniform_regions",
            .string = "--structurizecfg-relaxed-uniform-regions",
            .descr = &.{"Allow relaxed uniform region checks"},
        },
        .{
            .name = "structurizecfg_skip_uniform_regions",
            .string = "--structurizecfg-skip-uniform-regions",
            .descr = &.{"Force whether the StructurizeCFG pass skips uniform regions"},
        },
        .{
            .name = "summary_file",
            .string = "--summary-file",
            .descr = &.{"The summary file to use for function importing."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "sve_gather_overhead",
            .string = "--sve-gather-overhead",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sve_scatter_overhead",
            .string = "--sve-scatter-overhead",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "sve_tail_folding",
            .string = "--sve-tail-folding",
            .descr = &.{"Control the use of vectorisation using tail-folding for SVE:"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "swift_async_fp",
            .string = "--swift-async-fp",
            .descr = &.{"Determine when the Swift async frame pointer should be set"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { auto = 0, always = 1, never = 2 }) },
        },
        .{
            .name = "switch_peel_threshold",
            .string = "--switch-peel-threshold",
            .descr = &.{"Set the case probability threshold for peeling the case from a switch statement. A value greater than 100 will void this optimization"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "switch_range_to_icmp",
            .string = "--switch-range-to-icmp",
            .descr = &.{"Convert switches into an integer range comparison (default = false)"},
        },
        .{
            .name = "switch_to_lookup",
            .string = "--switch-to-lookup",
            .descr = &.{"Convert switches to lookup tables (default = false)"},
        },
        .{
            .name = "systemz_subreg_liveness",
            .string = "--systemz-subreg-liveness",
            .descr = &.{"Enable subregister liveness tracking for SystemZ (experimental)"},
        },
        .{
            .name = "t2_reduce_limit",
            .string = "--t2-reduce-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "t2_reduce_limit2",
            .string = "--t2-reduce-limit2",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "t2_reduce_limit3",
            .string = "--t2-reduce-limit3",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_dup_indirect_size",
            .string = "--tail-dup-indirect-size",
            .descr = &.{"Maximum instructions to consider tail duplicating blocks that end with indirect branches."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_dup_limit",
            .string = "--tail-dup-limit",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_dup_placement",
            .string = "--tail-dup-placement",
            .descr = &.{"Perform tail duplication during placement. Creates more fallthrough opportunites in outline branches."},
        },
        .{
            .name = "tail_dup_placement_aggressive_threshold",
            .string = "--tail-dup-placement-aggressive-threshold",
            .descr = &.{"Instruction cutoff for aggressive tail duplication during layout. Used at -O3. Tail merging during layout is forced to have a threshold that won't conflict."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_dup_placement_penalty",
            .string = "--tail-dup-placement-penalty",
            .descr = &.{"Cost penalty for blocks that can avoid breaking CFG by copying. Copying can increase fallthrough, but it also increases icache pressure. This parameter controls the penalty to account for that. Percent as integer."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_dup_placement_threshold",
            .string = "--tail-dup-placement-threshold",
            .descr = &.{"Instruction cutoff for tail duplication during layout. Tail merging during layout is forced to have a threshold that won't conflict."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_dup_profile_percent_threshold",
            .string = "--tail-dup-profile-percent-threshold",
            .descr = &.{"If profile count information is used in tail duplication cost model, the gained fall through number from tail duplication should be at least this percent of hot count."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_dup_size",
            .string = "--tail-dup-size",
            .descr = &.{"Maximum instructions to consider tail duplicating"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_dup_verify",
            .string = "--tail-dup-verify",
            .descr = &.{"Verify sanity of PHI instructions during taildup"},
        },
        .{
            .name = "tail_merge_size",
            .string = "--tail-merge-size",
            .descr = &.{"Min number of instructions to consider tail merging"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_merge_threshold",
            .string = "--tail-merge-threshold",
            .descr = &.{"Max number of predecessors to consider tail merging"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tail_predication",
            .string = "--tail-predication",
            .descr = &.{"MVE tail-predication pass options"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { disabled = 0, @"enabled-no-reductions" = 1, enabled = 2, @"force-enabled-no-reductions" = 3, @"force-enabled" = 4 }) },
        },
        .{
            .name = "tailcallopt",
            .string = "--tailcallopt",
            .descr = &.{"Turn fastcc calls into tail calls by (potentially) changing ABI."},
        },
        .{
            .name = "target_abi",
            .string = "--target-abi",
            .descr = &.{"The name of the ABI to be targeted from the backend."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "temporal_reuse_threshold",
            .string = "--temporal-reuse-threshold",
            .descr = &.{"Use this to specify the max. distance between array elements accessed in a loop so that the elements are classified to have temporal reuse"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "terminal_rule",
            .string = "--terminal-rule",
            .descr = &.{"Apply the terminal rule"},
        },
        .{
            .name = "tfutils_use_simplelogger",
            .string = "--tfutils-use-simplelogger",
            .descr = &.{"Output simple (non-protobuf) log."},
        },
        .{
            .name = "thinlto_assume_merged",
            .string = "--thinlto-assume-merged",
            .descr = &.{"Assume the input has already undergone ThinLTO function importing and the other pre-optimization pipeline changes."},
        },
        .{
            .name = "thinlto_synthesize_entry_counts",
            .string = "--thinlto-synthesize-entry-counts",
            .descr = &.{"Synthesize entry counts based on the summary"},
        },
        .{
            .name = "thread_model",
            .string = "--thread-model",
            .descr = &.{"Choose threading model"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { posix = 0, single = 1 }) },
        },
        .{
            .name = "threads",
            .string = "--threads",
            .descr = &.{""},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "time_compilations",
            .string = "--time-compilations",
            .descr = &.{"Repeat compilation N times for timing"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "time_passes",
            .string = "--time-passes",
            .descr = &.{"Time each pass, printing elapsed time for each on exit"},
        },
        .{
            .name = "time_passes_per_run",
            .string = "--time-passes-per-run",
            .descr = &.{"Time each pass run, printing elapsed time for each run on exit"},
        },
        .{
            .name = "time_trace",
            .string = "--time-trace",
            .descr = &.{"Record time trace"},
        },
        .{
            .name = "time_trace_file",
            .string = "--time-trace-file",
            .descr = &.{"Specify time trace file destination"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "time_trace_granularity",
            .string = "--time-trace-granularity",
            .descr = &.{"Minimum time granularity (in microseconds) traced by time profiler"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tiny_trip_count_interleave_threshold",
            .string = "--tiny-trip-count-interleave-threshold",
            .descr = &.{"We don't interleave loops with a estimated constant trip count below this number"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "tls_load_hoist",
            .string = "--tls-load-hoist",
            .descr = &.{"hoist the TLS loads in PIC model to eliminate redundant TLS address calculation."},
        },
        .{
            .name = "tls_size",
            .string = "--tls-size",
            .descr = &.{"Bit size of immediate TLS offsets"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "trace_gv_placement",
            .string = "--trace-gv-placement",
            .descr = &.{"Trace global value placement"},
        },
        .{
            .name = "trace_hex_vector_stores_only",
            .string = "--trace-hex-vector-stores-only",
            .descr = &.{"Enables tracing of vector stores"},
        },
        .{
            .name = "track_memory",
            .string = "--track-memory",
            .descr = &.{"Enable -time-passes memory tracking (this may be slow)"},
        },
        .{
            .name = "trap_func",
            .string = "--trap-func",
            .descr = &.{"Emit a call to trap function rather than a trap instruction"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "trap_unreachable",
            .string = "--trap-unreachable",
            .descr = &.{"Enable generating trap for unreachable"},
        },
        .{
            .name = "treat_scalable_fixed_error_as_warning",
            .string = "--treat-scalable-fixed-error-as-warning",
            .descr = &.{"Treat issues where a fixed-width property is requested from a scalable type as a warning, instead of an error"},
        },
        .{
            .name = "triangle_chain_count",
            .string = "--triangle-chain-count",
            .descr = &.{"Number of triangle-shaped-CFG's that need to be in a row for the triangle tail duplication heuristic to kick in. 0 to disable."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "trim_var_locs",
            .string = "--trim-var-locs",
            .descr = &.{""},
        },
        .{
            .name = "tsan_compound_read_before_write",
            .string = "--tsan-compound-read-before-write",
            .descr = &.{"Emit special compound instrumentation for reads-before-writes"},
        },
        .{
            .name = "tsan_distinguish_volatile",
            .string = "--tsan-distinguish-volatile",
            .descr = &.{"Emit special instrumentation for accesses to volatiles"},
        },
        .{
            .name = "tsan_handle_cxx_exceptions",
            .string = "--tsan-handle-cxx-exceptions",
            .descr = &.{"Handle C++ exceptions (insert cleanup blocks for unwinding)"},
        },
        .{
            .name = "tsan_instrument_atomics",
            .string = "--tsan-instrument-atomics",
            .descr = &.{"Instrument atomics"},
        },
        .{
            .name = "tsan_instrument_func_entry_exit",
            .string = "--tsan-instrument-func-entry-exit",
            .descr = &.{"Instrument function entry and exit"},
        },
        .{
            .name = "tsan_instrument_memintrinsics",
            .string = "--tsan-instrument-memintrinsics",
            .descr = &.{"Instrument memintrinsics (memset/memcpy/memmove)"},
        },
        .{
            .name = "tsan_instrument_memory_accesses",
            .string = "--tsan-instrument-memory-accesses",
            .descr = &.{"Instrument memory accesses"},
        },
        .{
            .name = "tsan_instrument_read_before_write",
            .string = "--tsan-instrument-read-before-write",
            .descr = &.{"Do not eliminate read instrumentation for read-before-writes"},
        },
        .{
            .name = "two_entry_phi_node_folding_threshold",
            .string = "--two-entry-phi-node-folding-threshold",
            .descr = &.{"Control the maximal total instruction cost that we are willing to speculatively execute to fold a 2-entry PHI node into a select (default = 4)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "twoaddr_reschedule",
            .string = "--twoaddr-reschedule",
            .descr = &.{"Coalesce copies by rescheduling (default=true)"},
        },
        .{
            .name = "type_based_intrinsic_cost",
            .string = "--type-based-intrinsic-cost",
            .descr = &.{"Calculate intrinsics cost based only on argument types"},
        },
        .{
            .name = "undef_reg_clearance",
            .string = "--undef-reg-clearance",
            .descr = &.{"How many idle instructions we would like before certain undef register reads"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unique_basic_block_section_names",
            .string = "--unique-basic-block-section-names",
            .descr = &.{"Give unique names to every basic block section"},
        },
        .{
            .name = "unique_section_names",
            .string = "--unique-section-names",
            .descr = &.{"Give unique names to every section"},
        },
        .{
            .name = "unlikely_branch_weight",
            .string = "--unlikely-branch-weight",
            .descr = &.{"Weight of the branch unlikely to be taken (default = 1)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_allow_loop_nests_peeling",
            .string = "--unroll-allow-loop-nests-peeling",
            .descr = &.{"Allows loop nests to be peeled."},
        },
        .{
            .name = "unroll_allow_partial",
            .string = "--unroll-allow-partial",
            .descr = &.{"Allows loops to be partially unrolled until -unroll-threshold loop size is reached."},
        },
        .{
            .name = "unroll_allow_peeling",
            .string = "--unroll-allow-peeling",
            .descr = &.{"Allows loops to be peeled when the dynamic trip count is known to be low."},
        },
        .{
            .name = "unroll_allow_remainder",
            .string = "--unroll-allow-remainder",
            .descr = &.{"Allow generation of a loop remainder (extra iterations) when unrolling a loop."},
        },
        .{
            .name = "unroll_and_jam_count",
            .string = "--unroll-and-jam-count",
            .descr = &.{"Use this unroll count for all loops including those with unroll_and_jam_count pragma values, for testing purposes"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_and_jam_threshold",
            .string = "--unroll-and-jam-threshold",
            .descr = &.{"Threshold to use for inner loop when doing unroll and jam."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_count",
            .string = "--unroll-count",
            .descr = &.{"Use this unroll count for all loops including those with unroll_count pragma values, for testing purposes"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_force_peel_count",
            .string = "--unroll-force-peel-count",
            .descr = &.{"Force a peel count regardless of profiling information."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_full_max_count",
            .string = "--unroll-full-max-count",
            .descr = &.{"Set the max unroll count for full unrolling, for testing purposes"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_max_count",
            .string = "--unroll-max-count",
            .descr = &.{"Set the max unroll count for partial and runtime unrolling, fortesting purposes"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_max_iteration_count_to_analyze",
            .string = "--unroll-max-iteration-count-to-analyze",
            .descr = &.{"Don't allow loop unrolling to simulate more than this number ofiterations when checking full unroll profitability"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_max_percent_threshold_boost",
            .string = "--unroll-max-percent-threshold-boost",
            .descr = &.{"The maximum 'boost' (represented as a percentage >= 100) applied to the threshold when aggressively unrolling a loop due to the dynamic cost savings. If completely unrolling a loop will reduce the total runtime from X to Y, we boost the loop unroll threshold to DefaultThreshold*std::min(MaxPercentThresholdBoost, X/Y). This limit avoids excessive code bloat."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_max_upperbound",
            .string = "--unroll-max-upperbound",
            .descr = &.{"The max of trip count upper bound that is considered in unrolling"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_optsize_threshold",
            .string = "--unroll-optsize-threshold",
            .descr = &.{"The cost threshold for loop unrolling when optimizing for size"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_partial_threshold",
            .string = "--unroll-partial-threshold",
            .descr = &.{"The cost threshold for partial loop unrolling"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_peel_count",
            .string = "--unroll-peel-count",
            .descr = &.{"Set the unroll peeling count, for testing purposes"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_peel_max_count",
            .string = "--unroll-peel-max-count",
            .descr = &.{"Max average trip count which will cause loop peeling."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_remainder",
            .string = "--unroll-remainder",
            .descr = &.{"Allow the loop remainder to be unrolled."},
        },
        .{
            .name = "unroll_revisit_child_loops",
            .string = "--unroll-revisit-child-loops",
            .descr = &.{"Enqueue and re-visit child loops in the loop PM after unrolling. This shouldn't typically be needed as child loops (or their clones) were already visited."},
        },
        .{
            .name = "unroll_runtime",
            .string = "--unroll-runtime",
            .descr = &.{"Unroll loops with run-time trip counts"},
        },
        .{
            .name = "unroll_runtime_epilog",
            .string = "--unroll-runtime-epilog",
            .descr = &.{"Allow runtime unrolled loops to be unrolled with epilog instead of prolog."},
        },
        .{
            .name = "unroll_runtime_multi_exit",
            .string = "--unroll-runtime-multi-exit",
            .descr = &.{"Allow runtime unrolling for loops with multiple exits, when epilog is generated"},
        },
        .{
            .name = "unroll_runtime_other_exit_predictable",
            .string = "--unroll-runtime-other-exit-predictable",
            .descr = &.{"Assume the non latch exit block to be predictable"},
        },
        .{
            .name = "unroll_threshold",
            .string = "--unroll-threshold",
            .descr = &.{"The cost threshold for loop unrolling"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_threshold_aggressive",
            .string = "--unroll-threshold-aggressive",
            .descr = &.{"Threshold (max size of unrolled loop) to use in aggressive (O3) optimizations"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_threshold_default",
            .string = "--unroll-threshold-default",
            .descr = &.{"Default threshold (max size of unrolled loop), used in all but O3 optimizations"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unroll_verify_domtree",
            .string = "--unroll-verify-domtree",
            .descr = &.{"Verify domtree after unrolling"},
        },
        .{
            .name = "unroll_verify_loopinfo",
            .string = "--unroll-verify-loopinfo",
            .descr = &.{"Verify loopinfo after unrolling"},
        },
        .{
            .name = "unswitch_num_initial_unscaled_candidates",
            .string = "--unswitch-num-initial-unscaled-candidates",
            .descr = &.{"Number of unswitch candidates that are ignored when calculating cost multiplier."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unswitch_siblings_toplevel_div",
            .string = "--unswitch-siblings-toplevel-div",
            .descr = &.{"Toplevel siblings divisor for cost multiplier."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "unswitch_threshold",
            .string = "--unswitch-threshold",
            .descr = &.{"The cost threshold for unswitching a loop."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "update_pseudo_probe",
            .string = "--update-pseudo-probe",
            .descr = &.{"Update pseudo probe distribution factor"},
        },
        .{
            .name = "update_return_attrs",
            .string = "--update-return-attrs",
            .descr = &.{"Update return attributes on calls within inlined body"},
        },
        .{
            .name = "use_ctors",
            .string = "--use-ctors",
            .descr = &.{"Use .ctors instead of .init_array."},
        },
        .{
            .name = "use_dbg_addr",
            .string = "--use-dbg-addr",
            .descr = &.{"Use llvm.dbg.addr for all local variables"},
        },
        .{
            .name = "use_dereferenceable_at_point_semantics",
            .string = "--use-dereferenceable-at-point-semantics",
            .descr = &.{"Deref attributes and metadata infer facts at definition only"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "use_dwarf_ranges_base_address_specifier",
            .string = "--use-dwarf-ranges-base-address-specifier",
            .descr = &.{"Use base address specifiers in debug_ranges"},
        },
        .{
            .name = "use_gnu_debug_macro",
            .string = "--use-gnu-debug-macro",
            .descr = &.{"Emit the GNU .debug_macro format with DWARF <5"},
        },
        .{
            .name = "use_gpu_divergence_analysis",
            .string = "--use-gpu-divergence-analysis",
            .descr = &.{"turn the LegacyDivergenceAnalysis into a wrapper for GPUDivergenceAnalysis"},
        },
        .{
            .name = "use_iterative_bfi_inference",
            .string = "--use-iterative-bfi-inference",
            .descr = &.{"Apply an iterative post-processing to infer correct BFI counts"},
        },
        .{
            .name = "use_leb128_directives",
            .string = "--use-leb128-directives",
            .descr = &.{"Disable the usage of LEB128 directives, and generate .byte instead."},
        },
        .{
            .name = "use_lir_code_size_heurs",
            .string = "--use-lir-code-size-heurs",
            .descr = &.{"Use loop idiom recognition code size heuristics when compilingwith -Os/-Oz"},
        },
        .{
            .name = "use_mbpi",
            .string = "--use-mbpi",
            .descr = &.{"use Machine Branch Probability Info"},
        },
        .{
            .name = "use_newer_candidate",
            .string = "--use-newer-candidate",
            .descr = &.{""},
        },
        .{
            .name = "use_noalias_intrinsic_during_inlining",
            .string = "--use-noalias-intrinsic-during-inlining",
            .descr = &.{"Use the llvm.experimental.noalias.scope.decl intrinsic during inlining."},
        },
        .{
            .name = "use_profiled_call_graph",
            .string = "--use-profiled-call-graph",
            .descr = &.{"Process functions in a top-down order defined by the profiled call graph when -sample-profile-top-down-load is on."},
        },
        .{
            .name = "use_registers_for_deopt_values",
            .string = "--use-registers-for-deopt-values",
            .descr = &.{"Allow using registers for non pointer deopt args"},
        },
        .{
            .name = "use_registers_for_gc_values_in_landing_pad",
            .string = "--use-registers-for-gc-values-in-landing-pad",
            .descr = &.{"Allow using registers for gc pointer in landing pad"},
        },
        .{
            .name = "use_segment_set_for_physregs",
            .string = "--use-segment-set-for-physregs",
            .descr = &.{"Use segment set for the computation of the live ranges of physregs."},
        },
        .{
            .name = "use_source_filename_for_promoted_locals",
            .string = "--use-source-filename-for-promoted-locals",
            .descr = &.{"Uses the source file name instead of the Module hash. This requires that the source filename has a unique name / path to avoid name collisions."},
        },
        .{
            .name = "use_tbaa_in_sched_mi",
            .string = "--use-tbaa-in-sched-mi",
            .descr = &.{"Enable use of TBAA during MI DAG construction"},
        },
        .{
            .name = "use_unknown_locations",
            .string = "--use-unknown-locations",
            .descr = &.{"Make an absence of debug location information explicit."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { Default = 0, Enable = 1, Disable = 2 }) },
        },
        .{
            .name = "vec_extabi",
            .string = "--vec-extabi",
            .descr = &.{"Enable the AIX Extended Altivec ABI."},
        },
        .{
            .name = "vector_combine_max_scan_instrs",
            .string = "--vector-combine-max-scan-instrs",
            .descr = &.{"Max number of instructions to scan for vector combining."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "vector_library",
            .string = "--vector-library",
            .descr = &.{"Vector functions library"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u3) { none = 0, Accelerate = 1, Darwin_libsystem_m = 2, @"LIBMVEC-X86" = 3, MASSV = 4, SVML = 5, sleefgnuabi = 6 }) },
        },
        .{
            .name = "vectorize_loops",
            .string = "--vectorize-loops",
            .descr = &.{"Run the Loop vectorization passes"},
        },
        .{
            .name = "vectorize_memory_check_threshold",
            .string = "--vectorize-memory-check-threshold",
            .descr = &.{"The maximum allowed number of runtime memory checks"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "vectorize_num_stores_pred",
            .string = "--vectorize-num-stores-pred",
            .descr = &.{"Max number of stores to be predicated behind an if."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "vectorize_scev_check_threshold",
            .string = "--vectorize-scev-check-threshold",
            .descr = &.{"The maximum number of SCEV checks allowed."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "vectorize_slp",
            .string = "--vectorize-slp",
            .descr = &.{"Run the SLP vectorization passes"},
        },
        .{
            .name = "vectorizer_maximize_bandwidth",
            .string = "--vectorizer-maximize-bandwidth",
            .descr = &.{"Maximize bandwidth when selecting vectorization factor which will be determined by the smallest type in loop."},
        },
        .{
            .name = "vectorizer_min_trip_count",
            .string = "--vectorizer-min-trip-count",
            .descr = &.{"Loops with a constant trip count that is smaller than this value are vectorized only if no scalar iteration overheads are incurred."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "verify_arm_pseudo_expand",
            .string = "--verify-arm-pseudo-expand",
            .descr = &.{"Verify machine code after expanding ARM pseudos"},
        },
        .{
            .name = "verify_assumption_cache",
            .string = "--verify-assumption-cache",
            .descr = &.{"Enable verification of assumption cache"},
        },
        .{
            .name = "verify_cfg_preserved",
            .string = "--verify-cfg-preserved",
            .descr = &.{""},
        },
        .{
            .name = "verify_cfiinstrs",
            .string = "--verify-cfiinstrs",
            .descr = &.{"Verify Call Frame Information instructions"},
        },
        .{
            .name = "verify_coalescing",
            .string = "--verify-coalescing",
            .descr = &.{"Verify machine instrs before and after register coalescing"},
        },
        .{
            .name = "verify_dom_info",
            .string = "--verify-dom-info",
            .descr = &.{"Verify dominator info (time consuming)"},
        },
        .{
            .name = "verify_indvars",
            .string = "--verify-indvars",
            .descr = &.{"Verify the ScalarEvolution result after running indvars. Has no effect in release builds. (Note: this adds additional SCEV queries potentially changing the analysis result)"},
        },
        .{
            .name = "verify_loop_info",
            .string = "--verify-loop-info",
            .descr = &.{"Verify loop info (time consuming)"},
        },
        .{
            .name = "verify_loop_lcssa",
            .string = "--verify-loop-lcssa",
            .descr = &.{"Verify loop lcssa form (time consuming)"},
        },
        .{
            .name = "verify_machine_dom_info",
            .string = "--verify-machine-dom-info",
            .descr = &.{"Verify machine dominator info (time consuming)"},
        },
        .{
            .name = "verify_machineinstrs",
            .string = "--verify-machineinstrs",
            .descr = &.{"Verify generated machine code"},
        },
        .{
            .name = "verify_memoryssa",
            .string = "--verify-memoryssa",
            .descr = &.{"Enable verification of MemorySSA."},
        },
        .{
            .name = "verify_misched",
            .string = "--verify-misched",
            .descr = &.{"Verify machine instrs before and after machine scheduling"},
        },
        .{
            .name = "verify_noalias_scope_decl_dom",
            .string = "--verify-noalias-scope-decl-dom",
            .descr = &.{"Ensure that llvm.experimental.noalias.scope.decl for identical scopes are not dominating"},
        },
        .{
            .name = "verify_predicateinfo",
            .string = "--verify-predicateinfo",
            .descr = &.{"Verify PredicateInfo in legacy printer pass."},
        },
        .{
            .name = "verify_pseudo_probe",
            .string = "--verify-pseudo-probe",
            .descr = &.{"Do pseudo probe verification"},
        },
        .{
            .name = "verify_pseudo_probe_funcs",
            .string = "--verify-pseudo-probe-funcs",
            .descr = &.{"The option to specify the name of the functions to verify."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "verify_regalloc",
            .string = "--verify-regalloc",
            .descr = &.{"Verify during register allocation"},
        },
        .{
            .name = "verify_region_info",
            .string = "--verify-region-info",
            .descr = &.{"Verify region info (time consuming)"},
        },
        .{
            .name = "verify_scev",
            .string = "--verify-scev",
            .descr = &.{"Verify ScalarEvolution's backedge taken counts (slow)"},
        },
        .{
            .name = "verify_scev_maps",
            .string = "--verify-scev-maps",
            .descr = &.{"Verify no dangling value in ScalarEvolution's ExprValueMap (slow)"},
        },
        .{
            .name = "verify_scev_strict",
            .string = "--verify-scev-strict",
            .descr = &.{"Enable stricter verification with -verify-scev is passed"},
        },
        .{
            .name = "version",
            .string = "--version",
            .descr = &.{"Display the version of this program"},
        },
        .{
            .name = "vgpr_regalloc",
            .string = "--vgpr-regalloc",
            .descr = &.{"Register allocator to use for VGPRs"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { basic = 0, greedy = 1, fast = 2 }) },
        },
        .{
            .name = "view_bfi_func_name",
            .string = "--view-bfi-func-name",
            .descr = &.{"The option to specify the name of the function whose CFG will be displayed."},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "view_block_freq_propagation_dags",
            .string = "--view-block-freq-propagation-dags",
            .descr = &.{"Pop up a window to show a dag displaying how block frequencies propagation through the CFG."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, fraction = 1, integer = 2, count = 3 }) },
        },
        .{
            .name = "view_block_layout_with_bfi",
            .string = "--view-block-layout-with-bfi",
            .descr = &.{"Pop up a window to show a dag displaying MBP layout and associated block frequencies of the CFG."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, fraction = 1, integer = 2, count = 3 }) },
        },
        .{
            .name = "view_edge_bundles",
            .string = "--view-edge-bundles",
            .descr = &.{"Pop up a window to show edge bundle graphs"},
        },
        .{
            .name = "view_hot_freq_percent",
            .string = "--view-hot-freq-percent",
            .descr = &.{"An integer in percent used to specify the hot blocks/edges to be displayed in red: a block or edge whose frequency is no less than the max frequency of the function multiplied by this percent."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "view_machine_block_freq_propagation_dags",
            .string = "--view-machine-block-freq-propagation-dags",
            .descr = &.{"Pop up a window to show a dag displaying how machine block frequencies propagate through the CFG."},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, fraction = 1, integer = 2, count = 3 }) },
        },
        .{
            .name = "view_slp_tree",
            .string = "--view-slp-tree",
            .descr = &.{"Display the SLP trees with Graphviz"},
        },
        .{
            .name = "vliw_misched_reg_pressure",
            .string = "--vliw-misched-reg-pressure",
            .descr = &.{"High register pressure threhold."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "vp_counters_per_site",
            .string = "--vp-counters-per-site",
            .descr = &.{"The average number of profile counters allocated per value profiling site."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "vp_static_alloc",
            .string = "--vp-static-alloc",
            .descr = &.{"Do static counter allocation for value profiler"},
        },
        .{
            .name = "vplan_build_stress_test",
            .string = "--vplan-build-stress-test",
            .descr = &.{"Build VPlan for every supported loop nest in the function and bail out right after the build (stress test the VPlan H-CFG construction in the VPlan-native vectorization path)."},
        },
        .{
            .name = "vplan_print_in_dot_format",
            .string = "--vplan-print-in-dot-format",
            .descr = &.{"Use dot format instead of plain text when dumping VPlans"},
        },
        .{
            .name = "vplan_verify_hcfg",
            .string = "--vplan-verify-hcfg",
            .descr = &.{"Verify VPlan H-CFG."},
        },
        .{
            .name = "wasm_disable_explicit_locals",
            .string = "--wasm-disable-explicit-locals",
            .descr = &.{"WebAssembly: output implicit locals in instruction output for test purposes only."},
        },
        .{
            .name = "wasm_enable_eh",
            .string = "--wasm-enable-eh",
            .descr = &.{"WebAssembly exception handling"},
        },
        .{
            .name = "wasm_enable_sjlj",
            .string = "--wasm-enable-sjlj",
            .descr = &.{"WebAssembly setjmp/longjmp handling"},
        },
        .{
            .name = "wasm_keep_registers",
            .string = "--wasm-keep-registers",
            .descr = &.{"WebAssembly: output stack registers in instruction output for test purposes only."},
        },
        .{
            .name = "whole_program_visibility",
            .string = "--whole-program-visibility",
            .descr = &.{"Enable whole program visibility"},
        },
        .{
            .name = "wholeprogramdevirt_branch_funnel_threshold",
            .string = "--wholeprogramdevirt-branch-funnel-threshold",
            .descr = &.{"Maximum number of call targets per call site to enable branch funnels"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "wholeprogramdevirt_check",
            .string = "--wholeprogramdevirt-check",
            .descr = &.{"Type of checking for incorrect devirtualizations"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, trap = 1, fallback = 2 }) },
        },
        .{
            .name = "wholeprogramdevirt_print_index_based",
            .string = "--wholeprogramdevirt-print-index-based",
            .descr = &.{"Print index-based devirtualization messages"},
        },
        .{
            .name = "wholeprogramdevirt_read_summary",
            .string = "--wholeprogramdevirt-read-summary",
            .descr = &.{"Read summary from given bitcode or YAML file before running pass"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "wholeprogramdevirt_skip",
            .string = "--wholeprogramdevirt-skip",
            .descr = &.{"Prevent function(s) from being devirtualized"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "wholeprogramdevirt_summary_action",
            .string = "--wholeprogramdevirt-summary-action",
            .descr = &.{"What to do with the summary when running this pass"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u2) { none = 0, import = 1, @"export" = 2 }) },
        },
        .{
            .name = "wholeprogramdevirt_write_summary",
            .string = "--wholeprogramdevirt-write-summary",
            .descr = &.{"Write summary to given bitcode or YAML file after running pass. Output file format is deduced from extension: *.bc means writing bitcode, otherwise YAML"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "write_relbf_to_summary",
            .string = "--write-relbf-to-summary",
            .descr = &.{"Write relative block frequency to function summary "},
        },
        .{
            .name = "x86_align_branch",
            .string = "--x86-align-branch",
            .descr = &.{"Specify types of branches to align (plus separated list of types):"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "x86_align_branch_boundary",
            .string = "--x86-align-branch-boundary",
            .descr = &.{"Control how the assembler should align branches with NOP. If the boundary's size is not 0, it should be a power of 2 and no less than 32. Branches will be aligned to prevent from being across or against the boundary of specified size. The default value 0 does not align branches."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "x86_and_imm_shrink",
            .string = "--x86-and-imm-shrink",
            .descr = &.{"Enable setting constant bits to reduce size of mask immediates"},
        },
        .{
            .name = "x86_asm_syntax",
            .string = "--x86-asm-syntax",
            .descr = &.{"Choose style of code to emit from X86 backend:"},
            .tag = .{ .optional_field = .tag },
            .type = .{ .store = &types.BGTypeDescr.init(?enum(u1) { att = 0, intel = 1 }) },
        },
        .{
            .name = "x86_branches_within_32B_boundaries",
            .string = "--x86-branches-within-32B-boundaries",
            .descr = &.{"Align selected instructions to mitigate negative performance impact of Intel's micro code update for errata skx102.  May break assumptions about labels corresponding to particular instructions, and should be used with caution."},
        },
        .{
            .name = "x86_bypass_prefetch_instructions",
            .string = "--x86-bypass-prefetch-instructions",
            .descr = &.{"When discriminating instructions with memory operands, ignore prefetch instructions. This ensures the other memory operand instructions have the same identifiers after inserting prefetches, allowing for successive insertions."},
        },
        .{
            .name = "x86_cmov_converter",
            .string = "--x86-cmov-converter",
            .descr = &.{"Enable the X86 cmov-to-branch optimization."},
        },
        .{
            .name = "x86_cmov_converter_force_all",
            .string = "--x86-cmov-converter-force-all",
            .descr = &.{"Convert all cmovs to branches."},
        },
        .{
            .name = "x86_cmov_converter_force_mem_operand",
            .string = "--x86-cmov-converter-force-mem-operand",
            .descr = &.{"Convert cmovs to branches whenever they have memory operands."},
        },
        .{
            .name = "x86_cmov_converter_threshold",
            .string = "--x86-cmov-converter-threshold",
            .descr = &.{"Minimum gain per loop (in cycles) threshold."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "x86_disable_avoid_SFB",
            .string = "--x86-disable-avoid-SFB",
            .descr = &.{"X86: Disable Store Forwarding Blocks fixup."},
        },
        .{
            .name = "x86_discriminate_memops",
            .string = "--x86-discriminate-memops",
            .descr = &.{"Generate unique debug info for each instruction with a memory operand. Should be enabled for profile-driven cache prefetching, both in the build of the binary being profiled, as well as in the build of the binary consuming the profile."},
        },
        .{
            .name = "x86_early_ifcvt",
            .string = "--x86-early-ifcvt",
            .descr = &.{"Enable early if-conversion on X86"},
        },
        .{
            .name = "x86_experimental_lvi_inline_asm_hardening",
            .string = "--x86-experimental-lvi-inline-asm-hardening",
            .descr = &.{"Harden inline assembly code that may be vulnerable to Load Value Injection (LVI). This feature is experimental."},
        },
        .{
            .name = "x86_experimental_pref_innermost_loop_alignment",
            .string = "--x86-experimental-pref-innermost-loop-alignment",
            .descr = &.{"Sets the preferable loop alignment for experiments (as log2 bytes) for innermost loops only. If specified, this option overrides alignment set by x86-experimental-pref-loop-alignment."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "x86_experimental_unordered_atomic_isel",
            .string = "--x86-experimental-unordered-atomic-isel",
            .descr = &.{"Use LoadSDNode and StoreSDNode instead of AtomicSDNode for unordered atomic loads and stores respectively."},
        },
        .{
            .name = "x86_indirect_branch_tracking",
            .string = "--x86-indirect-branch-tracking",
            .descr = &.{"Enable X86 indirect branch tracking pass."},
        },
        .{
            .name = "x86_lvi_load_dot",
            .string = "--x86-lvi-load-dot",
            .descr = &.{"For each function, emit a dot graph depicting potential LVI gadgets"},
        },
        .{
            .name = "x86_lvi_load_dot_only",
            .string = "--x86-lvi-load-dot-only",
            .descr = &.{"For each function, emit a dot graph depicting potential LVI gadgets, and do not insert any fences"},
        },
        .{
            .name = "x86_lvi_load_dot_verify",
            .string = "--x86-lvi-load-dot-verify",
            .descr = &.{"For each function, emit a dot graph to stdout depicting potential LVI gadgets, used for testing purposes only"},
        },
        .{
            .name = "x86_lvi_load_no_cbranch",
            .string = "--x86-lvi-load-no-cbranch",
            .descr = &.{"Don't treat conditional branches as disclosure gadgets. This may improve performance, at the cost of security."},
        },
        .{
            .name = "x86_lvi_load_opt_plugin",
            .string = "--x86-lvi-load-opt-plugin",
            .descr = &.{"Specify a plugin to optimize LFENCE insertion"},
            .tag = .{ .optional_field = .string },
            .type = .{ .store = &types.BGTypeDescr.init(?[]const u8) },
        },
        .{
            .name = "x86_machine_combiner",
            .string = "--x86-machine-combiner",
            .descr = &.{"Enable the machine combiner pass"},
        },
        .{
            .name = "x86_pad_for_align",
            .string = "--x86-pad-for-align",
            .descr = &.{"Pad previous instructions to implement align directives"},
        },
        .{
            .name = "x86_pad_for_branch_align",
            .string = "--x86-pad-for-branch-align",
            .descr = &.{"Pad previous instructions to implement branch alignment"},
        },
        .{
            .name = "x86_pad_max_prefix_size",
            .string = "--x86-pad-max-prefix-size",
            .descr = &.{"Maximum number of prefixes to use for padding"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "x86_promote_anyext_load",
            .string = "--x86-promote-anyext-load",
            .descr = &.{"Enable promoting aligned anyext load to wider load"},
        },
        .{
            .name = "x86_seses_enable_without_lvi_cfi",
            .string = "--x86-seses-enable-without-lvi-cfi",
            .descr = &.{"Force enable speculative execution side effect suppression. (Note: User must pass -mlvi-cfi in order to mitigate indirect branches and returns.)"},
        },
        .{
            .name = "x86_seses_omit_branch_lfences",
            .string = "--x86-seses-omit-branch-lfences",
            .descr = &.{"Omit all lfences before branch instructions."},
        },
        .{
            .name = "x86_seses_one_lfence_per_bb",
            .string = "--x86-seses-one-lfence-per-bb",
            .descr = &.{"Omit all lfences other than the first to be placed in a basic block."},
        },
        .{
            .name = "x86_seses_only_lfence_non_const",
            .string = "--x86-seses-only-lfence-non-const",
            .descr = &.{"Only lfence before groups of terminators where at least one branch instruction has an input to the addressing mode that is a register other than %rip."},
        },
        .{
            .name = "x86_sfb_inspection_limit",
            .string = "--x86-sfb-inspection-limit",
            .descr = &.{"X86: Number of instructions backward to inspect for store forwarding blocks."},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
        .{
            .name = "x86_slh_fence_call_and_ret",
            .string = "--x86-slh-fence-call-and-ret",
            .descr = &.{"Use a full speculation fence to harden both call and ret edges rather than a lighter weight mitigation."},
        },
        .{
            .name = "x86_slh_indirect",
            .string = "--x86-slh-indirect",
            .descr = &.{"Harden indirect calls and jumps against using speculatively stored attacker controlled addresses. This is designed to mitigate Spectre v1.2 style attacks."},
        },
        .{
            .name = "x86_slh_ip",
            .string = "--x86-slh-ip",
            .descr = &.{"Harden interprocedurally by passing our state in and out of functions in the high bits of the stack pointer."},
        },
        .{
            .name = "x86_slh_lfence",
            .string = "--x86-slh-lfence",
            .descr = &.{"Use LFENCE along each conditional edge to harden against speculative loads rather than conditional movs and poisoned pointers."},
        },
        .{
            .name = "x86_slh_loads",
            .string = "--x86-slh-loads",
            .descr = &.{"Sanitize loads from memory. When disable, no significant security is provided."},
        },
        .{
            .name = "x86_slh_post_load",
            .string = "--x86-slh-post-load",
            .descr = &.{"Harden the value loaded *after* it is loaded by flushing the loaded bits to 1. This is hard to do in general but can be done easily for GPRs."},
        },
        .{
            .name = "x86_speculative_load_hardening",
            .string = "--x86-speculative-load-hardening",
            .descr = &.{"Force enable speculative load hardening"},
        },
        .{
            .name = "x86_tile_ra",
            .string = "--x86-tile-ra",
            .descr = &.{"Enable the tile register allocation pass"},
        },
        .{
            .name = "x86_use_base_pointer",
            .string = "--x86-use-base-pointer",
            .descr = &.{"Enable use of a base pointer for complex stack frames"},
        },
        .{
            .name = "x86_use_fsrm_for_memcpy",
            .string = "--x86-use-fsrm-for-memcpy",
            .descr = &.{"Use fast short rep mov in memcpy lowering"},
        },
        .{
            .name = "x86_use_vzeroupper",
            .string = "--x86-use-vzeroupper",
            .descr = &.{"Minimize AVX to SSE transition penalty"},
        },
        .{
            .name = "xcoff_traceback_table",
            .string = "--xcoff-traceback-table",
            .descr = &.{"Emit the XCOFF traceback table"},
        },
        .{
            .name = "xcore_max_threads",
            .string = "--xcore-max-threads",
            .descr = &.{"Maximum number of threads (for emulation thread-local storage)"},
            .tag = .{ .optional_field = .integer },
            .type = .{ .store = &types.BGTypeDescr.init(?usize) },
        },
    },
};
pub const all: []const types.Attributes = &.{
    zig_build_command_attributes,
    zig_ar_command_attributes,
    zig_objcopy_command_attributes,
    //llvm_tblgen_command_attributes,
    //llvm_llc_command_attributes,
    //zig_fetch_command_attributes,
    zig_format_command_attributes,
};
